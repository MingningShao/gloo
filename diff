diff --git a/Makefile b/Makefile
index 83c338e8a..9742bf037 100644
--- a/Makefile
+++ b/Makefile
@@ -190,10 +190,10 @@ generate-client-mocks:
 	@$(foreach INFO, $(MOCK_RESOURCE_INFO), \
 		echo Generating mock for $(word 3,$(subst :, , $(INFO)))...; \
 		GOBIN=$(DEPSGOBIN) mockgen -destination=projects/$(word 1,$(subst :, , $(INFO)))/pkg/mocks/mock_$(word 2,$(subst :, , $(INFO)))_client.go \
-     		-package=mocks \
-     		github.com/solo-io/gloo/projects/$(word 1,$(subst :, , $(INFO)))/pkg/api/v1 \
-     		$(word 3,$(subst :, , $(INFO))) \
-     	;)
+		-package=mocks \
+		github.com/solo-io/gloo/projects/$(word 1,$(subst :, , $(INFO)))/pkg/api/v1 \
+		$(word 3,$(subst :, , $(INFO))) \
+	;)
 
 #----------------------------------------------------------------------------------
 # glooctl
@@ -549,7 +549,7 @@ endif
 
 .PHONY: docker docker-push
 docker: discovery-docker gateway-docker gloo-docker \
- 		gloo-envoy-wrapper-docker certgen-docker sds-docker \
+		gloo-envoy-wrapper-docker certgen-docker sds-docker \
 		ingress-docker access-logger-docker
 
 # Depends on DOCKER_IMAGES, which is set to docker if RELEASE is "true", otherwise empty (making this a no-op).
@@ -602,8 +602,7 @@ push-kind-images: docker
 
 .PHONY: build-test-assets
 build-test-assets: build-test-chart $(OUTPUT_DIR)/glooctl-linux-$(GOARCH) \
- 	$(OUTPUT_DIR)/glooctl-darwin-$(GOARCH)
-
+	$(OUTPUT_DIR)/glooctl-darwin-$(GOARCH)
 .PHONY: build-test-chart
 build-test-chart:
 	mkdir -p $(TEST_ASSET_DIR)
diff --git a/docs/data/ProtoMap.yaml b/docs/data/ProtoMap.yaml
index e9ae5704f..6d899cb4e 100644
--- a/docs/data/ProtoMap.yaml
+++ b/docs/data/ProtoMap.yaml
@@ -35,6 +35,12 @@ apis:
   consul.options.gloo.solo.io.UpstreamSpec:
     relativepath: reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/options/consul/consul.proto.sk/#UpstreamSpec
     package: consul.options.gloo.solo.io
+  core.fed.solo.io.PlacementStatus:
+    relativepath: reference/api/github.com/solo-io/solo-apis/api/gloo-fed/fed/core/v1/placement.proto.sk/#PlacementStatus
+    package: core.fed.solo.io
+  core.fed.solo.io.TemplateMetadata:
+    relativepath: reference/api/github.com/solo-io/solo-apis/api/gloo-fed/fed/core/v1/placement.proto.sk/#TemplateMetadata
+    package: core.fed.solo.io
   core.skv2.solo.io.ClusterObjectRef:
     relativepath: reference/api/github.com/solo-io/skv2/api/core/v1/core.proto.sk/#ClusterObjectRef
     package: core.skv2.solo.io
@@ -575,6 +581,18 @@ apis:
   fault.options.gloo.solo.io.RouteFaults:
     relativepath: reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/options/faultinjection/fault.proto.sk/#RouteFaults
     package: fault.options.gloo.solo.io
+  fed.solo.io.FailoverSchemeSpec:
+    relativepath: reference/api/github.com/solo-io/solo-apis/api/gloo-fed/fed/v1/failover.proto.sk/#FailoverSchemeSpec
+    package: fed.solo.io
+  fed.solo.io.FailoverSchemeStatus:
+    relativepath: reference/api/github.com/solo-io/solo-apis/api/gloo-fed/fed/v1/failover.proto.sk/#FailoverSchemeStatus
+    package: fed.solo.io
+  fed.solo.io.GlooInstanceSpec:
+    relativepath: reference/api/github.com/solo-io/solo-apis/api/gloo-fed/fed/v1/instance.proto.sk/#GlooInstanceSpec
+    package: fed.solo.io
+  fed.solo.io.GlooInstanceStatus:
+    relativepath: reference/api/github.com/solo-io/solo-apis/api/gloo-fed/fed/v1/instance.proto.sk/#GlooInstanceStatus
+    package: fed.solo.io
   gateway.solo.io.DelegateAction:
     relativepath: reference/api/github.com/solo-io/gloo/projects/gateway/api/v1/virtual_service.proto.sk/#DelegateAction
     package: gateway.solo.io
diff --git a/go.mod b/go.mod
index 6f1c50994..1b6f19aab 100644
--- a/go.mod
+++ b/go.mod
@@ -3,8 +3,8 @@ module github.com/solo-io/gloo
 go 1.14
 
 require (
-	contrib.go.opencensus.io/exporter/stackdriver v0.12.5 // indirect
-	github.com/Masterminds/semver/v3 v3.0.3
+	contrib.go.opencensus.io/exporter/stackdriver v0.13.4 // indirect
+	github.com/Masterminds/semver/v3 v3.1.0
 	github.com/Netflix/go-expect v0.0.0-20180928190340-9d1f4485533b
 	github.com/avast/retry-go v2.4.3+incompatible
 	github.com/aws/aws-sdk-go v1.34.9
@@ -19,8 +19,8 @@ require (
 	github.com/fsnotify/fsnotify v1.4.9
 	github.com/ghodss/yaml v1.0.1-0.20190212211648-25d852aebe32
 	github.com/go-openapi/loads v0.19.4
-	github.com/go-openapi/spec v0.19.4
-	github.com/go-openapi/swag v0.19.5
+	github.com/go-openapi/spec v0.19.6
+	github.com/go-openapi/swag v0.19.7
 	github.com/go-swagger/go-swagger v0.21.0
 	github.com/gogo/googleapis v1.3.1
 	github.com/gogo/protobuf v1.3.1
@@ -29,10 +29,10 @@ require (
 	github.com/google/go-containerregistry v0.1.3 // indirect
 	github.com/google/go-github v17.0.0+incompatible
 	github.com/google/go-github/v31 v31.0.0
-	github.com/gorilla/mux v1.7.3
+	github.com/gorilla/mux v1.7.4
 	github.com/grpc-ecosystem/go-grpc-middleware v1.0.1-0.20190118093823-f849b5445de4
 	github.com/hashicorp/consul/api v1.3.0
-	github.com/hashicorp/go-multierror v1.0.0
+	github.com/hashicorp/go-multierror v1.1.0
 	github.com/hashicorp/go-uuid v1.0.2-0.20191001231223-f32f5fe8d6a8
 	github.com/hashicorp/vault/api v1.0.5-0.20191108163347-bdd38fca2cff
 	github.com/hinshun/vt10x v0.0.0-20180809195222-d55458df857c
@@ -49,21 +49,21 @@ require (
 	github.com/onsi/gomega v1.10.1
 	github.com/opencontainers/go-digest v1.0.0-rc1
 	github.com/pkg/browser v0.0.0-20180916011732-0a3d74bf9ce4
-	github.com/prometheus/client_golang v1.2.1
-	github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4
+	github.com/prometheus/client_golang v1.6.0
+	github.com/prometheus/client_model v0.2.0
 	github.com/prometheus/prometheus v2.5.0+incompatible
 	github.com/rotisserie/eris v0.4.0
-	github.com/sergi/go-diff v1.0.0
+	github.com/sergi/go-diff v1.1.0
 	github.com/solo-io/envoy-operator v0.1.4
 	github.com/solo-io/go-list-licenses v0.0.0-20191023220251-171e4740d00f
-	github.com/solo-io/go-utils v0.16.6
+	github.com/solo-io/go-utils v0.17.0
 	github.com/solo-io/protoc-gen-ext v0.0.9
-	github.com/solo-io/reporting-client v0.1.2
+	github.com/solo-io/reporting-client v0.2.0
 	github.com/solo-io/skv2 v0.8.1
-	github.com/solo-io/solo-apis v0.0.0-20200717214114-6a1daa5a5d05
-	github.com/solo-io/solo-kit v0.13.13
-	github.com/solo-io/wasm/tools/wasme/pkg v0.0.0-20200922223809-7fff932e9e9a
-	github.com/spf13/afero v1.2.2
+	github.com/solo-io/solo-apis v0.0.0-20200928150131-f12a78004f0e
+	github.com/solo-io/solo-kit v0.14.0
+	github.com/solo-io/wasm/tools/wasme/pkg v0.0.0-20201021213306-77f82bdc3cc3
+	github.com/spf13/afero v1.3.4
 	github.com/spf13/cobra v1.0.0
 	github.com/spf13/pflag v1.0.5
 	github.com/spf13/viper v1.7.0
@@ -74,66 +74,76 @@ require (
 	golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d
 	golang.org/x/sync v0.0.0-20200625203802-6e8e738ad208
 	golang.org/x/tools v0.0.0-20200916195026-c9a70fc28ce3
-	google.golang.org/genproto v0.0.0-20200626011028-ee7919e894b5
-	google.golang.org/grpc v1.29.1
+	google.golang.org/genproto v0.0.0-20200904004341-0bd0a958aa1d
+	google.golang.org/grpc v1.31.1
 	gopkg.in/AlecAivazis/survey.v1 v1.8.7
 	gopkg.in/yaml.v2 v2.3.0
-	helm.sh/helm/v3 v3.1.2
+	helm.sh/helm/v3 v3.2.4
 	k8s.io/api v0.18.8
-	k8s.io/apiextensions-apiserver v0.18.2
+	k8s.io/apiextensions-apiserver v0.18.6
 	k8s.io/apimachinery v0.18.8
-	k8s.io/client-go v11.0.0+incompatible
-	k8s.io/code-generator v0.18.2
-	k8s.io/helm v2.16.1+incompatible
-	k8s.io/kube-openapi v0.0.0-20200121204235-bf4fb3bd569c // indirect
-	k8s.io/kubectl v0.17.2
-	k8s.io/kubernetes v1.17.1
-	k8s.io/utils v0.17.1
+	k8s.io/client-go v11.0.1-0.20190805182717-6502b5e7b1b5+incompatible
+	k8s.io/code-generator v0.18.8
+	k8s.io/helm v2.17.0+incompatible
+	k8s.io/kubectl v0.18.6
+	k8s.io/kubernetes v1.18.6
+	k8s.io/utils v0.0.0-20200729134348-d5654de09c73
 	knative.dev/pkg v0.0.0-20191203174735-3444316bdeef
 	knative.dev/serving v0.10.0
-	sigs.k8s.io/controller-runtime v0.5.8
+	sigs.k8s.io/controller-runtime v0.6.2
 	sigs.k8s.io/yaml v1.2.0
 )
 
 replace (
-	cloud.google.com/go => cloud.google.com/go v0.52.0 // cloud.google.com/go/iam breaks with v0.53.0+
+	// github.com/Azure/go-autorest/autorest has different versions for the Go
+	// modules than it does for releases on the repository, so we need to manually
+	// Note the correct  version when updating.
 	github.com/Azure/go-autorest => github.com/Azure/go-autorest v13.0.0+incompatible
 	github.com/Sirupsen/logrus => github.com/sirupsen/logrus v1.4.2
+	github.com/census-instrumentation/opencensus-proto => github.com/census-instrumentation/opencensus-proto v0.2.0 // indirect
 	github.com/docker/docker => github.com/moby/moby v0.7.3-0.20190826074503-38ab9da00309
-	github.com/golang/mock => github.com/golang/mock v1.4.3
+	// Required for proper serialization of CRDs
 	github.com/golang/protobuf => github.com/golang/protobuf v1.3.5
-	github.com/spf13/cobra => github.com/spf13/cobra v0.0.5 // override wasme requirement
-	google.golang.org/genproto => google.golang.org/genproto v0.0.0-20200117163144-32f20d992d24 // override wasme requirement
+	github.com/renstrom/dedent => github.com/lithammer/dedent v1.0.0
 
-	// kube 1.17
-	k8s.io/api => k8s.io/api v0.17.1
-	k8s.io/apiextensions-apiserver => k8s.io/apiextensions-apiserver v0.17.1
-	k8s.io/apimachinery => k8s.io/apimachinery v0.17.1
-	k8s.io/apiserver => k8s.io/apiserver v0.17.1
-	k8s.io/cli-runtime => k8s.io/cli-runtime v0.17.1
-	k8s.io/client-go => k8s.io/client-go v0.17.1
-	k8s.io/cloud-provider => k8s.io/cloud-provider v0.17.1
-	k8s.io/cluster-bootstrap => k8s.io/cluster-bootstrap v0.17.1
-	k8s.io/code-generator => k8s.io/code-generator v0.17.1
-	k8s.io/component-base => k8s.io/component-base v0.17.1
-	k8s.io/cri-api => k8s.io/cri-api v0.17.1
-	k8s.io/csi-translation-lib => k8s.io/csi-translation-lib v0.17.1
+	//the following block of replacements are needed to have locked these packages to before versions they switched to using proto4
+	go.opencensus.io => go.opencensus.io v0.22.1
+	//github.com/lithammer/dedent => github.com/renstrom/dedent v1.0.0
+	//github.com/solo-io/solo-kit => /Users/milesholland/workRepos/solo-kit
+	// https://github.com/ory/dockertest/issues/208#issuecomment-686820414
+	golang.org/x/sys => golang.org/x/sys v0.0.0-20200826173525-f9321e4c35a6
+	google.golang.org/genproto => google.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884
+
+	// kube 0.18: redirects needed for most k8s.io dependencies because
+	// k8s.io/kubernetes tries to import v0.0.0 of everything.
+	k8s.io/api => k8s.io/api v0.18.6
+	k8s.io/apiextensions-apiserver => k8s.io/apiextensions-apiserver v0.18.6
+	k8s.io/apimachinery => k8s.io/apimachinery v0.18.6
+	k8s.io/apiserver => k8s.io/apiserver v0.18.6
+	k8s.io/cli-runtime => k8s.io/cli-runtime v0.18.6
+	k8s.io/client-go => k8s.io/client-go v0.18.6
+	k8s.io/cloud-provider => k8s.io/cloud-provider v0.18.6
+	k8s.io/cluster-bootstrap => k8s.io/cluster-bootstrap v0.18.6
+	k8s.io/code-generator => k8s.io/code-generator v0.18.6
+	k8s.io/component-base => k8s.io/component-base v0.18.6
+	k8s.io/cri-api => k8s.io/cri-api v0.18.6
+	k8s.io/csi-translation-lib => k8s.io/csi-translation-lib v0.18.6
 	k8s.io/gengo => k8s.io/gengo v0.0.0-20190822140433-26a664648505
 	k8s.io/heapster => k8s.io/heapster v1.2.0-beta.1
 	k8s.io/klog => github.com/stefanprodan/klog v0.0.0-20190418165334-9cbb78b20423
-	k8s.io/kube-aggregator => k8s.io/kube-aggregator v0.17.1
-	k8s.io/kube-controller-manager => k8s.io/kube-controller-manager v0.17.1
+	k8s.io/kube-aggregator => k8s.io/kube-aggregator v0.18.6
+	k8s.io/kube-controller-manager => k8s.io/kube-controller-manager v0.18.6
 	k8s.io/kube-openapi => k8s.io/kube-openapi v0.0.0-20190816220812-743ec37842bf
-	k8s.io/kube-proxy => k8s.io/kube-proxy v0.17.1
-	k8s.io/kube-scheduler => k8s.io/kube-scheduler v0.17.1
-	k8s.io/kubectl => k8s.io/kubectl v0.17.1
-	k8s.io/kubelet => k8s.io/kubelet v0.17.1
-	k8s.io/legacy-cloud-providers => k8s.io/legacy-cloud-providers v0.17.1
-	k8s.io/metrics => k8s.io/metrics v0.17.1
-	k8s.io/node-api => k8s.io/node-api v0.17.1
+	k8s.io/kube-proxy => k8s.io/kube-proxy v0.18.6
+	k8s.io/kube-scheduler => k8s.io/kube-scheduler v0.18.6
+	k8s.io/kubectl => k8s.io/kubectl v0.18.6
+	k8s.io/kubelet => k8s.io/kubelet v0.18.6
+	k8s.io/legacy-cloud-providers => k8s.io/legacy-cloud-providers v0.18.6
+	k8s.io/metrics => k8s.io/metrics v0.18.6
+	k8s.io/node-api => k8s.io/node-api v0.18.6
 	k8s.io/repo-infra => k8s.io/repo-infra v0.0.0-20181204233714-00fe14e3d1a3
-	k8s.io/sample-apiserver => k8s.io/sample-apiserver v0.17.1
-	k8s.io/sample-cli-plugin => k8s.io/sample-cli-plugin v0.17.1
-	k8s.io/sample-controller => k8s.io/sample-controller v0.17.1
+	k8s.io/sample-apiserver => k8s.io/sample-apiserver v0.18.6
+	k8s.io/sample-cli-plugin => k8s.io/sample-cli-plugin v0.18.6
+	k8s.io/sample-controller => k8s.io/sample-controller v0.18.6
 	k8s.io/utils => k8s.io/utils v0.0.0-20190801114015-581e00157fb1
 )
diff --git a/go.sum b/go.sum
index 418391f91..f0af2b4b5 100644
--- a/go.sum
+++ b/go.sum
@@ -1,20 +1,44 @@
 bazil.org/fuse v0.0.0-20160811212531-371fbbdaa898/go.mod h1:Xbm+BRKSBEpa4q4hTSxohYNQpsxXPbPry4JJWOB3LB8=
 bitbucket.org/bertimus9/systemstat v0.0.0-20180207000608-0eeff89b0690/go.mod h1:Ulb78X89vxKYgdL24HMTiXYHlyHEvruOj1ZPlqeNEZM=
+cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
+cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
+cloud.google.com/go v0.38.0/go.mod h1:990N+gfupTy94rShfmMCWGDn0LpTmnzTp2qbd1dvSRU=
+cloud.google.com/go v0.40.0 h1:FjSY7bOj+WzJe6TZRVtXI2b9kAYvtNg4lMbcH2+MUkk=
+cloud.google.com/go v0.40.0/go.mod h1:Tk58MuI9rbLMKlAjeO/bDnteAx7tX2gJIXw4T5Jwlro=
+cloud.google.com/go v0.44.1/go.mod h1:iSa0KzasP4Uvy3f1mN/7PiObzGgflwredwwASm/v6AU=
+cloud.google.com/go v0.44.2/go.mod h1:60680Gw3Yr4ikxnPRS/oxxkBccT6SA1yMk63TGekxKY=
+cloud.google.com/go v0.45.1/go.mod h1:RpBamKRgapWJb87xiFSdk4g1CME7QZg3uwTez+TSTjc=
+cloud.google.com/go v0.46.3/go.mod h1:a6bKKbmY7er1mI7TEI4lsAkts/mkhTSZK8w33B4RAg0=
+cloud.google.com/go v0.50.0/go.mod h1:r9sluTvynVuxRIOHXQEHMFffphuXHOMZMycpNR5e6To=
 cloud.google.com/go v0.52.0 h1:GGslhk/BU052LPlnI1vpp3fcbUs+hQ3E+Doti/3/vF8=
 cloud.google.com/go v0.52.0/go.mod h1:pXajvRH/6o3+F9jDHZWQ5PbGhn+o8w9qiu/CffaVdO4=
+cloud.google.com/go v0.53.0/go.mod h1:fp/UouUEsRkN6ryDKNW/Upv/JBKnv6WDthjR6+vze6M=
+cloud.google.com/go v0.57.0 h1:EpMNVUorLiZIELdMZbCYX/ByTFCdoYopYAGxaGVz9ms=
+cloud.google.com/go v0.57.0/go.mod h1:oXiQ6Rzq3RAkkY7N6t3TcE6jE+CIBBbA36lwQ1JyzZs=
 cloud.google.com/go/bigquery v1.0.1 h1:hL+ycaJpVE9M7nLoiXb/Pn10ENE2u+oddxbD8uu0ZVU=
 cloud.google.com/go/bigquery v1.0.1/go.mod h1:i/xbL2UlR5RvWAURpBYZTtm/cXjCha9lbfbpx4poX+o=
+cloud.google.com/go/bigquery v1.3.0/go.mod h1:PjpwJnslEMmckchkHFfq+HTD2DmtT67aNFKH1/VBDHE=
+cloud.google.com/go/bigquery v1.4.0 h1:xE3CPsOgttP4ACBePh79zTKALtXwn/Edhcr16R5hMWU=
+cloud.google.com/go/bigquery v1.4.0/go.mod h1:S8dzgnTigyfTmLBfrtrhyYhwRxG72rYxvftPBK2Dvzc=
 cloud.google.com/go/datastore v1.0.0 h1:Kt+gOPPp2LEPWp8CSfxhsM8ik9CcyE/gYu+0r+RnZvM=
 cloud.google.com/go/datastore v1.0.0/go.mod h1:LXYbyblFSglQ5pkeyhO+Qmw7ukd3C+pD7TKLgZqpHYE=
+cloud.google.com/go/datastore v1.1.0 h1:/May9ojXjRkPBNVrq+oWLqmWCkr4OU5uRY29bu0mRyQ=
+cloud.google.com/go/datastore v1.1.0/go.mod h1:umbIZjpQpHh4hmRpGhH4tLFup+FVzqBi1b3c64qFpCk=
 cloud.google.com/go/firestore v1.1.0/go.mod h1:ulACoGHTpvq5r8rxGJ4ddJZBZqakUQqClKRT5SZwBmk=
 cloud.google.com/go/pubsub v1.0.1 h1:W9tAK3E57P75u0XLLR82LZyw8VpAnhmyTOxW9qzmyj8=
 cloud.google.com/go/pubsub v1.0.1/go.mod h1:R0Gpsv3s54REJCy4fxDixWD93lHJMoZTyQ2kNxGRt3I=
+cloud.google.com/go/pubsub v1.1.0/go.mod h1:EwwdRX2sKPjnvnqCa270oGRyludottCI76h+R3AArQw=
+cloud.google.com/go/pubsub v1.2.0 h1:Lpy6hKgdcl7a3WGSfJIFmxmcdjSpP6OmBEfcOv1Y680=
+cloud.google.com/go/pubsub v1.2.0/go.mod h1:jhfEVHT8odbXTkndysNHCcx0awwzvfOlguIAii9o8iA=
 cloud.google.com/go/storage v1.0.0 h1:VV2nUM3wwLLGh9lSABFgZMjInyUbJeaRSE64WuAIQ+4=
 cloud.google.com/go/storage v1.0.0/go.mod h1:IhtSnM/ZTZV8YYJWCY8RULGVqBDmpoyjwiyrjsg+URw=
+cloud.google.com/go/storage v1.5.0/go.mod h1:tpKbwo567HUNpVclU5sGELwQWBDZ8gh0ZeosJ0Rtdos=
+cloud.google.com/go/storage v1.6.0 h1:UDpwYIwla4jHGzZJaEJYx1tOejbgSoNqsAfHAUYe2r8=
+cloud.google.com/go/storage v1.6.0/go.mod h1:N7U0C8pVQ/+NIKOBQyamJIeKQKkZ+mxpohlUTyfDhBk=
 contrib.go.opencensus.io/exporter/prometheus v0.1.0 h1:SByaIoWwNgMdPSgl5sMqM2KDE5H/ukPWBRo314xiDvg=
 contrib.go.opencensus.io/exporter/prometheus v0.1.0/go.mod h1:cGFniUXGZlKRjzOyuZJ6mgB+PgBcCIa79kEKR8YCW+A=
-contrib.go.opencensus.io/exporter/stackdriver v0.12.5 h1:roYxbw//uT5VGVKwTutsI/RShEO11XY8nBOetZEzihI=
-contrib.go.opencensus.io/exporter/stackdriver v0.12.5/go.mod h1:8x999/OcIPy5ivx/wDiV7Gx4D+VUPODf0mWRGRc5kSk=
+contrib.go.opencensus.io/exporter/stackdriver v0.13.4 h1:ksUxwH3OD5sxkjzEqGxNTl+Xjsmu3BnC/300MhSVTSc=
+contrib.go.opencensus.io/exporter/stackdriver v0.13.4/go.mod h1:aXENhDJ1Y4lIg4EUaVTwzvYETVNZk10Pu26tevFKLUc=
 dmitri.shuralyov.com/gpu/mtl v0.0.0-20190408044501-666a987793e9/go.mod h1:H6x//7gZCb22OMCxBHrMx7a5I7Hp++hsVxbQ4BYO7hU=
 github.com/Azure/azure-sdk-for-go v16.2.1+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=
 github.com/Azure/azure-sdk-for-go v35.0.0+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=
@@ -54,6 +78,8 @@ github.com/Azure/go-autorest/tracing v0.5.0/go.mod h1:r/s2XiOKccPW3HrqB+W0TQzfbt
 github.com/BurntSushi/toml v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=
 github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
 github.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=
+github.com/DATA-DOG/go-sqlmock v1.4.1 h1:ThlnYciV1iM/V0OSF/dtkqWb6xo5qITT1TJBG1MRDJM=
+github.com/DATA-DOG/go-sqlmock v1.4.1/go.mod h1:f/Ixk793poVmq4qj/V1dPUg2JEAKC73Q5eFN3EC/SaM=
 github.com/DataDog/datadog-go v3.2.0+incompatible/go.mod h1:LButxg5PwREeZtORoXG3tL4fMGNddJ+vMq1mwgfaqoQ=
 github.com/GoogleCloudPlatform/k8s-cloud-provider v0.0.0-20190822182118-27a4ced34534/go.mod h1:iroGtC8B3tQiqtds1l+mgk/BBOrxbqjH+eUfFQYRc14=
 github.com/JeffAshton/win_pdh v0.0.0-20161109143554-76bb4ee9f0ab/go.mod h1:3VYc5hodBMJ5+l/7J4xAyMeuM2PNuepvHlGs8yilUCA=
@@ -65,13 +91,15 @@ github.com/Masterminds/goutils v1.1.0/go.mod h1:8cTjp+g8YejhMuvIA5y2vz3BpJxksy86
 github.com/Masterminds/semver v1.4.2 h1:WBLTQ37jOCzSLtXNdoo8bNM8876KhNqOKvrlGITgsTc=
 github.com/Masterminds/semver v1.4.2/go.mod h1:MB6lktGJrhw8PrUyiEoblNEGEQ+RzHPF078ddwwvV3Y=
 github.com/Masterminds/semver/v3 v3.0.1/go.mod h1:VPu/7SZ7ePZ3QOrcuXROw5FAcLl4a0cBrbBpGY/8hQs=
-github.com/Masterminds/semver/v3 v3.0.3 h1:znjIyLfpXEDQjOIEWh+ehwpTU14UzUPub3c3sm36u14=
-github.com/Masterminds/semver/v3 v3.0.3/go.mod h1:VPu/7SZ7ePZ3QOrcuXROw5FAcLl4a0cBrbBpGY/8hQs=
+github.com/Masterminds/semver/v3 v3.1.0 h1:Y2lUDsFKVRSYGojLJ1yLxSXdMmMYTYls0rCvoqmMUQk=
+github.com/Masterminds/semver/v3 v3.1.0/go.mod h1:VPu/7SZ7ePZ3QOrcuXROw5FAcLl4a0cBrbBpGY/8hQs=
 github.com/Masterminds/sprig v2.20.0+incompatible h1:dJTKKuUkYW3RMFdQFXPU/s6hg10RgctmTjRcbZ98Ap8=
 github.com/Masterminds/sprig v2.20.0+incompatible/go.mod h1:y6hNFY5UBTIWBxnzTeuNhlNS5hqE0NB0E6fgfo2Br3o=
 github.com/Masterminds/sprig/v3 v3.0.0/go.mod h1:NEUY/Qq8Gdm2xgYA+NwJM6wmfdRV9xkh8h/Rld20R0U=
-github.com/Masterminds/sprig/v3 v3.0.2 h1:wz22D0CiSctrliXiI9ZO3HoNApweeRGftyDN+BQa3B8=
-github.com/Masterminds/sprig/v3 v3.0.2/go.mod h1:oesJ8kPONMONaZgtiHNzUShJbksypC5kWczhZAf6+aU=
+github.com/Masterminds/sprig/v3 v3.1.0 h1:j7GpgZ7PdFqNsmncycTHsLmVPf5/3wJtlgW9TNDYD9Y=
+github.com/Masterminds/sprig/v3 v3.1.0/go.mod h1:ONGMf7UfYGAbMXCZmQLy8x3lCDIPrEZE/rU8pmrbihA=
+github.com/Masterminds/squirrel v1.2.0 h1:K1NhbTO21BWG47IVR0OnIZuE0LZcXAYqywrC3Ko53KI=
+github.com/Masterminds/squirrel v1.2.0/go.mod h1:yaPeOnPG5ZRwL9oKdTsO/prlkPbXWZlRVMQ/gGlzIuA=
 github.com/Masterminds/vcs v1.13.0/go.mod h1:N09YCmOQr6RLxC6UNHzuVwAdodYbbnycGHSmwVJjcKA=
 github.com/Masterminds/vcs v1.13.1/go.mod h1:N09YCmOQr6RLxC6UNHzuVwAdodYbbnycGHSmwVJjcKA=
 github.com/Microsoft/go-winio v0.4.11/go.mod h1:VhR8bwka0BXejwEJY73c50VrPtXAaKcyvVC4A4RozmA=
@@ -105,6 +133,7 @@ github.com/ajstarks/svgo v0.0.0-20180226025133-644b8db467af/go.mod h1:K08gAheRH3
 github.com/alcortesm/tgz v0.0.0-20161220082320-9c5fe88206d7 h1:uSoVVbwJiQipAclBbw+8quDsfcvFjOpI5iCf4p/cqCs=
 github.com/alcortesm/tgz v0.0.0-20161220082320-9c5fe88206d7/go.mod h1:6zEj6s6u/ghQa61ZWa/C2Aw3RkjiTBOix7dkqa1VLIs=
 github.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=
+github.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751 h1:JYp7IbQjafoB+tBA3gMyHYHrpOtNuDiK/uB5uXxq5wM=
 github.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=
 github.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=
 github.com/alecthomas/units v0.0.0-20190717042225-c3de453c63f4/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=
@@ -122,14 +151,16 @@ github.com/asaskevich/govalidator v0.0.0-20190424111038-f61b66f89f4a/go.mod h1:l
 github.com/asaskevich/govalidator v0.0.0-20200108200545-475eaeb16496 h1:zV3ejI06GQ59hwDQAvmK1qxOQGB3WuVTRoY0okPTAv0=
 github.com/asaskevich/govalidator v0.0.0-20200108200545-475eaeb16496/go.mod h1:oGkLhpf+kjZl6xBf758TQhh5XrAeiJv/7FRz/2spLIg=
 github.com/auth0/go-jwt-middleware v0.0.0-20170425171159-5493cabe49f7/go.mod h1:LWMyo4iOLWXHGdBki7NIht1kHru/0wM179h+d3g8ATM=
+github.com/avast/retry-go v2.2.0+incompatible h1:m+w7mVLWa/oKqX2xYqiEKQQkeGH8DDEXB/XnjS54Wyw=
 github.com/avast/retry-go v2.2.0+incompatible/go.mod h1:XtSnn+n/sHqQIpZ10K1qAevBhOOCWBLXXy3hyiqqBrY=
 github.com/avast/retry-go v2.4.3+incompatible h1:c/FTk2POrEQyZfaHBMkMrXdu3/6IESJUHwu8r3k1JEU=
 github.com/avast/retry-go v2.4.3+incompatible/go.mod h1:XtSnn+n/sHqQIpZ10K1qAevBhOOCWBLXXy3hyiqqBrY=
+github.com/aws/aws-sdk-go v1.15.11 h1:m45+Ru/wA+73cOZXiEGLDH2d9uLN3iHqMc0/z4noDXE=
 github.com/aws/aws-sdk-go v1.15.11/go.mod h1:mFuSZ37Z9YOHbQEwBWztmVzqXrEkub65tZoCYDt7FT0=
-github.com/aws/aws-sdk-go v1.16.26/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=
-github.com/aws/aws-sdk-go v1.22.1/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=
+github.com/aws/aws-sdk-go v1.23.20/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=
 github.com/aws/aws-sdk-go v1.26.7/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=
 github.com/aws/aws-sdk-go v1.27.1/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=
+github.com/aws/aws-sdk-go v1.28.2/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=
 github.com/aws/aws-sdk-go v1.30.15 h1:Sd8QDVzzE8Sl+xNccmdj0HwMrFowv6uVUx9tGsCE1ZE=
 github.com/aws/aws-sdk-go v1.30.15/go.mod h1:5zCpMtNQVjRREroY7sYe8lOMRSxkhG6MZveU8YkpAk0=
 github.com/aws/aws-sdk-go v1.31.6/go.mod h1:5zCpMtNQVjRREroY7sYe8lOMRSxkhG6MZveU8YkpAk0=
@@ -168,22 +199,24 @@ github.com/bugsnag/panicwrap v1.2.0 h1:OzrKrRvXis8qEvOkfcxNcYbOd2O7xXS2nnKMEMABF
 github.com/bugsnag/panicwrap v1.2.0/go.mod h1:D/8v3kj0zr8ZAKg1AQ6crr+5VwKN5eIywRkfhyM/+dE=
 github.com/caddyserver/caddy v1.0.3/go.mod h1:G+ouvOY32gENkJC+jhgl62TyhvqEsFaDiZ4uw0RzP1E=
 github.com/cenkalti/backoff v2.1.1+incompatible/go.mod h1:90ReRw6GdpyfrHakVjL/QHaoyV4aDUVVkXQJJJ3NXXM=
-github.com/census-instrumentation/opencensus-proto v0.2.1 h1:glEXhBS5PSLLv4IXzLA5yPRVX4bilULVyxxbrfOtDAk=
-github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=
+github.com/census-instrumentation/opencensus-proto v0.2.0 h1:LzQXZOgg4CQfE6bFvXGM30YZL1WW/M337pXml+GrcZ4=
+github.com/census-instrumentation/opencensus-proto v0.2.0/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=
 github.com/certifi/gocertifi v0.0.0-20190105021004-abcd57078448/go.mod h1:GJKEexRPVJrBSOjoqN5VNOIKJ5Q3RViH6eu3puDRwx4=
 github.com/cespare/prettybench v0.0.0-20150116022406-03b8cfe5406c/go.mod h1:Xe6ZsFhtM8HrDku0pxJ3/Lr51rwykrzgFwpmTzleatY=
 github.com/cespare/xxhash v1.1.0 h1:a6HrQnmkObjyL+Gs60czilIUGqrzKutQD6XZog3p+ko=
 github.com/cespare/xxhash v1.1.0/go.mod h1:XrSqR1VqqWfGrhpAt58auRo0WTKS1nRRg3ghfAqPWnc=
+github.com/cespare/xxhash/v2 v2.1.0 h1:yTUvW7Vhb89inJ+8irsUqiWjh8iT6sQPZiQzI6ReGkA=
 github.com/cespare/xxhash/v2 v2.1.0/go.mod h1:dgIUBU3pDso/gPgZ1osOZ0iQf77oPR28Tjxl5dIMyVM=
 github.com/cespare/xxhash/v2 v2.1.1 h1:6MnRN8NT7+YBpUIWxHtefFZOKTAPgGjpQSxqLNn0+qY=
 github.com/cespare/xxhash/v2 v2.1.1/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
 github.com/chai2010/gettext-go v0.0.0-20160711120539-c6fed771bfd5 h1:7aWHqerlJ41y6FOsEUvknqgXnGmJyJSbjhAWq5pO4F8=
 github.com/chai2010/gettext-go v0.0.0-20160711120539-c6fed771bfd5/go.mod h1:/iP1qXHoty45bqomnu2LM+VVyAEdWN+vtSHGlQgyxbw=
-github.com/checkpoint-restore/go-criu v0.0.0-20190109184317-bdb7599cd87b/go.mod h1:TrMrLQfeENAPYPRsJuq3jsqdlRh3lvi6trTZJG8+tho=
+github.com/checkpoint-restore/go-criu v0.0.0-20181120144056-17b0214f6c48/go.mod h1:TrMrLQfeENAPYPRsJuq3jsqdlRh3lvi6trTZJG8+tho=
 github.com/cheekybits/genny v0.0.0-20170328200008-9127e812e1e9/go.mod h1:+tQajlRqAUrPI7DOSpB0XAqZYtQakVtB7wXkRAgjxjQ=
 github.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=
 github.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=
 github.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=
+github.com/cilium/ebpf v0.0.0-20191025125908-95b36a581eed/go.mod h1:MA5e5Lr8slmEg9bt0VpxxWqJlO4iwu3FBdHUzV7wQVg=
 github.com/circonus-labs/circonus-gometrics v2.3.1+incompatible/go.mod h1:nmEj6Dob7S7YxXgwXpfOuvO54S+tGdZdw9fuRZt25Ag=
 github.com/circonus-labs/circonusllhist v0.1.3/go.mod h1:kMXHVDlOchFAehlya5ePtbp5jckzBHf4XRpQvBOLI+I=
 github.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=
@@ -217,7 +250,7 @@ github.com/containerd/typeurl v0.0.0-20180627222232-a93fcdb778cd/go.mod h1:Cm3kw
 github.com/containerd/typeurl v0.0.0-20190228175220-2a93cfde8c20/go.mod h1:Cm3kwCdlkCfMSHURc+r6fwoGH6/F1hH3S4sg0rLFWPc=
 github.com/containernetworking/cni v0.7.1/go.mod h1:LGwApLUm2FpoOfxTDEeq8T9ipbpZ61X79hmU3w8FmsY=
 github.com/corbym/gocrest v1.0.3/go.mod h1:maVFL5lbdS2PgfOQgGRWDYTeunSWQeiEgoNdTABShCs=
-github.com/coredns/corefile-migration v1.0.4/go.mod h1:OFwBp/Wc9dJt5cAZzHWMNhK1r5L0p0jDwIBc6j8NC8E=
+github.com/coredns/corefile-migration v1.0.6/go.mod h1:OFwBp/Wc9dJt5cAZzHWMNhK1r5L0p0jDwIBc6j8NC8E=
 github.com/coreos/bbolt v1.3.2/go.mod h1:iRUV2dpdMOn7Bo10OQBFzIJO9kkE559Wcmn+qkEiiKk=
 github.com/coreos/etcd v3.3.10+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=
 github.com/coreos/etcd v3.3.13+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=
@@ -232,9 +265,12 @@ github.com/coreos/pkg v0.0.0-20180108230652-97fdf19511ea/go.mod h1:E3G3o1h8I7cfc
 github.com/coreos/pkg v0.0.0-20180928190104-399ea9e2e55f/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=
 github.com/cpuguy83/go-md2man v1.0.10 h1:BSKMNlYxDvnunlTymqtgONjNnaRV1sTpcovwwjF22jk=
 github.com/cpuguy83/go-md2man v1.0.10/go.mod h1:SmD6nW6nTyfqj6ABTjUi3V3JVMnlJmwcJI5acqYI6dE=
+github.com/cpuguy83/go-md2man/v2 v2.0.0 h1:EoUDS0afbrsXAZ9YQ9jdu/mZ2sXgT1/2yyNng4PGlyM=
+github.com/cpuguy83/go-md2man/v2 v2.0.0/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=
 github.com/cratonica/2goarray v0.0.0-20190331194516-514510793eaa h1:Wg+722vs7a2zQH5lR9QWYsVbplKeffaQFIs5FTdfNNo=
 github.com/cratonica/2goarray v0.0.0-20190331194516-514510793eaa/go.mod h1:6Arca19mRx58CA7OWEd7Wu1NpC1rd3uDnNs6s1pj/DI=
 github.com/creack/pty v1.1.7/go.mod h1:lj5s0c3V2DBrqTV7llrYr5NG6My20zk30Fl46Y7DoTY=
+github.com/creack/pty v1.1.9 h1:uDmaGzcdjhF4i/plgjmEsriH11Y0o7RKapEf/LDaM3w=
 github.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=
 github.com/cyphar/filepath-securejoin v0.2.2 h1:jCwT2GTP+PY5nBz3c/YL5PAIbusElVrPujOBSCj8xRg=
 github.com/cyphar/filepath-securejoin v0.2.2/go.mod h1:FpkQEhXnPnOthhzymB7CGsFk2G9VLXONKD9G7QGMM+4=
@@ -247,6 +283,7 @@ github.com/daviddengcn/go-colortext v0.0.0-20160507010035-511bcaf42ccd/go.mod h1
 github.com/deislabs/oras v0.7.0/go.mod h1:sqMKPG3tMyIX9xwXUBRLhZ24o+uT4y6jgBD2RzUTKDM=
 github.com/deislabs/oras v0.8.1 h1:If674KraJVpujYR00rzdi0QAmW4BxzMJPVAZJKuhQ0c=
 github.com/deislabs/oras v0.8.1/go.mod h1:Mx0rMSbBNaNfY9hjpccEnxkOqJL6KGjtxNHPLC4G4As=
+github.com/denisenkom/go-mssqldb v0.0.0-20191001013358-cfbb681360f0/go.mod h1:xbL0rPBG9cCiLr28tMa8zpbdarY27NDyej4t/EjAShU=
 github.com/denverdino/aliyungo v0.0.0-20190125010748-a747050bb1ba/go.mod h1:dV8lFg6daOBZbT6/BDGIz6Y3WFGn8juu6G+CQ6LHtl0=
 github.com/dgrijalva/jwt-go v0.0.0-20170104182250-a601269ab70c/go.mod h1:E3ru+11k8xSBh+hMPgOLZmtrrCbhqsmaPHjLKYnJCaQ=
 github.com/dgrijalva/jwt-go v3.2.0+incompatible h1:7qlOGliEKZXTDg6OTjfoBKDXWrumCAMpl/TFQ4/5kLM=
@@ -274,7 +311,6 @@ github.com/docker/go-metrics v0.0.1/go.mod h1:cG1hvH2utMXtqgqqYE9plW6lDxS3/5ayHz
 github.com/docker/go-units v0.3.3/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=
 github.com/docker/go-units v0.4.0 h1:3uh0PgVws3nIA0Q+MwDC8yjEPf9zjRfZZWXZYDct3Tw=
 github.com/docker/go-units v0.4.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=
-github.com/docker/libnetwork v0.8.0-dev.2.0.20190624125649-f0e46a78ea34/go.mod h1:93m0aTqz6z+g32wla4l4WxTrdtvBRmVzYRkYvasA5Z8=
 github.com/docker/libtrust v0.0.0-20150114040149-fa567046d9b1/go.mod h1:cyGadeNEkKy96OOhEzfZl+yxihPEzKnqJwvfuSUqbZE=
 github.com/docker/libtrust v0.0.0-20160708172513-aabc10ec26b7 h1:UhxFibDNY/bfvqU5CAUmr9zpesgbU6SWc8/B4mflAE4=
 github.com/docker/libtrust v0.0.0-20160708172513-aabc10ec26b7/go.mod h1:cyGadeNEkKy96OOhEzfZl+yxihPEzKnqJwvfuSUqbZE=
@@ -284,7 +320,8 @@ github.com/docker/spdystream v0.0.0-20181023171402-6480d4af844c/go.mod h1:Qh8CwZ
 github.com/docopt/docopt-go v0.0.0-20180111231733-ee0de3bc6815/go.mod h1:WwZ+bS3ebgob9U8Nd0kOddGdZWjyMGR8Wziv+TBNwSE=
 github.com/dustin/go-humanize v0.0.0-20171111073723-bb3d318650d4/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=
 github.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=
-github.com/elazarl/goproxy v0.0.0-20170405201442-c4fc26588b6e/go.mod h1:/Zj4wYkgs4iZTTu3o/KG3Itv/qCCa8VVMlb3i9OVuzc=
+github.com/elazarl/goproxy v0.0.0-20180725130230-947c36da3153 h1:yUdfgN0XgIJw7foRItutHYUIhlcKzcSf5vDpdhQAKTc=
+github.com/elazarl/goproxy v0.0.0-20180725130230-947c36da3153/go.mod h1:/Zj4wYkgs4iZTTu3o/KG3Itv/qCCa8VVMlb3i9OVuzc=
 github.com/elazarl/goproxy v0.0.0-20190711103511-473e67f1d7d2 h1:aZtFdDNWY/yH86JPR2WX/PN63635VsE/f/nXNPAbYxY=
 github.com/elazarl/goproxy v0.0.0-20190711103511-473e67f1d7d2/go.mod h1:/Zj4wYkgs4iZTTu3o/KG3Itv/qCCa8VVMlb3i9OVuzc=
 github.com/elazarl/goproxy/ext v0.0.0-20190711103511-473e67f1d7d2 h1:dWB6v3RcOy03t/bUadywsbyrQwCqZeNIEX6M1OtSZOM=
@@ -298,6 +335,7 @@ github.com/emirpasic/gods v1.9.0 h1:rUF4PuzEjMChMiNsVjdI+SyLu7rEqpQ5reNFnhC7oFo=
 github.com/emirpasic/gods v1.9.0/go.mod h1:YfzfFFoVP/catgzJb4IKIqXjX78Ha8FMSDh3ymbK86o=
 github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
 github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
+github.com/envoyproxy/go-control-plane v0.9.1 h1:+8frETDtT11P1dMCWySse/d0jMPOKYYF7OZjl7cZLvQ=
 github.com/envoyproxy/go-control-plane v0.9.1/go.mod h1:G1fbsNGAFpC1aaERrShZQVdUV2ZuZuv6FCl2v9JNSxQ=
 github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=
 github.com/envoyproxy/go-control-plane v0.9.6-0.20200529035633-fc42e08917e9 h1:AM3AYZI9udpliFfjJTM4E2G9pR+HS5ilXrJGJTvWTJM=
@@ -347,6 +385,8 @@ github.com/go-asn1-ber/asn1-ber v1.3.1/go.mod h1:hEBeB/ic+5LoWskz+yKT7vGhhPYkPro
 github.com/go-bindata/go-bindata v3.1.1+incompatible/go.mod h1:xK8Dsgwmeed+BBsSy2XTopBn/8uK2HWuGSnA11C3Joo=
 github.com/go-gl/glfw v0.0.0-20190409004039-e6da0acd62b1/go.mod h1:vR7hzQXu2zJy9AVAgeJqvqgH9Q5CA+iKCZ2gyEVpxRU=
 github.com/go-gl/glfw/v3.3/glfw v0.0.0-20191125211704-12ad95a8df72/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=
+github.com/go-gl/glfw/v3.3/glfw v0.0.0-20200222043503-6f7a984d4dc4/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=
+github.com/go-ini/ini v1.25.4 h1:Mujh4R/dH6YL8bxuISne3xX2+qcQ9p0IxKAP6ExWoUo=
 github.com/go-ini/ini v1.25.4/go.mod h1:ByCAeIL28uOIIG0E3PJtZPDL8WnHpFKFOtgjp+3Ies8=
 github.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=
 github.com/go-kit/kit v0.9.0 h1:wDJmvq38kDhkVxi50ni9ykkdUr1PKgqKOoi01fa0Mdk=
@@ -406,6 +446,8 @@ github.com/go-openapi/spec v0.19.2/go.mod h1:sCxk3jxKgioEJikev4fgkNmwS+3kuYdJtcs
 github.com/go-openapi/spec v0.19.3/go.mod h1:FpwSN1ksY1eteniUU7X0N/BgJ7a4WvBFVA8Lj9mJglo=
 github.com/go-openapi/spec v0.19.4 h1:ixzUSnHTd6hCemgtAJgluaTSGYpLNpJY4mA2DIkdOAo=
 github.com/go-openapi/spec v0.19.4/go.mod h1:FpwSN1ksY1eteniUU7X0N/BgJ7a4WvBFVA8Lj9mJglo=
+github.com/go-openapi/spec v0.19.6 h1:rMMMj8cV38KVXK7SFc+I2MWClbEfbK705+j+dyqun5g=
+github.com/go-openapi/spec v0.19.6/go.mod h1:Hm2Jr4jv8G1ciIAo+frC/Ft+rR2kQDh8JHKHb3gWUSk=
 github.com/go-openapi/strfmt v0.17.0/go.mod h1:P82hnJI0CXkErkXi8IKjPbNBM6lV6+5pLP5l494TcyU=
 github.com/go-openapi/strfmt v0.18.0/go.mod h1:P82hnJI0CXkErkXi8IKjPbNBM6lV6+5pLP5l494TcyU=
 github.com/go-openapi/strfmt v0.19.0/go.mod h1:+uW+93UVvGGq2qGaZxdDeJqSAqBqBdl+ZPMF/cC8nDY=
@@ -419,12 +461,16 @@ github.com/go-openapi/swag v0.18.0/go.mod h1:AByQ+nYG6gQg71GINrmuDXCPWdL640yX49/
 github.com/go-openapi/swag v0.19.2/go.mod h1:POnQmlKehdgb5mhVOsnJFsivZCEZ/vjK9gh66Z9tfKk=
 github.com/go-openapi/swag v0.19.5 h1:lTz6Ys4CmqqCQmZPBlbQENR1/GucA2bzYTE12Pw4tFY=
 github.com/go-openapi/swag v0.19.5/go.mod h1:POnQmlKehdgb5mhVOsnJFsivZCEZ/vjK9gh66Z9tfKk=
+github.com/go-openapi/swag v0.19.7 h1:VRuXN2EnMSsZdauzdss6JBC29YotDqG59BZ+tdlIL1s=
+github.com/go-openapi/swag v0.19.7/go.mod h1:ao+8BpOPyKdpQz3AOJfbeEVpLmWAvlT1IfTe5McPyhY=
 github.com/go-openapi/validate v0.18.0/go.mod h1:Uh4HdOzKt19xGIGm1qHf/ofbX1YQ4Y+MYsct2VUrAJ4=
 github.com/go-openapi/validate v0.19.2/go.mod h1:1tRCw7m3jtI8eNWEEliiAqUIcBztB2KDnRCRMUi7GTA=
 github.com/go-openapi/validate v0.19.3/go.mod h1:90Vh6jjkTn+OT1Eefm0ZixWNFjhtOH7vS9k0lo6zwJo=
 github.com/go-openapi/validate v0.19.5 h1:QhCBKRYqZR+SKo4gl1lPhPahope8/RLt6EVgY8X80w0=
 github.com/go-openapi/validate v0.19.5/go.mod h1:8DJv2CVJQ6kGNpFW6eV9N3JviE1C85nY1c2z52x1Gk4=
 github.com/go-ozzo/ozzo-validation v3.5.0+incompatible/go.mod h1:gsEKFIVnabGBt6mXmxK0MoFy+cZoTJY6mu5Ll3LVLBU=
+github.com/go-sql-driver/mysql v1.4.0/go.mod h1:zAC/RDZ24gD3HViQzih4MyKcchzm+sOG5ZlKdlhCg5w=
+github.com/go-sql-driver/mysql v1.4.1/go.mod h1:zAC/RDZ24gD3HViQzih4MyKcchzm+sOG5ZlKdlhCg5w=
 github.com/go-sql-driver/mysql v1.5.0 h1:ozyZYNQW3x3HtqT1jira07DN2PArx2v7/mN66gGcHOs=
 github.com/go-sql-driver/mysql v1.5.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=
 github.com/go-stack/stack v1.8.0 h1:5SgMzNM5HxrEjV0ww2lTmX6E2Izsfxas4+YHWRs3Lsk=
@@ -436,14 +482,19 @@ github.com/go-test/deep v1.0.2-0.20181118220953-042da051cf31/go.mod h1:wGDj63lr6
 github.com/go-test/deep v1.0.2 h1:onZX1rnHT3Wv6cqNgYyFOOlgVKJrksuCMCRvJStbMYw=
 github.com/go-test/deep v1.0.2/go.mod h1:wGDj63lr65AM2AQyKZd/NYHGb0R+1RLqB8NKt3aSFNA=
 github.com/gobuffalo/envy v1.7.0/go.mod h1:n7DRkBerg/aorDM8kbduw5dN3oXGswK5liaSCx4T5NI=
+github.com/gobuffalo/envy v1.7.1/go.mod h1:FurDp9+EDPE4aIUS3ZLyD+7/9fpx7YRt/ukY6jIHf0w=
 github.com/gobuffalo/envy v1.8.1 h1:RUr68liRvs0TS1D5qdW3mQv2SjAsu1QWMCx1tG4kDjs=
 github.com/gobuffalo/envy v1.8.1/go.mod h1:FurDp9+EDPE4aIUS3ZLyD+7/9fpx7YRt/ukY6jIHf0w=
 github.com/gobuffalo/logger v1.0.0/go.mod h1:2zbswyIUa45I+c+FLXuWl9zSWEiVuthsk8ze5s8JvPs=
+github.com/gobuffalo/logger v1.0.1 h1:ZEgyRGgAm4ZAhAO45YXMs5Fp+bzGLESFewzAVBMKuTg=
+github.com/gobuffalo/logger v1.0.1/go.mod h1:2zbswyIUa45I+c+FLXuWl9zSWEiVuthsk8ze5s8JvPs=
 github.com/gobuffalo/packd v0.3.0 h1:eMwymTkA1uXsqxS0Tpoop3Lc0u3kTfiMBE6nKtQU4g4=
 github.com/gobuffalo/packd v0.3.0/go.mod h1:zC7QkmNkYVGKPw4tHpBQ+ml7W/3tIebgeo1b36chA3Q=
 github.com/gobuffalo/packr v1.30.1 h1:hu1fuVR3fXEZR7rXNW3h8rqSML8EVAf6KNm0NKO/wKg=
 github.com/gobuffalo/packr v1.30.1/go.mod h1:ljMyFO2EcrnzsHsN99cvbq055Y9OhRrIaviy289eRuk=
 github.com/gobuffalo/packr/v2 v2.5.1/go.mod h1:8f9c96ITobJlPzI44jj+4tHnEKNt0xXWSVlXRN9X1Iw=
+github.com/gobuffalo/packr/v2 v2.7.1 h1:n3CIW5T17T8v4GGK5sWXLVWJhCz7b5aNLSxW6gYim4o=
+github.com/gobuffalo/packr/v2 v2.7.1/go.mod h1:qYEvAazPaVxy7Y7KR0W8qYEE+RymX74kETFqjFoFlOc=
 github.com/gobwas/glob v0.2.3 h1:A4xDbljILXROh+kObIiy5kIaPYD8e96x1tgBhUI5J+Y=
 github.com/gobwas/glob v0.2.3/go.mod h1:d3Ez4x06l9bZtSvzIay5+Yzi0fmZzPgnTbPcKjJAkT8=
 github.com/godbus/dbus v0.0.0-20181101234600-2ff6f7ffd60f/go.mod h1:/YcGZj5zSblfDWMMoOzV4fas9FZnQYTkDnsGvmh2Grw=
@@ -457,11 +508,12 @@ github.com/gogo/googleapis v1.3.1/go.mod h1:d+q1s/xVJxZGKWwC/6UfPIF33J+G1Tq4GYv9
 github.com/gogo/protobuf v1.0.0/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=
 github.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=
 github.com/gogo/protobuf v1.2.1/go.mod h1:hp+jE20tsWTFYpLwKvXlhS1hjn+gTNwPg2I6zVXpSg4=
-github.com/gogo/protobuf v1.2.2-0.20190723190241-65acae22fc9d/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=
 github.com/gogo/protobuf v1.3.0/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=
 github.com/gogo/protobuf v1.3.1 h1:DqDEcV5aeaTmdFBePNpYsp3FlcVH/2ISVVM9Qf8PSls=
 github.com/gogo/protobuf v1.3.1/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=
+github.com/golang-sql/civil v0.0.0-20190719163853-cb61b32ac6fe/go.mod h1:8vg3r2VgvsThLBIFL93Qb5yWzgyZWhEmBwUJWevAkK0=
 github.com/golang/freetype v0.0.0-20170609003504-e2365dfdc4a0/go.mod h1:E/TSTwGwJL78qG/PmXZO1EjYhfJinVAhrmmHX6Z8B9k=
+github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b h1:VKtxabqXZkF25pY9ekfRL6a582T4P37/31XEstQ5p58=
 github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
 github.com/golang/groupcache v0.0.0-20160516000752-02826c3e7903/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
 github.com/golang/groupcache v0.0.0-20180513044358-24b0969c4cb7/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
@@ -472,8 +524,15 @@ github.com/golang/groupcache v0.0.0-20191027212112-611e8accdfc9/go.mod h1:cIg4er
 github.com/golang/groupcache v0.0.0-20191227052852-215e87163ea7/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
 github.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e h1:1r7pUrabqp18hOBcwBwiTsbnFeTZHV9eER/QT5JVZxY=
 github.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
+github.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
+github.com/golang/mock v1.2.0/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
+github.com/golang/mock v1.3.1/go.mod h1:sBzyDLLjw3U8JLTeZvSv8jJB+tU5PVekmnlKIyFUx0Y=
+github.com/golang/mock v1.4.0/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=
 github.com/golang/mock v1.4.3 h1:GV+pQPG/EUUbkh47niozDcADz6go/dUwhVzdUQHIVRw=
 github.com/golang/mock v1.4.3/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=
+github.com/golang/mock v1.4.4-0.20200406172829-6d816de489c1/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=
+github.com/golang/mock v1.4.4 h1:l75CXGRSwbaYNpl/Z2X1XIIAMSCquvXgpVZDhwEIJsc=
+github.com/golang/mock v1.4.4/go.mod h1:l3mdAwkq5BuhzHwde/uurv3sEJeZMXNpwsxVWU71h+4=
 github.com/golang/protobuf v1.3.5 h1:F768QJ1E9tib+q5Sc8MkdJi1RxLTbRcTf8LJV56aRls=
 github.com/golang/protobuf v1.3.5/go.mod h1:6O5/vntMXwX2lRkT1hjjk0nAC1IDOTvTlVgjlRvqsdk=
 github.com/golang/snappy v0.0.1 h1:Qgr9rKW7uDUkrbSmQeiDsGa8SjGyCOGtuasMWwvp2P4=
@@ -510,13 +569,21 @@ github.com/google/gofuzz v0.0.0-20161122191042-44d81051d367/go.mod h1:HP5RmnzzSN
 github.com/google/gofuzz v0.0.0-20170612174753-24818f796faf/go.mod h1:HP5RmnzzSNb993RKQDq4+1A4ia9nllfqcQFTQJedwGI=
 github.com/google/gofuzz v1.0.0 h1:A8PeW59pxE9IoFRqBp37U+mSNaQoZ46F1f0f863XSXw=
 github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
+github.com/google/gofuzz v1.1.0 h1:Hsa8mG0dQ46ij8Sl2AYJDUv1oA9/d6Vk+3LG99Oe02g=
+github.com/google/gofuzz v1.1.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
 github.com/google/martian v2.1.0+incompatible h1:/CP5g8u/VJHijgedC/Legn3BAbAaWPgecwXBIDzw5no=
 github.com/google/martian v2.1.0+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=
+github.com/google/pprof v0.0.0-20181206194817-3ea8567a2e57/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=
+github.com/google/pprof v0.0.0-20190515194954-54271f7e092f/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=
 github.com/google/pprof v0.0.0-20191218002539-d4f498aebedc/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=
+github.com/google/pprof v0.0.0-20200212024743-f11f1df84d12/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=
+github.com/google/pprof v0.0.0-20200430221834-fc25d7d30c6d/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=
 github.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=
 github.com/google/uuid v1.0.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
 github.com/google/uuid v1.1.1 h1:Gkbcsh/GbpXz7lPftLA3P6TYMwjCLYm83jiFQZF/3gY=
 github.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
+github.com/googleapis/gax-go/v2 v2.0.4 h1:hU4mGcQI4DaAYW+IbTun+2qEZVFxK0ySjQLTbS0VQKc=
+github.com/googleapis/gax-go/v2 v2.0.4/go.mod h1:0Wqv26UfaUD9n4G6kQubkQ+KchISgw+vpHVxEJEs9eg=
 github.com/googleapis/gax-go/v2 v2.0.5 h1:sjZBwGj9Jlw33ImPtvFviGYvseOtDM7hkSKB7+Tv3SM=
 github.com/googleapis/gax-go/v2 v2.0.5/go.mod h1:DWXyrwAJ9X0FpwwEdw+IPEYBICEFu5mhpdKc/us6bOk=
 github.com/googleapis/gnostic v0.0.0-20170729233727-0c5108395e2d/go.mod h1:sJBsCZ4ayReDTBIg8b9dl28c5xFWyhBTVRp3pOg5EKY=
@@ -526,6 +593,7 @@ github.com/googleapis/gnostic v0.3.1 h1:WeAefnSUHlBb0iJKwxFDZdbfGwkd7xRNuV+IpXMJ
 github.com/googleapis/gnostic v0.3.1/go.mod h1:on+2t9HRStVgn95RSsFWFz+6Q0Snyqv1awfrALZdbtU=
 github.com/goph/emperror v0.17.1 h1:6lOybhIvG/BB6VGoWfdv30FVZeZFBBZ9VvgzGXLVkyY=
 github.com/goph/emperror v0.17.1/go.mod h1:+ZbQ+fUNO/6FNiUo0ujtMjhgad9Xa6fQL9KhH4LNHic=
+github.com/gophercloud/gophercloud v0.1.0 h1:P/nh25+rzXouhytV2pUHBb65fnds26Ghl8/391+sT5o=
 github.com/gophercloud/gophercloud v0.1.0/go.mod h1:vxM41WHh5uqHVBMZHzuwNOHh8XEoIEcSTewFxm1c5g8=
 github.com/gophercloud/gophercloud v0.2.0 h1:lD2Bce2xBAMNNcFZ0dObTpXkGLlVIb33RPVUNVpw6ic=
 github.com/gophercloud/gophercloud v0.2.0/go.mod h1:vxM41WHh5uqHVBMZHzuwNOHh8XEoIEcSTewFxm1c5g8=
@@ -537,9 +605,12 @@ github.com/gorilla/handlers v1.4.0/go.mod h1:Qkdc/uu4tH4g6mTK6auzZ766c4CA0Ng8+o/
 github.com/gorilla/handlers v1.4.2 h1:0QniY0USkHQ1RGCLfKxeNHK9bkDHGRYGNDFBCS+YARg=
 github.com/gorilla/handlers v1.4.2/go.mod h1:Qkdc/uu4tH4g6mTK6auzZ766c4CA0Ng8+o/OAirnOIQ=
 github.com/gorilla/mux v1.7.0/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=
+github.com/gorilla/mux v1.7.2 h1:zoNxOV7WjqXptQOVngLmcSQgXmgk4NMz1HibBchjl/I=
 github.com/gorilla/mux v1.7.2/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=
 github.com/gorilla/mux v1.7.3 h1:gnP5JzjVOuiZD07fKKToCAOjS0yOpj/qPETTXCCS6hw=
 github.com/gorilla/mux v1.7.3/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=
+github.com/gorilla/mux v1.7.4 h1:VuZ8uybHlWmqV03+zRzdwKL4tUnIp1MAQtp1mIFE1bc=
+github.com/gorilla/mux v1.7.4/go.mod h1:DVbg23sWSpFRCP0SfiEN6jmj59UnW/n46BH5rLB71So=
 github.com/gorilla/websocket v0.0.0-20170926233335-4201258b820c/go.mod h1:E7qHFY5m1UJ88s3WnNqhKjPHQ0heANvMoAMk2YaljkQ=
 github.com/gorilla/websocket v1.4.0/go.mod h1:E7qHFY5m1UJ88s3WnNqhKjPHQ0heANvMoAMk2YaljkQ=
 github.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=
@@ -555,6 +626,7 @@ github.com/grpc-ecosystem/go-grpc-middleware v1.0.1-0.20190118093823-f849b5445de
 github.com/grpc-ecosystem/go-grpc-prometheus v1.2.0/go.mod h1:8NvIoxWQoOIhqOTXgfV/d3M/q6VIi02HzZEHgUlZvzk=
 github.com/grpc-ecosystem/grpc-gateway v1.9.0/go.mod h1:vNeuVxBJEsws4ogUvrchl83t/GYV9WGTSLVdBhOQFDY=
 github.com/grpc-ecosystem/grpc-gateway v1.9.5/go.mod h1:vNeuVxBJEsws4ogUvrchl83t/GYV9WGTSLVdBhOQFDY=
+github.com/hashicorp/consul/api v1.1.0 h1:BNQPM9ytxj6jbjjdRPioQ94T6YXriSopn0i8COv6SRA=
 github.com/hashicorp/consul/api v1.1.0/go.mod h1:VmuI/Lkw1nC05EYQWNKwWGbkg+FbDBtguAZLlVdkD9Q=
 github.com/hashicorp/consul/api v1.3.0 h1:HXNYlRkkM/t+Y/Yhxtwcy02dlYwIaoxzvxPnS+cqy78=
 github.com/hashicorp/consul/api v1.3.0/go.mod h1:MmDNSzIMUjNpY/mQ398R4bk2FnqQLoPndWW5VkKPlCE=
@@ -581,6 +653,8 @@ github.com/hashicorp/go-msgpack v0.5.5/go.mod h1:ahLV/dePpqEmjfWmKiqvPkv/twdG7iP
 github.com/hashicorp/go-multierror v0.0.0-20161216184304-ed905158d874/go.mod h1:JMRHfdO9jKNzS/+BTlxCjKNQHg/jZAft8U7LloJvN7I=
 github.com/hashicorp/go-multierror v1.0.0 h1:iVjPR7a6H0tWELX5NxNe7bYopibicUzc7uPribsnS6o=
 github.com/hashicorp/go-multierror v1.0.0/go.mod h1:dHtQlpGsu+cZNNAkkCN/P3hoUDHhCYQXV3UM06sGGrk=
+github.com/hashicorp/go-multierror v1.1.0 h1:B9UzwGQJehnUY1yNrnwREHc3fGbC2xefo8g4TbElacI=
+github.com/hashicorp/go-multierror v1.1.0/go.mod h1:spPvp8C1qA32ftKqdAHm4hHTbPw+vmowP0z+KUhOZdA=
 github.com/hashicorp/go-plugin v1.0.1/go.mod h1:++UyYGoz3o5w9ZzAdZxtQKrWWP+iqPBn3cQptSMzBuY=
 github.com/hashicorp/go-retryablehttp v0.5.3/go.mod h1:9B5zBasrRhHXnJnui7y6sL7es7NDiJgTc6Er0maI1Xs=
 github.com/hashicorp/go-retryablehttp v0.6.2/go.mod h1:gEx6HMUGxYYhJScX7W1Il64m6cc2C1mDaW3NQ9sY1FY=
@@ -631,6 +705,8 @@ github.com/hpcloud/tail v1.0.0 h1:nfCOvKYfkgYP8hkirhJocXT2+zOD8yUNjXaWfTlyFKI=
 github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=
 github.com/huandu/xstrings v1.2.0 h1:yPeWdRnmynF7p+lLYz0H2tthW9lqhMJrQV/U7yy4wX0=
 github.com/huandu/xstrings v1.2.0/go.mod h1:DvyZB1rfVYsBIigL8HwpZgxHwXozlTgGqn63UyNX5k4=
+github.com/huandu/xstrings v1.3.1 h1:4jgBlKK6tLKFvO8u5pmYjG91cqytmDCDvGh7ECVFfFs=
+github.com/huandu/xstrings v1.3.1/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=
 github.com/iancoleman/strcase v0.0.0-20180726023541-3605ed457bf7/go.mod h1:SK73tn/9oHe+/Y0h39VT4UCxmurVJkR5NA7kMEAOgSE=
 github.com/iancoleman/strcase v0.0.0-20191112232945-16388991a334 h1:VHgatEHNcBFEB7inlalqfNqw65aNkM1lGX2yt3NmbS8=
 github.com/iancoleman/strcase v0.0.0-20191112232945-16388991a334/go.mod h1:SK73tn/9oHe+/Y0h39VT4UCxmurVJkR5NA7kMEAOgSE=
@@ -657,10 +733,13 @@ github.com/jhump/protoreflect v1.5.0 h1:NgpVT+dX71c8hZnxHof2M7QDK7QtohIJ7DYycjnk
 github.com/jhump/protoreflect v1.5.0/go.mod h1:eaTn3RZAmMBcV0fifFvlm6VHNz3wSkYyXYWUh7ymB74=
 github.com/jimstudt/http-authentication v0.0.0-20140401203705-3eca13d6893a/go.mod h1:wK6yTYYcgjHE1Z1QtXACPDjcFJyBskHEdagmnq3vsP8=
 github.com/jmespath/go-jmespath v0.0.0-20160202185014-0b12d6b521d8/go.mod h1:Nht3zPeWKUH0NzdCt2Blrr5ys8VGpn0CEB0cQHVjt7k=
+github.com/jmespath/go-jmespath v0.0.0-20160803190731-bd40a432e4c7 h1:SMvOWPJCES2GdFracYbBQh93GXac8fq7HeN6JnpduB8=
 github.com/jmespath/go-jmespath v0.0.0-20160803190731-bd40a432e4c7/go.mod h1:Nht3zPeWKUH0NzdCt2Blrr5ys8VGpn0CEB0cQHVjt7k=
 github.com/jmespath/go-jmespath v0.0.0-20180206201540-c2b33e8439af/go.mod h1:Nht3zPeWKUH0NzdCt2Blrr5ys8VGpn0CEB0cQHVjt7k=
 github.com/jmespath/go-jmespath v0.3.0 h1:OS12ieG61fsCg5+qLJ+SsW9NicxNkg3b25OyT2yCeUc=
 github.com/jmespath/go-jmespath v0.3.0/go.mod h1:9QtRXoHjLGCJ5IBSaohpXITPlowMeeYCZ7fLUTSywik=
+github.com/jmoiron/sqlx v1.2.0 h1:41Ip0zITnmWNR/vHV+S4m+VoUivnWY5E4OJfLZjCJMA=
+github.com/jmoiron/sqlx v1.2.0/go.mod h1:1FEQNm3xlJgrMD+FBdI9+xvCksHtbpVBBw5dYhBSsks=
 github.com/joefitzgerald/rainbow-reporter v0.1.0/go.mod h1:481CNgqmVHQZzdIbN52CupLJyoVwB10FQ/IQlF1pdL8=
 github.com/joho/godotenv v1.3.0 h1:Zjp+RcGpHhGlrMbJzXTrZZPrWj+1vfm90La1wgB6Bhc=
 github.com/joho/godotenv v1.3.0/go.mod h1:7hK45KPybAkOC6peb+G5yklZfMxEjkZhHbwpqxOKXbg=
@@ -672,8 +751,10 @@ github.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCV
 github.com/json-iterator/go v1.1.7/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
 github.com/json-iterator/go v1.1.8 h1:QiWkFLKq0T7mpzwOTu6BzNDbfTE8OLrYhVKYMLF46Ok=
 github.com/json-iterator/go v1.1.8/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
+github.com/json-iterator/go v1.1.9/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
 github.com/json-iterator/go v1.1.10 h1:Kz6Cvnvv2wGdaG/V8yMvfkmNiXq9Ya2KUv4rouJJr68=
 github.com/json-iterator/go v1.1.10/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
+github.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=
 github.com/jstemmer/go-junit-report v0.9.1 h1:6QPYqodiu3GuPL+7mfx+NwDdp2eTkp9IfEUpgAwUN0o=
 github.com/jstemmer/go-junit-report v0.9.1/go.mod h1:Brl9GWCQeLvo8nXZwPNNblvFj/XSXhF0NWZEnDohbsk=
 github.com/jtolds/gls v4.20.0+incompatible h1:xdiiI2gbIgH/gLH7ADydsJ1uDOEzR8yvV7C0MuV77Wo=
@@ -707,6 +788,7 @@ github.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxv
 github.com/konsorten/go-windows-terminal-sequences v1.0.2/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=
 github.com/konsorten/go-windows-terminal-sequences v1.0.3 h1:CE8S1cTafDpPvMhIxNJKvHsGVBgn1xWYf1NbHQhywc8=
 github.com/konsorten/go-windows-terminal-sequences v1.0.3/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=
+github.com/kr/fs v0.1.0/go.mod h1:FFnZGqtBN9Gxj7eW1uZ42v5BccTP0vu6NEaFoC2HwRg=
 github.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515 h1:T+h1c/A9Gawja4Y9mFVWj2vyii2bbUNDw3kt9VxK2EY=
 github.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=
 github.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=
@@ -719,6 +801,14 @@ github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
 github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
 github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
 github.com/kylelemons/godebug v0.0.0-20170820004349-d65d576e9348/go.mod h1:B69LEHPfb2qLo0BaaOLcbitczOKLWTsrBG9LczfCD4k=
+github.com/lann/builder v0.0.0-20180802200727-47ae307949d0 h1:SOEGU9fKiNWd/HOJuq6+3iTQz8KNCLtVX6idSoTLdUw=
+github.com/lann/builder v0.0.0-20180802200727-47ae307949d0/go.mod h1:dXGbAdH5GtBTC4WfIxhKZfyBF/HBFgRZSWwZ9g/He9o=
+github.com/lann/ps v0.0.0-20150810152359-62de8c46ede0 h1:P6pPBnrTSX3DEVR4fDembhRWSsG5rVo6hYhAB/ADZrk=
+github.com/lann/ps v0.0.0-20150810152359-62de8c46ede0/go.mod h1:vmVJ0l/dxyfGW6FmdpVm2joNMFikkuWg0EoCKLGUMNw=
+github.com/lib/pq v1.0.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=
+github.com/lib/pq v1.2.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=
+github.com/lib/pq v1.3.0 h1:/qkRGz8zljWiDcFvgpwUpwIAPu3r07TDvs3Rws+o/pU=
+github.com/lib/pq v1.3.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=
 github.com/libopenstorage/openstorage v1.0.0/go.mod h1:Sp1sIObHjat1BeXhfMqLZ14wnOzEhNx2YQedreMcUyc=
 github.com/liggitt/tabwriter v0.0.0-20181228230101-89fcab3d43de h1:9TO3cAIGXtEhnIaL+V+BEER86oLrvS+kWobKpbJuye0=
 github.com/liggitt/tabwriter v0.0.0-20181228230101-89fcab3d43de/go.mod h1:zAbeS9B/r2mtpb6U+EI2rYA5OAXxsYw6wTamcNW+zcE=
@@ -732,6 +822,9 @@ github.com/lucas-clemente/quic-go-certificates v0.0.0-20160823095156-d2f86524cce
 github.com/lyft/protoc-gen-star v0.4.10/go.mod h1:mE8fbna26u7aEA2QCVvvfBU/ZrPgocG1206xAFPcs94=
 github.com/lyft/protoc-gen-star v0.4.14 h1:HUkD4H4dYFIgu3Bns/3N6J5GmKHCEGnhYBwNu3fvXgA=
 github.com/lyft/protoc-gen-star v0.4.14/go.mod h1:mE8fbna26u7aEA2QCVvvfBU/ZrPgocG1206xAFPcs94=
+github.com/lyft/protoc-gen-star v0.5.1 h1:sImehRT+p7lW9n6R7MQc5hVgzWGEkDVZU4AsBQ4Isu8=
+github.com/lyft/protoc-gen-star v0.5.1/go.mod h1:9toiA3cC7z5uVbODF7kEQ91Xn7XNFkVUl+SrEe+ZORU=
+github.com/magiconair/properties v1.8.0 h1:LLgXmsheXeRoUOBOjtwPQCWIYqM/LU1ayDtDePerRcY=
 github.com/magiconair/properties v1.8.0/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=
 github.com/magiconair/properties v1.8.1 h1:ZC2Vc7/ZFkGmsVC9KvOjumD+G5lXy2RtTKyzRKO2BQ4=
 github.com/magiconair/properties v1.8.1/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=
@@ -748,23 +841,31 @@ github.com/marten-seemann/qtls v0.2.3/go.mod h1:xzjG7avBwGGbdZ8dTGxlBnLArsVKLvwm
 github.com/mattbaird/jsonpatch v0.0.0-20200820163806-098863c1fc24 h1:uYuGXJBAi1umT+ZS4oQJUgKtfXCAYTR+n9zw1ViT0vA=
 github.com/mattbaird/jsonpatch v0.0.0-20200820163806-098863c1fc24/go.mod h1:M1qoD/MqPgTZIk0EWKB38wE28ACRfVcn+cU08jyArI0=
 github.com/mattn/go-colorable v0.0.9/go.mod h1:9vuHe8Xs5qXnSaW/c/ABM9alt+Vo+STaOChaDxuIBZU=
+github.com/mattn/go-colorable v0.1.4 h1:snbPLB8fVfU9iwbbo30TPtbLRzwWu6aJS6Xh4eaaviA=
 github.com/mattn/go-colorable v0.1.4/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=
 github.com/mattn/go-colorable v0.1.7 h1:bQGKb3vps/j0E9GfJQ03JyhRuxsvdAanXlT9BTw3mdw=
 github.com/mattn/go-colorable v0.1.7/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=
 github.com/mattn/go-isatty v0.0.3/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=
 github.com/mattn/go-isatty v0.0.4/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=
 github.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=
+github.com/mattn/go-isatty v0.0.10 h1:qxFzApOv4WsAL965uUPIsXzAKCZxN2p9UqdhFS4ZW10=
 github.com/mattn/go-isatty v0.0.10/go.mod h1:qgIWMr58cqv1PHHyhnkY9lrL7etaEgOFcMEpPG5Rm84=
 github.com/mattn/go-isatty v0.0.12 h1:wuysRhFDzyxgEmMf5xjvJ2M9dZoWAXNNr5LSBS7uHXY=
 github.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=
 github.com/mattn/go-runewidth v0.0.2/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzpuz5H//U1FU=
+github.com/mattn/go-runewidth v0.0.4 h1:2BvfKmzob6Bmd4YsL0zygOqfdFnK7GR4QL06Do4/p7Y=
 github.com/mattn/go-runewidth v0.0.4/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzpuz5H//U1FU=
 github.com/mattn/go-runewidth v0.0.7 h1:Ei8KR0497xHyKJPAv59M1dkC+rOZCMBJ+t3fZ+twI54=
 github.com/mattn/go-runewidth v0.0.7/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=
 github.com/mattn/go-shellwords v1.0.5/go.mod h1:3xCvwCdWdlDJUrvuMn7Wuy9eWs4pE8vqg+NOMyg4B2o=
-github.com/mattn/go-shellwords v1.0.9/go.mod h1:EZzvwXDESEeg03EKmM+RmDnNOPKG4lLtQsUlTZDWQ8Y=
+github.com/mattn/go-shellwords v1.0.10/go.mod h1:EZzvwXDESEeg03EKmM+RmDnNOPKG4lLtQsUlTZDWQ8Y=
+github.com/mattn/go-sqlite3 v1.9.0/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=
+github.com/mattn/go-sqlite3 v1.12.0 h1:u/x3mp++qUxvYfulZ4HKOvVO0JWhk7HtE8lWhbGz/Do=
+github.com/mattn/go-sqlite3 v1.12.0/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=
 github.com/mattn/go-zglob v0.0.1 h1:xsEx/XUoVlI6yXjqBK062zYhRTZltCNmYPx6v+8DNaY=
 github.com/mattn/go-zglob v0.0.1/go.mod h1:9fxibJccNxU2cnpIKLRRFA7zX7qhkJIQWBb449FYHOo=
+github.com/mattn/go-zglob v0.0.3 h1:6Ry4EYsScDyt5di4OI6xw1bYhOqfE5S33Z1OPy+d+To=
+github.com/mattn/go-zglob v0.0.3/go.mod h1:9fxibJccNxU2cnpIKLRRFA7zX7qhkJIQWBb449FYHOo=
 github.com/matttproud/golang_protobuf_extensions v1.0.1 h1:4hp9jkHxhMHkqkrB3Ix0jegS5sx/RkqARlsWZ6pIwiU=
 github.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=
 github.com/maxbrunsfeld/counterfeiter/v6 v6.2.2/go.mod h1:eD9eIE7cdwcMi9rYluz88Jz2VyhSmden33/aXg4oVIY=
@@ -799,6 +900,7 @@ github.com/mitchellh/mapstructure v0.0.0-20160808181253-ca63d7c062ee/go.mod h1:F
 github.com/mitchellh/mapstructure v1.1.2 h1:fmNYVwqnSfB9mZU6OS2O6GsXM+wcskZDuKQzvN1EDeE=
 github.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=
 github.com/mitchellh/osext v0.0.0-20151018003038-5e2d6d41470f/go.mod h1:OkQIRizQZAeMln+1tSwduZz7+Af5oFlKirV/MSYes2A=
+github.com/mitchellh/reflectwalk v1.0.0 h1:9D+8oIskB4VJBN5SFlmc27fSlIBZaov1Wpk/IfikLNY=
 github.com/mitchellh/reflectwalk v1.0.0/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=
 github.com/mitchellh/reflectwalk v1.0.1 h1:FVzMWA5RllMAKIdUSC8mdWo3XtwoecrH79BY70sEEpE=
 github.com/mitchellh/reflectwalk v1.0.1/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=
@@ -834,6 +936,9 @@ github.com/oklog/run v1.0.0/go.mod h1:dlhp/R75TPv97u0XWUtDeV/lRKWPKSdTuV0TZvrmrQ
 github.com/oklog/ulid v1.3.1 h1:EGfNDEx6MqHz8B3uNV6QAib1UR2Lm97sHi3ocA6ESJ4=
 github.com/oklog/ulid v1.3.1/go.mod h1:CirwcVhetQ6Lv90oh/F+FBtV6XMibvdAFo93nm5qn4U=
 github.com/olekukonko/tablewriter v0.0.0-20170122224234-a0225b3f23b5/go.mod h1:vsDQFd/mU46D+Z4whnwzcISnGGzXWMclvtLoiIKAKIo=
+github.com/olekukonko/tablewriter v0.0.1/go.mod h1:vsDQFd/mU46D+Z4whnwzcISnGGzXWMclvtLoiIKAKIo=
+github.com/olekukonko/tablewriter v0.0.2 h1:sq53g+DWf0J6/ceFUHpQ0nAEb6WgM++fq16MZ91cS6o=
+github.com/olekukonko/tablewriter v0.0.2/go.mod h1:rSAaSIOAGT9odnlyGlUfAJaoc5w2fSBUmeGDbRWPxyQ=
 github.com/olekukonko/tablewriter v0.0.4 h1:vHD/YYe1Wolo78koG299f7V/VAS08c6IpCLn+Ejf/w8=
 github.com/olekukonko/tablewriter v0.0.4/go.mod h1:zq6QwlOf5SlnkVbMSr5EoBv3636FWnp+qbPhuoO21uA=
 github.com/onsi/ginkgo v0.0.0-20170829012221-11459a886d9c/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=
@@ -868,6 +973,7 @@ github.com/opencontainers/image-spec v1.0.1 h1:JMemWkRwHx4Zj+fVxWoMCFm/8sYGGrUVo
 github.com/opencontainers/image-spec v1.0.1/go.mod h1:BtxoFyWECRxE4U/7sNtV5W15zMzWCbyJoFRP3s7yZA0=
 github.com/opencontainers/runc v0.0.0-20190115041553-12f6a991201f/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=
 github.com/opencontainers/runc v0.1.1/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=
+github.com/opencontainers/runc v1.0.0-rc10/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=
 github.com/opencontainers/runc v1.0.0-rc9 h1:/k06BMULKF5hidyoZymkoDCzdJzltZpz/UU4LguQVtc=
 github.com/opencontainers/runc v1.0.0-rc9/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=
 github.com/opencontainers/runtime-spec v0.1.2-0.20190507144316-5b71a03e2700/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=
@@ -885,6 +991,7 @@ github.com/pborman/uuid v1.2.0 h1:J7Q5mO4ysT1dv8hyrUGHb9+ooztCXu1D8MY8DZYsu3g=
 github.com/pborman/uuid v1.2.0/go.mod h1:X/NO0urCmaxf9VXbdlT7C2Yzkj2IKimNn4k+gtPdI/k=
 github.com/pelletier/go-buffruneio v0.2.0 h1:U4t4R6YkofJ5xHm3dJzuRpPZ0mr5MMCoAWooScCR7aA=
 github.com/pelletier/go-buffruneio v0.2.0/go.mod h1:JkE26KsDizTr40EUHkXVtNPvgGtbSNq5BcowyYOWdKo=
+github.com/pelletier/go-toml v1.2.0 h1:T5zMGML61Wp+FlcbWjRDT7yAxhJNAiPPLOFECq181zc=
 github.com/pelletier/go-toml v1.2.0/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=
 github.com/pelletier/go-toml v1.4.0 h1:u3Z1r+oOXJIkxqw34zVhyPgjBsm6X2wn21NWs/HfSeg=
 github.com/pelletier/go-toml v1.4.0/go.mod h1:PN7xzY2wHTK0K9p34ErDQMlFxa51Fk0OUruD3k1mMwo=
@@ -903,6 +1010,7 @@ github.com/pkg/errors v0.8.1-0.20171018195549-f15c970de5b7/go.mod h1:bwawxfHBFNV
 github.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=
 github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
+github.com/pkg/sftp v1.10.1/go.mod h1:lYOWFsE0bwd1+KfKJaKeuokY15vzFx25BLbzYYoAxZI=
 github.com/pmezard/go-difflib v0.0.0-20151028094244-d8ed2627bdf0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
 github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
@@ -918,11 +1026,15 @@ github.com/prometheus/client_golang v1.0.0/go.mod h1:db9x61etRT2tGnBNRi70OPL5Fsn
 github.com/prometheus/client_golang v1.1.0/go.mod h1:I1FGZT9+L76gKKOs5djB6ezCbFQP1xR9D75/vuwEF3g=
 github.com/prometheus/client_golang v1.2.1 h1:JnMpQc6ppsNgw9QPAGF6Dod479itz7lvlsMzzNayLOI=
 github.com/prometheus/client_golang v1.2.1/go.mod h1:XMU6Z2MjaRKVu/dC1qupJI9SiNkDYzz3xecMgSW/F+U=
+github.com/prometheus/client_golang v1.6.0 h1:YVPodQOcK15POxhgARIvnDRVpLcuK8mglnMrWfyrw6A=
+github.com/prometheus/client_golang v1.6.0/go.mod h1:ZLOG9ck3JLRdB5MgO8f+lLTe83AXG6ro35rLTxvnIl4=
 github.com/prometheus/client_model v0.0.0-20171117100541-99fa1f4be8e5/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=
 github.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=
 github.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
 github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4 h1:gQz4mCbXsO+nc9n1hCxHcGA3Zx3Eo+UHZoInFGUIXNM=
 github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
+github.com/prometheus/client_model v0.2.0 h1:uq5h0d+GuxiXLJLNABMgp2qUWDPiLvgCzz2dUR+/W/M=
+github.com/prometheus/client_model v0.2.0/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
 github.com/prometheus/common v0.0.0-20180110214958-89604d197083/go.mod h1:daVV7qP5qjZbuso7PdcryaAu0sAZbrN9i7WWcTMWvro=
 github.com/prometheus/common v0.0.0-20181113130724-41aa239b4cce/go.mod h1:daVV7qP5qjZbuso7PdcryaAu0sAZbrN9i7WWcTMWvro=
 github.com/prometheus/common v0.0.0-20181126121408-4724e9255275/go.mod h1:daVV7qP5qjZbuso7PdcryaAu0sAZbrN9i7WWcTMWvro=
@@ -932,6 +1044,8 @@ github.com/prometheus/common v0.4.1/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y8
 github.com/prometheus/common v0.6.0/go.mod h1:eBmuwkDJBwy6iBfxCBob6t6dR6ENT/y+J+Zk0j9GMYc=
 github.com/prometheus/common v0.7.0 h1:L+1lyG48J1zAQXA3RBX/nG/B3gjlHq0zTt2tlbJLyCY=
 github.com/prometheus/common v0.7.0/go.mod h1:DjGbpBbp5NYNiECxcL/VnbXCCaQpKd3tt26CguLLsqA=
+github.com/prometheus/common v0.9.1 h1:KOMtN28tlbam3/7ZKEYKHhKoJZYYj3gMH4uc62x7X7U=
+github.com/prometheus/common v0.9.1/go.mod h1:yhUN8i9wzaXS3w1O07YhxHEBxD+W35wd8bs7vj7HSQ4=
 github.com/prometheus/procfs v0.0.0-20180125133057-cb4147076ac7/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=
 github.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=
 github.com/prometheus/procfs v0.0.0-20181204211112-1dc9a6cbc91a/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=
@@ -961,6 +1075,7 @@ github.com/rogpeppe/go-charset v0.0.0-20180617210344-2471d30d28b4/go.mod h1:qgYe
 github.com/rogpeppe/go-internal v1.1.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=
 github.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=
 github.com/rogpeppe/go-internal v1.3.2/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=
+github.com/rogpeppe/go-internal v1.4.0/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=
 github.com/rogpeppe/go-internal v1.5.2 h1:qLvObTrvO/XRCqmkKxUlOBc48bI3efyDuAZe25QiF0w=
 github.com/rogpeppe/go-internal v1.5.2/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=
 github.com/rollbar/rollbar-go v1.0.2/go.mod h1:AcFs5f0I+c71bpHlXNNDbOWJiKwjFDtISeXco0L5PKQ=
@@ -970,10 +1085,14 @@ github.com/rotisserie/eris v0.4.0 h1:wfZW5hp90Y386s54DoJDK2Th3ycZotiBGM7b5b5aIHI
 github.com/rotisserie/eris v0.4.0/go.mod h1:lODN/gtqebxPHRbCcWeCYOE350FC2M3V/oAPT2wKxAU=
 github.com/rs/xid v1.2.1/go.mod h1:+uKXf+4Djp6Md1KODXJxgGQPKngRmWyn10oCKFzNHOQ=
 github.com/rs/zerolog v1.14.3/go.mod h1:3WXPzbXEEliJ+a6UFE4vhIxV8qR1EML6ngzP9ug4eYg=
+github.com/rubenv/sql-migrate v0.0.0-20200212082348-64f95ea68aa3 h1:xkBtI5JktwbW/vf4vopBbhYsRFTGfQWHYXzC0/qYwxI=
+github.com/rubenv/sql-migrate v0.0.0-20200212082348-64f95ea68aa3/go.mod h1:rtQlpHw+eR6UrqaS3kX1VYeaCxzCVdimDS7g5Ln4pPc=
 github.com/rubiojr/go-vhd v0.0.0-20160810183302-0bfd3b39853c/go.mod h1:DM5xW0nvfNNm2uytzsvhI3OnX8uzaRAg8UX/CnDqbto=
 github.com/russross/blackfriday v0.0.0-20170610170232-067529f716f4/go.mod h1:JO/DiYxRf+HjHt06OyowR9PTA263kcR/rfWxYHBV53g=
 github.com/russross/blackfriday v1.5.2 h1:HyvC0ARfnZBqnXwABFeSZHpKvJHJJfPz81GNueLj0oo=
 github.com/russross/blackfriday v1.5.2/go.mod h1:JO/DiYxRf+HjHt06OyowR9PTA263kcR/rfWxYHBV53g=
+github.com/russross/blackfriday/v2 v2.0.1 h1:lPqVAte+HuHNfhJ/0LC98ESWRz8afy9tM/0RK8m9o+Q=
+github.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
 github.com/ryanuber/columnize v0.0.0-20160712163229-9b3edd62028f/go.mod h1:sm1tb6uqfes/u+d4ooFouqFdy9/2g9QGwK3SQygK0Ts=
 github.com/ryanuber/columnize v2.1.0+incompatible/go.mod h1:sm1tb6uqfes/u+d4ooFouqFdy9/2g9QGwK3SQygK0Ts=
 github.com/ryanuber/go-glob v1.0.0 h1:iQh3xXAumdQ+4Ufa5b25cRpC5TYKlno6hsv6Cb3pkBk=
@@ -985,8 +1104,12 @@ github.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529/go.mod h1:DxrIzT+xaE7yg
 github.com/seccomp/libseccomp-golang v0.9.1/go.mod h1:GbW5+tmTXfcxTToHLXlScSlAvWlF4P2Ca7zGrPiEpWo=
 github.com/sergi/go-diff v1.0.0 h1:Kpca3qRNrduNnOQeazBd0ysaKrUJiIuISHxogkT9RPQ=
 github.com/sergi/go-diff v1.0.0/go.mod h1:0CfEIISq7TuYL3j771MWULgwwjU+GofnZX9QAmXWZgo=
+github.com/sergi/go-diff v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=
+github.com/sergi/go-diff v1.1.0/go.mod h1:STckp+ISIX8hZLjrqAeVduY0gWCT9IjLuqbuNXdaHfM=
 github.com/shurcooL/githubv4 v0.0.0-20190625031733-ee671ab25ff0/go.mod h1:hAF0iLZy4td2EX+/8Tw+4nodhlMrwN3HupfaXj3zkGo=
 github.com/shurcooL/graphql v0.0.0-20181231061246-d48a9a75455f/go.mod h1:AuYgA5Kyo4c7HfUmvRGs/6rGlMMV/6B1bVnB9JxJEEg=
+github.com/shurcooL/sanitized_anchor_name v1.0.0 h1:PdmoCO6wvbs+7yrJyMORt4/BmY5IYyJwS/kOiWx8mHo=
+github.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=
 github.com/sirupsen/logrus v1.0.4-0.20170822132746-89742aefa4b2/go.mod h1:pMByvHTf9Beacp5x1UXfOR9xyW/9antXMhjMPG0dEzc=
 github.com/sirupsen/logrus v1.0.5/go.mod h1:pMByvHTf9Beacp5x1UXfOR9xyW/9antXMhjMPG0dEzc=
 github.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=
@@ -1009,32 +1132,47 @@ github.com/solo-io/go-list-licenses v0.0.0-20191023220251-171e4740d00f/go.mod h1
 github.com/solo-io/go-utils v0.13.0/go.mod h1:pA8kwWDNlJueffTcC1BYddTerO8zpUUGl5/7JGeC5iU=
 github.com/solo-io/go-utils v0.15.2/go.mod h1:pA8kwWDNlJueffTcC1BYddTerO8zpUUGl5/7JGeC5iU=
 github.com/solo-io/go-utils v0.16.4/go.mod h1:uIPAgEuwiEwpBaFv1uI7j4CUVaFYR5iHmTYuIUlLY2Q=
-github.com/solo-io/go-utils v0.16.6 h1:24bg4lC7E/hQxfb0rjOr5jjD7DRNyNgjTfGzsjiplPQ=
-github.com/solo-io/go-utils v0.16.6/go.mod h1:uIPAgEuwiEwpBaFv1uI7j4CUVaFYR5iHmTYuIUlLY2Q=
+github.com/solo-io/go-utils v0.16.5/go.mod h1:uIPAgEuwiEwpBaFv1uI7j4CUVaFYR5iHmTYuIUlLY2Q=
+github.com/solo-io/go-utils v0.17.0 h1:PNz+DgR1bwajhls/TX6JJCPMlaSAGAFwn5YZOYna63E=
+github.com/solo-io/go-utils v0.17.0/go.mod h1:mGlBcOeSttKRVf4tiq0o8Ng/SRY851W8q0BxkOwacZI=
+github.com/solo-io/protoc-gen-ext v0.0.7 h1:s9uFGtAoSsXL7vukWKPgofkxzHUeje7m6+0C3rYA2fU=
 github.com/solo-io/protoc-gen-ext v0.0.7/go.mod h1:zZIFs9Ch3EU3uQgL2ZwCHlUGAtwiz4Cbw6tBcmaNsEk=
 github.com/solo-io/protoc-gen-ext v0.0.9 h1:dU9C8nSLNkjqLXd5QGJ2dvBcrNUvNUP92qlxMfe3t7A=
 github.com/solo-io/protoc-gen-ext v0.0.9/go.mod h1:zZIFs9Ch3EU3uQgL2ZwCHlUGAtwiz4Cbw6tBcmaNsEk=
-github.com/solo-io/reporting-client v0.1.2 h1:U585Q5UlB5/UUewtgEAQz94SWuNRBxoHc4tPthhnYko=
-github.com/solo-io/reporting-client v0.1.2/go.mod h1:FmBDzwc1zEwayCCrlP+1w7NcpM0FIuvU+NSePj4wJq8=
-github.com/solo-io/skv2 v0.7.0/go.mod h1:IP3Wx1Cj6kiJpxNU/705AAIAhEHeWIAx4xxKjF6HiCU=
+github.com/solo-io/reporting-client v0.2.0 h1:v4NheU8EQL9G7kC3qrsKvC/sJzydrJyVr/sW4QN/owk=
+github.com/solo-io/reporting-client v0.2.0/go.mod h1:FmBDzwc1zEwayCCrlP+1w7NcpM0FIuvU+NSePj4wJq8=
+github.com/solo-io/skv2 v0.7.2 h1:bJquO1jf3zrMQUp5msR4vebYTJIbSWJdyj4NgLedUSc=
+github.com/solo-io/skv2 v0.7.2/go.mod h1:08Hye4vNGdG+E3BlLS+gpCDjd9fXAbQzGPCSlsWfjSQ=
 github.com/solo-io/skv2 v0.8.1 h1:M45iMM97a3z5pSRYxcw8hScmqYcP6+oFxrtjauos8Ms=
 github.com/solo-io/skv2 v0.8.1/go.mod h1:Da9SOUuIlb61Fxi3E/aFFXjxzRAAvx34qglWrNg3wEQ=
-github.com/solo-io/solo-apis v0.0.0-20200717214114-6a1daa5a5d05 h1:gEHttpunqNVh66819Dz2ogsCWWVqAtlR/Vs+9u8Po2c=
-github.com/solo-io/solo-apis v0.0.0-20200717214114-6a1daa5a5d05/go.mod h1:wiQLPmECkI/VuwhtnaDC9UwOXUiD/f6dNMbh6kQt3fI=
+github.com/solo-io/solo-apis v0.0.0-20200928150131-f12a78004f0e h1:/Memgk9bJStts2aKcmbRoH5kR0iaM8cgodjF/IjNdoM=
+github.com/solo-io/solo-apis v0.0.0-20200928150131-f12a78004f0e/go.mod h1:w1hdE+HIpvlKvSUjbaiQiqqpZneATKd/tgdAwoMDQrw=
 github.com/solo-io/solo-kit v0.13.8/go.mod h1:1cSoxO1Cgzn++03nnp5V1iGf0S45OLDTUmj70rD/+hY=
-github.com/solo-io/solo-kit v0.13.13 h1:SEge+arPMITm/S5BMFw4VsUHNma/qHAlMPIKDPl1CI4=
-github.com/solo-io/solo-kit v0.13.13/go.mod h1:1cSoxO1Cgzn++03nnp5V1iGf0S45OLDTUmj70rD/+hY=
-github.com/solo-io/wasm/tools/wasme/pkg v0.0.0-20200922223809-7fff932e9e9a h1:cGPy01C3GXZyuq8s6pkRCjBA+NkLv4FbcP0Toa/7ung=
-github.com/solo-io/wasm/tools/wasme/pkg v0.0.0-20200922223809-7fff932e9e9a/go.mod h1:3lckq1wF8I6I2a1Jx5IsEG+PQArE57Jp3wBE2rQnKmw=
+github.com/solo-io/solo-kit v0.13.9 h1:4Vmt4TPA4HTZvaARDdx26ElW5VHMlVEAB5jLgZIhyRQ=
+github.com/solo-io/solo-kit v0.13.9/go.mod h1:1cSoxO1Cgzn++03nnp5V1iGf0S45OLDTUmj70rD/+hY=
+github.com/solo-io/solo-kit v0.14.0 h1:5V5B93Vkt46KEQsco8S4GA3/U8ir2rpsPFJ2Dmk9Iwk=
+github.com/solo-io/solo-kit v0.14.0/go.mod h1:arV9Cw3lQHmW2XqXR6yHcp9CHVCUQdwTEFAnMMKbHyQ=
+github.com/solo-io/wasm/tools/wasme/pkg v0.0.0-20201021213306-77f82bdc3cc3 h1:Am1RMaWH7jOug0ys4gUeBCgwR/94NSfZqu90j9u8eTA=
+github.com/solo-io/wasm/tools/wasme/pkg v0.0.0-20201021213306-77f82bdc3cc3/go.mod h1:3lckq1wF8I6I2a1Jx5IsEG+PQArE57Jp3wBE2rQnKmw=
 github.com/spaolacci/murmur3 v0.0.0-20180118202830-f09979ecbc72 h1:qLC7fQah7D6K1B0ujays3HV9gkFtllcxhzImRR7ArPQ=
 github.com/spaolacci/murmur3 v0.0.0-20180118202830-f09979ecbc72/go.mod h1:JwIasOWyU6f++ZhiEuf87xNszmSA2myDM2Kzu9HwQUA=
 github.com/spf13/afero v1.1.2/go.mod h1:j4pytiNVoe2o6bmDsKpLACNPDBIoEAkihy7loJ1B0CQ=
 github.com/spf13/afero v1.2.2 h1:5jhuqJyZCZf2JRofRvN/nIFgIWNzPa3/Vz8mYylgbWc=
 github.com/spf13/afero v1.2.2/go.mod h1:9ZxEEn6pIJ8Rxe320qSDBk6AsU0r9pR7Q4OcevTdifk=
+github.com/spf13/afero v1.3.3/go.mod h1:5KUK8ByomD5Ti5Artl0RtHeI5pTF7MIDuXL3yY520V4=
+github.com/spf13/afero v1.3.4 h1:8q6vk3hthlpb2SouZcnBVKboxWQWMDNF38bwholZrJc=
+github.com/spf13/afero v1.3.4/go.mod h1:Ai8FlHk4v/PARR026UzYexafAt9roJ7LcLMAmO6Z93I=
 github.com/spf13/cast v1.3.0 h1:oget//CVOEoFewqQxwr0Ej5yjygnqGkvggSE/gB35Q8=
 github.com/spf13/cast v1.3.0/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=
+github.com/spf13/cast v1.3.1 h1:nFm6S0SMdyzrzcmThSipiEubIDy8WEXKNZ0UOgiRpng=
+github.com/spf13/cast v1.3.1/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=
+github.com/spf13/cobra v0.0.2-0.20171109065643-2da4a54c5cee/go.mod h1:1l0Ry5zgKvJasoi3XT1TypsSe7PqH0Sj9dhYf7v3XqQ=
+github.com/spf13/cobra v0.0.3/go.mod h1:1l0Ry5zgKvJasoi3XT1TypsSe7PqH0Sj9dhYf7v3XqQ=
 github.com/spf13/cobra v0.0.5 h1:f0B+LkLX6DtmRH1isoNA9VTtNUK9K8xYd28JNNfOv/s=
 github.com/spf13/cobra v0.0.5/go.mod h1:3K3wKZymM7VvHMDS9+Akkh4K60UwM26emMESw8tLCHU=
+github.com/spf13/cobra v1.0.0 h1:6m/oheQuQ13N9ks4hubMG6BnvwOeaJrqSPLahSnczz8=
+github.com/spf13/cobra v1.0.0/go.mod h1:/6GTrnGXV9HjY+aR4k0oJ5tcvakLuG6EuKReYlHNrgE=
+github.com/spf13/jwalterweatherman v1.0.0 h1:XHEdyB+EcvlqZamSM4ZOMGlc93t6AcsBEu9Gc1vn7yk=
 github.com/spf13/jwalterweatherman v1.0.0/go.mod h1:cQK4TGJAtQXfYWX+Ddv3mKDzgVb68N+wFjFa4jdeBTo=
 github.com/spf13/jwalterweatherman v1.1.0 h1:ue6voC5bR5F8YxI5S67j9i582FU4Qvo2bmqnqMYADFk=
 github.com/spf13/jwalterweatherman v1.1.0/go.mod h1:aNWZUN0dPAAO/Ljvb5BEdw96iTZ0EXowPYD95IqWIGo=
@@ -1045,6 +1183,7 @@ github.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnIn
 github.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=
 github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
 github.com/spf13/viper v1.3.2/go.mod h1:ZiWeW+zYFKm7srdB9IoDzzZXaJaI5eL9QjNiN/DMA2s=
+github.com/spf13/viper v1.4.0 h1:yXHLWeravcrgGyFSyCgdYpXQ9dR9c/WED3pg1RhxqEU=
 github.com/spf13/viper v1.4.0/go.mod h1:PTJ7Z/lr49W6bUbkmS1V3by4uWynFiR9p7+dSq/yZzE=
 github.com/spf13/viper v1.7.0 h1:xVKxvI7ouOI5I+U9s2eeiUfMaWBVoXA3AWskkrqK0VM=
 github.com/spf13/viper v1.7.0/go.mod h1:8WkrPz2fc9jxqZNCJI/76HCieCp4Q8HaLFoCha5qpdg=
@@ -1102,6 +1241,7 @@ github.com/xlab/handysort v0.0.0-20150421192137-fb3537ed64a1 h1:j2hhcujLRHAg872R
 github.com/xlab/handysort v0.0.0-20150421192137-fb3537ed64a1/go.mod h1:QcJo0QPSfTONNIgpN5RA8prR7fF8nkF6cTWTcNerRO8=
 github.com/xordataexchange/crypt v0.0.3-0.20170626215501-b2862e3d0a77/go.mod h1:aYKd//L2LvnjZzWKhF00oedf4jCCReLcmhLdhm1A27Q=
 github.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
+github.com/yuin/goldmark v1.1.32/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 github.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 github.com/yvasiyarov/go-metrics v0.0.0-20140926110328-57bccd1ccd43/go.mod h1:aX5oPXxHm3bOH+xeAttToC8pqch2ScQN/JoXYupl6xs=
 github.com/yvasiyarov/go-metrics v0.0.0-20150112132944-c25f46c4b940 h1:p7OofyZ509h8DmPLh8Hn+EIIZm/xYhdZHJ9GnXHdr6U=
@@ -1112,6 +1252,8 @@ github.com/yvasiyarov/gorelic v0.0.6/go.mod h1:NUSPSUX/bi6SeDMUh6brw0nXpxHnc96Tg
 github.com/yvasiyarov/newrelic_platform_go v0.0.0-20140908184405-b21fdbd4370f h1:ERexzlUfuTvpE74urLSbIQW0Z/6hF9t8U4NsJLaioAY=
 github.com/yvasiyarov/newrelic_platform_go v0.0.0-20140908184405-b21fdbd4370f/go.mod h1:GlGEuHIJweS1mbCqG+7vt2nvWLzLLnRHbXz5JKd/Qbg=
 github.com/zenazn/goji v0.9.0/go.mod h1:7S9M489iMyHBNxwZnk9/EHS098H4/F6TATF2mIxtB1Q=
+github.com/ziutek/mymysql v1.5.4 h1:GB0qdRGsTwQSBVYuVShFBKaXSnSnYYC2d9knnE1LHFs=
+github.com/ziutek/mymysql v1.5.4/go.mod h1:LMSpPZ6DbqWFxNCHW77HeMg9I646SAhApZ/wKdgO/C0=
 go.etcd.io/bbolt v1.3.2/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=
 go.etcd.io/bbolt v1.3.3/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=
 go.etcd.io/etcd v0.0.0-20191023171146-3cf2f69b5738/go.mod h1:dnLIgRNXwCJa5e+c6mIZCrds/GIG4ncV9HhK5PX7jPg=
@@ -1120,13 +1262,8 @@ go.mongodb.org/mongo-driver v1.0.3/go.mod h1:u7ryQJ+DOzQmeO7zB6MHyr8jkEQvC8vH7qL
 go.mongodb.org/mongo-driver v1.1.1/go.mod h1:u7ryQJ+DOzQmeO7zB6MHyr8jkEQvC8vH7qLUO4lqsUM=
 go.mongodb.org/mongo-driver v1.1.2 h1:jxcFYjlkl8xaERsgLo+RNquI0epW6zuy/ZRQs6jnrFA=
 go.mongodb.org/mongo-driver v1.1.2/go.mod h1:u7ryQJ+DOzQmeO7zB6MHyr8jkEQvC8vH7qLUO4lqsUM=
-go.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=
-go.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=
+go.opencensus.io v0.22.1 h1:8dP3SGL7MPB94crU3bEPplMPe83FI4EouesJUeFHv50=
 go.opencensus.io v0.22.1/go.mod h1:Ap50jQcDJrx6rB6VgeeFPtuPIf3wMRvRfrfYDO6+BmA=
-go.opencensus.io v0.22.2 h1:75k/FF0Q2YM8QYo07VPddOLBslDt1MZOdEslOHvmzAs=
-go.opencensus.io v0.22.2/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=
-go.opencensus.io v0.22.4 h1:LYy1Hy3MJdrCdMwwzxA/dRok4ejH+RwNGbuoD9fCjto=
-go.opencensus.io v0.22.4/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=
 go.uber.org/atomic v1.3.2/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=
 go.uber.org/atomic v1.4.0/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=
 go.uber.org/atomic v1.5.0 h1:OI5t8sDa1Or+q8AeE+yKeB/SDYioSHAgcVljj9JIETY=
@@ -1158,6 +1295,7 @@ golang.org/x/crypto v0.0.0-20190211182817-74369b46fc67/go.mod h1:6SG95UA2DQfeDnf
 golang.org/x/crypto v0.0.0-20190228161510-8dd112bcdc25/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20190320223903-b7391e95e576/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
+golang.org/x/crypto v0.0.0-20190325154230-a5d413f7728c/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20190605123033-f99c8df09eb5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20190611184440-5c40567a22f8/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
@@ -1172,6 +1310,8 @@ golang.org/x/crypto v0.0.0-20191028145041-f83a4685e152/go.mod h1:LzIPMQfyMNhhGPh
 golang.org/x/crypto v0.0.0-20191206172530-e9b2fee46413/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20200128174031-69ecbb4d6d5d h1:9FCpayM9Egr1baVnV1SX0H87m+XB0B8S0hAMi99X/3U=
 golang.org/x/crypto v0.0.0-20200128174031-69ecbb4d6d5d/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
+golang.org/x/crypto v0.0.0-20200220183623-bac4c82f6975/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
+golang.org/x/crypto v0.0.0-20200414173820-0848c9571904/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20200423211502-4bdfaf469ed5 h1:Q7tZBpemrlsc2I7IyODzhtallWRSm4Q0d09pL6XbQtU=
 golang.org/x/crypto v0.0.0-20200423211502-4bdfaf469ed5/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9 h1:psW17arqaxU48Z5kZ0CQnkZWQJsqcURM6tKiBApRjXI=
@@ -1182,19 +1322,27 @@ golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL
 golang.org/x/exp v0.0.0-20190125153040-c74c464bbbf2/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20190306152737-a1d7652674e8/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20190312203227-4b39c73a6495/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=
+golang.org/x/exp v0.0.0-20190510132918-efd6b22b2522/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=
+golang.org/x/exp v0.0.0-20190829153037-c13cbed26979/go.mod h1:86+5VVa7VpoJ4kLfm080zCjGlMRFzhUhsZKEZO7MGek=
 golang.org/x/exp v0.0.0-20191030013958-a1ab85dbe136 h1:A1gGSx58LAGVHUUsOf7IiR0u8Xb6W51gRwfDBhkdcaw=
 golang.org/x/exp v0.0.0-20191030013958-a1ab85dbe136/go.mod h1:JXzH8nQsPlswgeRAPE3MuO9GYsAcnJvJ4vnMwN/5qkY=
+golang.org/x/exp v0.0.0-20191129062945-2f5052295587/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=
 golang.org/x/exp v0.0.0-20191227195350-da58074b4299 h1:zQpM52jfKHG6II1ISZY1ZcpygvuSFZpLwfluuF89XOg=
 golang.org/x/exp v0.0.0-20191227195350-da58074b4299/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=
+golang.org/x/exp v0.0.0-20200119233911-0405dc783f0a/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=
+golang.org/x/exp v0.0.0-20200207192155-f17229e696bd/go.mod h1:J/WKrq2StrnmMY6+EHIKF9dgMWnmCNThgcyBT1FY9mM=
+golang.org/x/exp v0.0.0-20200224162631-6cc2880d07d6/go.mod h1:3jZMyOhIsHpP37uCMkUooju7aAi5cS1Q23tOzKc+0MU=
 golang.org/x/image v0.0.0-20180708004352-c73c2afc3b81/go.mod h1:ux5Hcp/YLpHSI86hEcLt0YII63i6oz57MZXIpbrjZUs=
 golang.org/x/image v0.0.0-20190227222117-0694c2d4d067/go.mod h1:kZ7UVZpmo3dzQBMxlp+ypCbDeSB+sBbTgSJuh5dn5js=
 golang.org/x/image v0.0.0-20190802002840-cff245a6509b/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=
 golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
-golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=
+golang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
 golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
 golang.org/x/lint v0.0.0-20190409202823-959b441ac422/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
+golang.org/x/lint v0.0.0-20190909230951-414d861bb4ac/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
 golang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
 golang.org/x/lint v0.0.0-20191125180803-fdd1cda4f05f/go.mod h1:5qLYkcX4OjUUV8bRuDixDT3tpyyb+LUpUlRWLxfhWrs=
+golang.org/x/lint v0.0.0-20200130185559-910be7a94367/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=
 golang.org/x/lint v0.0.0-20200302205851-738671d3881b h1:Wh+f8QHJXR411sJR8/vRBTZ7YapZaRvUcLFFJhusH0k=
 golang.org/x/lint v0.0.0-20200302205851-738671d3881b/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=
 golang.org/x/mobile v0.0.0-20190312151609-d3739f865fa6/go.mod h1:z+o9i4GpDbdi3rU15maQ/Ox0txvL9dWGYEHz965HBQE=
@@ -1202,6 +1350,7 @@ golang.org/x/mobile v0.0.0-20190719004257-d2bd2a29d028/go.mod h1:E/iHnbuqvinMTCc
 golang.org/x/mod v0.0.0-20190513183733-4bf6d317e70e/go.mod h1:mXi4GBBbnImb6dmsKGUJ2LatrhH/nqhxcFungHvyanc=
 golang.org/x/mod v0.1.0/go.mod h1:0QHyrYULN0/3qlju5TqG8bIK38QM8yzMo5ekMj3DlcY=
 golang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=
+golang.org/x/mod v0.1.1-0.20191107180719-034126e5016b/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=
 golang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/mod v0.3.0 h1:RM4zey1++hCTbCVQfnWeKs9/IEsaBLA8vTkd0WVtmH4=
 golang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
@@ -1219,12 +1368,10 @@ golang.org/x/net v0.0.0-20181201002055-351d144fa1fc/go.mod h1:mL1N/T3taQHkDXs73r
 golang.org/x/net v0.0.0-20181220203305-927f97764cc3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190125091013-d26f9f9a57f3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
-golang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190320064053-1272bf9dcd53/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190328230028-74de082e2cca/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
-golang.org/x/net v0.0.0-20190501004415-9ce7a6920f09/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190503192946-f4e77d36d62c/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190522155817-f3200d17e092/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=
 golang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=
@@ -1235,20 +1382,28 @@ golang.org/x/net v0.0.0-20190628185345-da137c7871d7/go.mod h1:z5CRVTTTmAJ677TzLL
 golang.org/x/net v0.0.0-20190724013045-ca1201d0de80/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20190813141303-74dc4d7220e7/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20190827160401-ba9fcec4b297/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+golang.org/x/net v0.0.0-20190923162816-aa69164e4478/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20191004110552-13f9640d40b9/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20191028085509-fe3aa8a45271/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20191209160850-c0dbc17a3553/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200114155413-6afb5195e5aa/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+golang.org/x/net v0.0.0-20200222125558-5a598a2470a0/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200226121028-0de0cce0169b h1:0mm1VjtFUOIlE1SbDlwjYaDxZVDP2S5ou6y0gSgXHu8=
 golang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+golang.org/x/net v0.0.0-20200501053045-e0ff5e5a1de5/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=
 golang.org/x/net v0.0.0-20200520004742-59133d7f0dd7 h1:AeiKBIuRw3UomYXSbLy0Mc2dDLfdtbT/IVn4keq83P0=
 golang.org/x/net v0.0.0-20200520004742-59133d7f0dd7/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=
+golang.org/x/net v0.0.0-20200625001655-4c5254603344/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
+golang.org/x/net v0.0.0-20200707034311-ab3426394381 h1:VXak5I6aEWmAXeQjA+QSZzlgNrpq9mjcfDemuexIKsU=
+golang.org/x/net v0.0.0-20200707034311-ab3426394381/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
 golang.org/x/net v0.0.0-20200822124328-c89045814202 h1:VvcQYSHwXgi7W+TpUR6A9g6Up98WAHf3f/ulnJ62IyA=
 golang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
+golang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45 h1:SVwTIAaPC2U/AvvLNZ2a7OVsmBpC8L5BlwK1whH3hm0=
 golang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
+golang.org/x/oauth2 v0.0.0-20191202225959-858c2ad4c8b6/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d h1:TzXSXBo42m9gQenoE3b9BGiEpg5IG2JkU5FkPIawgtw=
 golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -1258,68 +1413,16 @@ golang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJ
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e h1:vcxGaoTs7kV8m5Np9uUNQin4BrLOthgV7252N8V+FwY=
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20200317015054-43a5402ce75a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20200625203802-6e8e738ad208 h1:qwRHBd0NqMbJxfbotnDhm2ByMI1Shq4Y6oRJo21SGJA=
 golang.org/x/sync v0.0.0-20200625203802-6e8e738ad208/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sys v0.0.0-20170830134202-bb24a47a89ea/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20180117170059-2c42eef0765b/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20180606202747-9527bec2660b/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20180823144017-11551d06cbcc/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20180903190138-2b024373dcd9/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20181026203630-95b1ffbd15a5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20181107165924-66b7b1311ac8/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20181205085412-a5c9d58dba9a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20190122071731-054c452bb702/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20190124100055-b90733256f2e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20190129075346-302c3dd5f1cc/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20190209173611-3b5209105503/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20190228124157-a34e9553db1e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190321052220-f7bb7a8bee54/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190403152447-81d4e9dc473e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190502145724-3ef323f4f1fd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190507160741-ecd444e8653b/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190514135907-3a4b5fb9f71f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190515120540-06a5c4944438/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190602015325-4c4f7f33c9ed/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190606165138-5da285871e9c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190616124812-15dcb6c0061f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190624142023-c5567b49c5d0/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190626221950-04f50cda93cb/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190801041406-cbf593c0f2f3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190804053845-51ab0e2deafa/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190812172437-4e8604ab3aff/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190826190057-c7b8b68b1456/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190904154756-749cb33beabd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190907184412-d223b2b6db03/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190922100055-0a153f010e69/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20191005200804-aed5e4c7ecf9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20191008105621-543471e840be/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20191010194322-b09406accb47/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20191028164358-195ce5e7f934/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20191204072324-ce4227a45e2e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20191210023423-ac6580df4449/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20200106162015-b016eb3dc98e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20200113162924-86b910548bc1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20200523222454-059865788121/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20200625212154-ddb9806d33ae h1:Ih9Yo4hSPImZOpfGuA4bR/ORKTAbhZo2AbWNRCnevdo=
-golang.org/x/sys v0.0.0-20200625212154-ddb9806d33ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200826173525-f9321e4c35a6 h1:DvY3Zkh7KabQE/kfzMvYvKirSiguP9Q/veMtkYyf0o8=
+golang.org/x/sys v0.0.0-20200826173525-f9321e4c35a6/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/text v0.0.0-20160726164857-2910a502d2bf/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.1-0.20171227012246-e19ae1496984/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
+golang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.1-0.20181227161524-e6919f6577db/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=
 golang.org/x/text v0.3.2 h1:tW2bmiBqwgJj/UpqtC8EpXEZVYOwU0yG4iWbprSVAcs=
 golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=
@@ -1341,9 +1444,9 @@ golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGm
 golang.org/x/tools v0.0.0-20190122202912-9c309ee22fab/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190125232054-d66bd3c5d5a6/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190206041539-40960b6deb8e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
-golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
 golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
 golang.org/x/tools v0.0.0-20190312151545-0bb0c0a6e846/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
+golang.org/x/tools v0.0.0-20190312170243-e65039ee4138/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
 golang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
 golang.org/x/tools v0.0.0-20190425150028-36563e24a262/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
 golang.org/x/tools v0.0.0-20190425163242-31fd60d6bfdc/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
@@ -1354,22 +1457,39 @@ golang.org/x/tools v0.0.0-20190614205625-5aca471b1d59/go.mod h1:/rFqwRUd4F7ZHNgw
 golang.org/x/tools v0.0.0-20190617190820-da514acc4774/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=
 golang.org/x/tools v0.0.0-20190621195816-6e04913cbbac/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=
 golang.org/x/tools v0.0.0-20190624180213-70d37148ca0c/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=
+golang.org/x/tools v0.0.0-20190628153133-6cdbf07be9d0/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=
 golang.org/x/tools v0.0.0-20190706070813-72ffa07ba3db/go.mod h1:jcCCGcm9btYwXyDqrUWc6MKQKKGJCWEQ3AfLSRIbEuI=
 golang.org/x/tools v0.0.0-20190812233024-afc3694995b6/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.0.0-20190816200558-6889da9d5479/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20190907020128-2ca718005c18/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.0.0-20190911174233-4f2ddba30aff/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20190920225731-5eefd052ad72/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.0.0-20191004055002-72853e10c5a3/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.0.0-20191010075000-0337d82405ff/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20191012152004-8de300cfc20a/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20191029041327-9cc4af7d6b2c/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20191029190741-b9c20aec41a5/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20191112195655-aa38f8e97acc/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.0.0-20191113191852-77e3bb0ad9e7/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.0.0-20191115202509-3a792d9c32b2/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20191125144606-a911d9008d1f/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20191130070609-6e064ea0cf2d/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.0.0-20191216173652-a0e659d51361/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
+golang.org/x/tools v0.0.0-20191227053925-7b8e75db28f4/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
 golang.org/x/tools v0.0.0-20200117161641-43d50277825c/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
+golang.org/x/tools v0.0.0-20200122220014-bf1340f18c4a/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
 golang.org/x/tools v0.0.0-20200130002326-2f3ba24bd6e7/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
+golang.org/x/tools v0.0.0-20200204074204-1cc6d1ef6c74/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
+golang.org/x/tools v0.0.0-20200207183749-b753a1ba74fa/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
+golang.org/x/tools v0.0.0-20200212150539-ea181f53ac56/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
+golang.org/x/tools v0.0.0-20200224181240-023911ca70b2/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
 golang.org/x/tools v0.0.0-20200427205912-352a5409fae0/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
+golang.org/x/tools v0.0.0-20200501065659-ab2804fb9c9d/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
 golang.org/x/tools v0.0.0-20200522201501-cb1345f3a375 h1:SjQ2+AKWgZLc1xej6WSzL+Dfs5Uyd5xcZH1mGC411IA=
 golang.org/x/tools v0.0.0-20200522201501-cb1345f3a375/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
+golang.org/x/tools v0.0.0-20200811153730-74512f09e4b0 h1:UQpfk6CmZq0nGdlZ3/lNwnKmVvi0mgAZCyW6L2aZj/Y=
+golang.org/x/tools v0.0.0-20200811153730-74512f09e4b0/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=
 golang.org/x/tools v0.0.0-20200916195026-c9a70fc28ce3 h1:DywqrEscRX7O2phNjkT0L6lhHKGBoMLCNX+XcAe7t6s=
 golang.org/x/tools v0.0.0-20200916195026-c9a70fc28ce3/go.mod h1:z6u4i615ZeAfBE4XtMziQW1fSVJXACjjbWkB/mvPzlU=
 golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
@@ -1384,21 +1504,30 @@ gonum.org/v1/gonum v0.0.0-20180816165407-929014505bf4/go.mod h1:Y+Yx5eoAFn32cQvJ
 gonum.org/v1/gonum v0.0.0-20190331200053-3d26580ed485/go.mod h1:2ltnJ7xHfj0zHS40VVPYEAAMTa3ZGguvHGBSJeRWqE0=
 gonum.org/v1/gonum v0.6.0 h1:DJy6UzXbahnGUf1ujUNkh/NEtK14qMo2nvlBPs4U5yw=
 gonum.org/v1/gonum v0.6.0/go.mod h1:9mxDZsDKxgMAuccQkewq682L+0eCu4dCN2yonUJTCLU=
+gonum.org/v1/gonum v0.6.2/go.mod h1:9mxDZsDKxgMAuccQkewq682L+0eCu4dCN2yonUJTCLU=
 gonum.org/v1/netlib v0.0.0-20190313105609-8cb42192e0e0/go.mod h1:wa6Ws7BG/ESfp6dHfk7C6KdzKA7wR7u/rKwOGE66zvw=
 gonum.org/v1/netlib v0.0.0-20190331212654-76723241ea4e/go.mod h1:kS+toOQn6AQKjmKJ7gzohV1XkqsFehRA2FbsbkopSuQ=
 gonum.org/v1/netlib v0.0.0-20191031114514-eccb95939662 h1:yBPy8lLj+GituDSGQjvXBqT6yTch2BdT9Z/FbX19+to=
 gonum.org/v1/netlib v0.0.0-20191031114514-eccb95939662/go.mod h1:1LGLsuRLSwj1ge7tgC9ees7gfh1phRP5tuyDqlpChGE=
 gonum.org/v1/plot v0.0.0-20190515093506-e2840ee46a6b/go.mod h1:Wt8AAjI+ypCyYX3nZBvf6cAIx93T+c/OS2HFAYskSZc=
 google.golang.org/api v0.0.0-20160322025152-9bf6e6e569ff/go.mod h1:4mhQ8q/RsB7i+udVvVy5NUi08OU8ZlA0gRVgrF7VFY0=
+google.golang.org/api v0.4.0/go.mod h1:8k5glujaEP+g9n7WNsDg8QP6cUVNI86fCNMcbazEtwE=
+google.golang.org/api v0.6.0 h1:2tJEkRfnZL5g1GeBUlITh/rqT5HG3sFcoVCUUxmgJ2g=
 google.golang.org/api v0.6.0/go.mod h1:btoxGiFvQNVUZQ8W08zLtrVS08CNpINPEfxXxgJL1Q4=
 google.golang.org/api v0.6.1-0.20190607001116-5213b8090861/go.mod h1:btoxGiFvQNVUZQ8W08zLtrVS08CNpINPEfxXxgJL1Q4=
 google.golang.org/api v0.7.0/go.mod h1:WtwebWUNSVBH/HAw79HIFXZNqEvBhG+Ra+ax0hx3E3M=
 google.golang.org/api v0.8.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=
 google.golang.org/api v0.9.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=
+google.golang.org/api v0.10.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=
 google.golang.org/api v0.13.0 h1:Q3Ui3V3/CVinFWFiW39Iw0kMuVrRzYX0wN6OPFp0lTA=
 google.golang.org/api v0.13.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=
+google.golang.org/api v0.14.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=
 google.golang.org/api v0.15.0 h1:yzlyyDW/J0w8yNFJIhiAJy4kq74S+1DOLdawELNxFMA=
 google.golang.org/api v0.15.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=
+google.golang.org/api v0.17.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=
+google.golang.org/api v0.18.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=
+google.golang.org/api v0.22.0 h1:J1Pl9P2lnmYFSJvgs70DKELqHNh8CNWXPbud4njEE2s=
+google.golang.org/api v0.22.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=
 google.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=
 google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
 google.golang.org/appengine v1.5.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
@@ -1406,9 +1535,11 @@ google.golang.org/appengine v1.6.1/go.mod h1:i06prIuMbXzDqacNJfV5OdTW448YApPu5ww
 google.golang.org/appengine v1.6.2/go.mod h1:i06prIuMbXzDqacNJfV5OdTW448YApPu5ww/cMBSeb0=
 google.golang.org/appengine v1.6.5 h1:tycE03LOZYQNhDpS27tcQdAzLCVMaj7QT2SXxebnpCM=
 google.golang.org/appengine v1.6.5/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=
+google.golang.org/appengine v1.6.6 h1:lMO5rYAqUxkmaj76jAkRUvt5JZgFymx/+Q5Mzfivuhc=
+google.golang.org/appengine v1.6.6/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=
 google.golang.org/cloud v0.0.0-20151119220103-975617b05ea8/go.mod h1:0H1ncTHf11KCFhTc/+EFRbzSCOZx+VUbRMk55Yv5MYk=
-google.golang.org/genproto v0.0.0-20200117163144-32f20d992d24 h1:wDju+RU97qa0FZT0QnZDg9Uc2dH0Ql513kFvHocz+WM=
-google.golang.org/genproto v0.0.0-20200117163144-32f20d992d24/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=
+google.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884 h1:fiNLklpBwWK1mth30Hlwk+fcdBmIALlgF5iy77O37Ig=
+google.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
 google.golang.org/grpc v0.0.0-20160317175043-d3ddb4469d5a/go.mod h1:yo6s7OP7yaDglbqo1J04qKzAhqBH6lvTonzMVmEdcZw=
 google.golang.org/grpc v1.8.0/go.mod h1:yo6s7OP7yaDglbqo1J04qKzAhqBH6lvTonzMVmEdcZw=
 google.golang.org/grpc v1.14.0/go.mod h1:yo6s7OP7yaDglbqo1J04qKzAhqBH6lvTonzMVmEdcZw=
@@ -1417,21 +1548,26 @@ google.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiq
 google.golang.org/grpc v1.21.0/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=
 google.golang.org/grpc v1.21.1/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=
 google.golang.org/grpc v1.22.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=
-google.golang.org/grpc v1.22.1/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=
 google.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=
 google.golang.org/grpc v1.23.1/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=
 google.golang.org/grpc v1.24.0/go.mod h1:XDChyiUovWa60DnaeDeZmSW86xtLtjtZbwvSiRnRtcA=
 google.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=
 google.golang.org/grpc v1.26.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
+google.golang.org/grpc v1.27.0 h1:rRYRFMVgRv6E0D70Skyfsr28tDXIuuPZyWGMPdMcnXg=
 google.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
+google.golang.org/grpc v1.27.1/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
 google.golang.org/grpc v1.28.1 h1:C1QC6KzgSiLyBabDi87BbjaGreoRgGUF5nOyvfrAZ1k=
 google.golang.org/grpc v1.28.1/go.mod h1:rpkK4SK4GF4Ach/+MFLZUBavHOvF2JJB5uozKKal+60=
 google.golang.org/grpc v1.29.1 h1:EC2SB8S04d2r73uptxphDSUG+kTKVgjRPF+N3xpxRB4=
 google.golang.org/grpc v1.29.1/go.mod h1:itym6AZVZYACWQqET3MqgPpjcuV5QH3BxFS3IjizoKk=
+google.golang.org/grpc v1.31.1 h1:SfXqXS5hkufcdZ/mHtYCh53P2b+92WQq/DZcKLgsFRs=
+google.golang.org/grpc v1.31.1/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=
+gopkg.in/AlecAivazis/survey.v1 v1.8.2 h1:168gU32e10Xm6NzttCL75XlCQF+nNh0VWuRU80u1GIw=
 gopkg.in/AlecAivazis/survey.v1 v1.8.2/go.mod h1:iBNOmqKz/NUbZx3bA+4hAGLRC7fSK7tgtVDT4tB22XA=
 gopkg.in/AlecAivazis/survey.v1 v1.8.7 h1:oBJqtgsyBLg9K5FK9twNUbcPnbCPoh+R9a+7nag3qJM=
 gopkg.in/AlecAivazis/survey.v1 v1.8.7/go.mod h1:iBNOmqKz/NUbZx3bA+4hAGLRC7fSK7tgtVDT4tB22XA=
 gopkg.in/airbrake/gobrake.v2 v2.0.9/go.mod h1:/h5ZAUhDkGaJfjzjKLSjv6zCL6O0LLBxU4K+aSYdM/U=
+gopkg.in/alecthomas/kingpin.v2 v2.2.6 h1:jMFz6MfLP0/4fUyZle81rXUoxOBFi19VUFKVDOQfozc=
 gopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20141024133853-64131543e789/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
@@ -1446,6 +1582,8 @@ gopkg.in/fsnotify.v1 v1.4.7 h1:xOHLXZwVvI9hhs+cLKq5+I5onOuwQLhQwiu63xxlHs4=
 gopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=
 gopkg.in/gcfg.v1 v1.2.0/go.mod h1:yesOnuUOFQAhST5vPY4nbZsb/huCgGGXlipJsBn0b3o=
 gopkg.in/gemnasium/logrus-airbrake-hook.v2 v2.1.2/go.mod h1:Xk6kEKp8OKb+X14hQBKWaSkCsqBpgog8nAV2xsGOxlo=
+gopkg.in/gorp.v1 v1.7.2 h1:j3DWlAyGVv8whO7AcIWznQ2Yj7yJkn34B8s63GViAAw=
+gopkg.in/gorp.v1 v1.7.2/go.mod h1:Wo3h+DBQZIxATwftsglhdD/62zRFPhGhTiu5jUJmCaw=
 gopkg.in/inf.v0 v0.9.1 h1:73M5CoZyi3ZLMOyDlQh031Cx6N9NDJ2Vvfl76EDAgDc=
 gopkg.in/inf.v0 v0.9.1/go.mod h1:cWUDdTG/fYaXco+Dcufb5Vnc6Gp2YChqWtbxRZE0mXw=
 gopkg.in/ini.v1 v1.51.0 h1:AQvPpx3LzTDM0AjnIRlVFwFFGC+npRopjZxLJj6gdno=
@@ -1474,6 +1612,7 @@ gopkg.in/yaml.v2 v2.0.0/go.mod h1:JAlM8MvJe8wmxCU4Bli9HhUf9+ttbYbLASfIpnQbh74=
 gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.2.5/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.7/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.3.0 h1:clyUAQHOM3G0M3f5vQj7LuJrETvjVot3Z5el9nffUtU=
@@ -1485,59 +1624,63 @@ gotest.tools v2.2.0+incompatible h1:VsBPFP1AI068pPrMxtb/S8Zkgf9xEmTLJjfM+P5UIEo=
 gotest.tools v2.2.0+incompatible/go.mod h1:DsYFclhRJ6vuDpmuTbkuFWG+y2sxOXAzmJt81HFBacw=
 gotest.tools/gotestsum v0.3.5/go.mod h1:Mnf3e5FUzXbkCfynWBGOwLssY7gTQgCHObK9tMpAriY=
 helm.sh/helm/v3 v3.0.0/go.mod h1:sI7B9yfvMgxtTPMWdk1jSKJ2aa59UyP9qhPydqW6mgo=
-helm.sh/helm/v3 v3.1.2 h1:VpNzaNv2DX4aRnOCcV7v5Of+XT2SZrJ8iOQ25AGKOos=
-helm.sh/helm/v3 v3.1.2/go.mod h1:WYsFJuMASa/4XUqLyv54s0U/f3mlAaRErGmyy4z921g=
+helm.sh/helm/v3 v3.2.4 h1:lz/0ZRkSgyIF+pCo6pjFzap1udCARB1IN6CRfqkpcOg=
+helm.sh/helm/v3 v3.2.4/go.mod h1:ZaXz/vzktgwjyGGFbUWtIQkscfE7WYoRGP2szqAFHR0=
 honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
+honnef.co/go/tools v0.0.0-20190106161140-3f1c8253044a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
 honnef.co/go/tools v0.0.0-20190418001031-e561f6794a2a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
 honnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
 honnef.co/go/tools v0.0.1-2019.2.2/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt0JzvZhAg=
 honnef.co/go/tools v0.0.1-2019.2.3 h1:3JgtbtFHMiCmsznwGVTUWbgGov+pVqnlf1dEJTNAXeM=
 honnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt0JzvZhAg=
+honnef.co/go/tools v0.0.1-2020.1.3/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=
 honnef.co/go/tools v0.0.1-2020.1.5 h1:nI5egYTGJakVyOryqLs1cQO5dO0ksin5XXs2pspk75k=
 honnef.co/go/tools v0.0.1-2020.1.5/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=
-k8s.io/api v0.17.1 h1:i46MidoDOE9tvQ0TTEYggf3ka/pziP1+tHI/GFVeJao=
-k8s.io/api v0.17.1/go.mod h1:zxiAc5y8Ngn4fmhWUtSxuUlkfz1ixT7j9wESokELzOg=
-k8s.io/apiextensions-apiserver v0.17.1 h1:Gw6zQgmKyyNrFMtVpRBNEKE8p35sDBI7Tq1ImxGS+zU=
-k8s.io/apiextensions-apiserver v0.17.1/go.mod h1:DRIFH5x3jalE4rE7JP0MQKby9zdYk9lUJQuMmp+M/L0=
-k8s.io/apimachinery v0.17.1 h1:zUjS3szTxoUjTDYNvdFkYt2uMEXLcthcbp+7uZvWhYM=
-k8s.io/apimachinery v0.17.1/go.mod h1:b9qmWdKlLuU9EBh+06BtLcSf/Mu89rWL33naRxs1uZg=
-k8s.io/apiserver v0.17.1 h1:0cuh5kfAFPG2ImKT0rdNwdbPMUwDEfja14zX67V7eBQ=
-k8s.io/apiserver v0.17.1/go.mod h1:BQEUObJv8H6ZYO7DeKI5vb50tjk6paRJ4ZhSyJsiSco=
-k8s.io/cli-runtime v0.17.1 h1:VoZRWJNRyrxuM5SIRozYhT/EtcZ6jiS+KBCxRw66p1g=
-k8s.io/cli-runtime v0.17.1/go.mod h1:e5847Iy85W9uWH3rZofXTG/9nOUyGKGTVnObYF7zSik=
-k8s.io/client-go v0.17.1 h1:LbbuZ5tI7OYx4et5DfRFcJuoojvpYO0c7vps2rgJsHY=
-k8s.io/client-go v0.17.1/go.mod h1:HZtHJSC/VuSHcETN9QA5QDZky1tXiYrkF/7t7vRpO1A=
-k8s.io/cloud-provider v0.17.1/go.mod h1:QM00lVsYDC7gfXmrSCmiVVmRNk6zE8ciiuqskXDsjMM=
-k8s.io/cluster-bootstrap v0.17.1/go.mod h1:bp4yDMvUBdGyYJoT2mLAb+WGgkouUanvrEyWEu7mJes=
-k8s.io/code-generator v0.17.1 h1:e3B1UqRzRUWygp7WD+QTRT3ZUahPIaRKF0OFa7duQwI=
-k8s.io/code-generator v0.17.1/go.mod h1:DVmfPQgxQENqDIzVR2ddLXMH34qeszkKSdH/N+s+38s=
-k8s.io/component-base v0.17.1 h1:lK/lUzZZQK+DlH0XD+gq610OUEmjWOyDuUYOTGetw10=
-k8s.io/component-base v0.17.1/go.mod h1:LrBPZkXtlvGjBzDJa0+b7E5Ij4VoAAKrOGudRC5z2eY=
-k8s.io/cri-api v0.17.1/go.mod h1:BzAkbBHHp81d+aXzbiIcUbilLkbXa40B8mUHOk6EX3s=
-k8s.io/csi-translation-lib v0.17.1/go.mod h1:EWeHQJcexqar6avuUocMwEJOYkboteNM9ODXa3qoamc=
+k8s.io/api v0.18.6 h1:osqrAXbOQjkKIWDTjrqxWQ3w0GkKb1KA1XkUGHHYpeE=
+k8s.io/api v0.18.6/go.mod h1:eeyxr+cwCjMdLAmr2W3RyDI0VvTawSg/3RFFBEnmZGI=
+k8s.io/apiextensions-apiserver v0.18.6 h1:vDlk7cyFsDyfwn2rNAO2DbmUbvXy5yT5GE3rrqOzaMo=
+k8s.io/apiextensions-apiserver v0.18.6/go.mod h1:lv89S7fUysXjLZO7ke783xOwVTm6lKizADfvUM/SS/M=
+k8s.io/apimachinery v0.18.6 h1:RtFHnfGNfd1N0LeSrKCUznz5xtUP1elRGvHJbL3Ntag=
+k8s.io/apimachinery v0.18.6/go.mod h1:OaXp26zu/5J7p0f92ASynJa1pZo06YlV9fG7BoWbCko=
+k8s.io/apiserver v0.18.6 h1:HcWwcOfhj4Yv6y2igP4ZUuovyPjVLGoZcG0Tsph4Mxo=
+k8s.io/apiserver v0.18.6/go.mod h1:Zt2XvTHuaZjBz6EFYzpp+X4hTmgWGy8AthNVnTdm3Wg=
+k8s.io/cli-runtime v0.18.6 h1:I8BkH5NyqMQ4zqUBmpXJ1LxIqpCH88H/1edPkPVWzjQ=
+k8s.io/cli-runtime v0.18.6/go.mod h1:+G/WTNqHgUv636e5y7rhOQ7epUbRXnwmPnhOhD6t9uM=
+k8s.io/client-go v0.18.6 h1:I+oWqJbibLSGsZj8Xs8F0aWVXJVIoUHWaaJV3kUN/Zw=
+k8s.io/client-go v0.18.6/go.mod h1:/fwtGLjYMS1MaM5oi+eXhKwG+1UHidUEXRh6cNsdO0Q=
+k8s.io/cloud-provider v0.18.6 h1:olYNA3/gQoy7XiSlYP16HFMK2jBWIVWHo0DXTtSvPuo=
+k8s.io/cloud-provider v0.18.6/go.mod h1:QnPLLdFkvtx1dEyVMaPUdzVWB+ECzEf+PA3DXwIr8bo=
+k8s.io/cluster-bootstrap v0.18.6/go.mod h1:lnM1CXtPImlEBTh5874ZI+ofZzdIy1t2JV9Y+NxvojU=
+k8s.io/code-generator v0.18.6 h1:QdfvGfs4gUCS1dru+rLbCKIFxYEV0IRfF8MXwY/ozLk=
+k8s.io/code-generator v0.18.6/go.mod h1:TgNEVx9hCyPGpdtCWA34olQYLkh3ok9ar7XfSsr8b6c=
+k8s.io/component-base v0.18.6 h1:Wd6cHGwJN2qpufnirVOB3oMhyhbioGsKEi5HeDBsV+s=
+k8s.io/component-base v0.18.6/go.mod h1:knSVsibPR5K6EW2XOjEHik6sdU5nCvKMrzMt2D4In14=
+k8s.io/cri-api v0.18.6/go.mod h1:OJtpjDvfsKoLGhvcc0qfygved0S0dGX56IJzPbqTG1s=
+k8s.io/csi-translation-lib v0.18.6/go.mod h1:w13PRDbRWol3Z9lM3RjxRd5vi/R9wog1DQHAbzzuKOI=
 k8s.io/gengo v0.0.0-20190822140433-26a664648505 h1:ZY6yclUKVbZ+SdWnkfY+Je5vrMpKOxmGeKRbsXVmqYM=
 k8s.io/gengo v0.0.0-20190822140433-26a664648505/go.mod h1:ezvh/TsK7cY6rbqRK0oQQ8IAqLxYwwyPxAX1Pzy0ii0=
 k8s.io/heapster v1.2.0-beta.1/go.mod h1:h1uhptVXMwC8xtZBYsPXKVi8fpdlYkTs6k949KozGrM=
-k8s.io/helm v2.16.1+incompatible h1:L+k810plJlaGWEw1EszeT4deK8XVaKxac1oGcuB+WDc=
-k8s.io/helm v2.16.1+incompatible/go.mod h1:LZzlS4LQBHfciFOurYBFkCMTaZ0D1l+p0teMg7TSULI=
-k8s.io/kube-aggregator v0.17.1/go.mod h1:H5LcB3fx+P1gpowuZpzDu5B1XfABdO7JBKyB9J9bt34=
-k8s.io/kube-controller-manager v0.17.1/go.mod h1:+jsQDMuaZzr0e2m5TMuSIz7jR0JlYCqfsCOiOr5h3ck=
+k8s.io/helm v2.17.0+incompatible h1:Bpn6o1wKLYqKM3+Osh8e+1/K2g/GsQJ4F4yNF2+deao=
+k8s.io/helm v2.17.0+incompatible/go.mod h1:LZzlS4LQBHfciFOurYBFkCMTaZ0D1l+p0teMg7TSULI=
+k8s.io/kube-aggregator v0.18.6/go.mod h1:MKm8inLHdeiXQJCl6UdmgMosRrqJgyxO2obTXOkey/s=
+k8s.io/kube-controller-manager v0.18.6/go.mod h1:T+Ayh47y1IrvwDSUAh4QT/aIrRcKWlvgdqV5PHrMwNs=
 k8s.io/kube-openapi v0.0.0-20190816220812-743ec37842bf h1:EYm5AW/UUDbnmnI+gK0TJDVK9qPLhM+sRHYanNKw0EQ=
 k8s.io/kube-openapi v0.0.0-20190816220812-743ec37842bf/go.mod h1:1TqjTSzOxsLGIKfj0lK8EeCP7K1iUG65v09OM0/WG5E=
-k8s.io/kube-proxy v0.17.1/go.mod h1:Vz/TedeV9dMIBDTQ5FsmRLF+swQlKtVSvX394nnnCEg=
-k8s.io/kube-scheduler v0.17.1/go.mod h1:vJfxYakLPXeFwnDhiDdNVBqVcICfuGTrDTcXxE81ut4=
-k8s.io/kubectl v0.17.1 h1:+gI5hPZVEXN5wWybrzX3tu3f9af54sUNcALhg86upCY=
-k8s.io/kubectl v0.17.1/go.mod h1:ZmbAdEQm+SLA/3s3eWJ3g+liXb5eT6mA85jYj52LMXw=
-k8s.io/kubelet v0.17.1/go.mod h1:0gzJqZbPCBik9aHwpu4SE0J2QhUQkdsoxqllG2FEZ4Y=
+k8s.io/kube-proxy v0.18.6/go.mod h1:r3ScLxYTuskh8l2dDfAPdrFK3QnWIMsZI/+Bq5kkmWc=
+k8s.io/kube-scheduler v0.18.6/go.mod h1:J+GApeR/QkU6eYonXir0i7+rcUVWzZPZbNHqjq4FpoQ=
+k8s.io/kubectl v0.18.6 h1:IFPNuLPkZ59vSGQzynXY8XGz9yuOSRpkJupnobdYvO4=
+k8s.io/kubectl v0.18.6/go.mod h1:3TLzFOrF9h4mlRPAvdNkDbs5NWspN4e0EnPnEB41CGo=
+k8s.io/kubelet v0.18.6/go.mod h1:5e0PJYialWMWZgsYWJqI6zVW58y+MaQvmOQwEGFF4Xc=
+k8s.io/kubernetes v1.13.0 h1:qTfB+u5M92k2fCCCVP2iuhgwwSOv1EkAkvQY1tQODD8=
 k8s.io/kubernetes v1.13.0/go.mod h1:ocZa8+6APFNC2tX1DZASIbocyYT5jHzqFVsY5aoB7Jk=
-k8s.io/kubernetes v1.17.1 h1:pHzPDwbQ7mhO/rHWRLWyEWEx69XgK3441/39956SKNs=
-k8s.io/kubernetes v1.17.1/go.mod h1:NbNV+69yL3eKiKDJ+ZEjqOplN3BFXKBeunzkoOy8WLo=
-k8s.io/legacy-cloud-providers v0.17.1/go.mod h1:AWMb5OLBTn+K1jrW1bRTa8aXM6L66OnBG1+4wQEfqOM=
-k8s.io/metrics v0.17.1 h1:29wf4SnTip8pNOUbGp5PICKoWvryMLRPKLPuw/BSOU4=
-k8s.io/metrics v0.17.1/go.mod h1:dphDhzjA1KR/nQXtXEQzoQyQXk5ViSJO85Ky8QKwBPM=
+k8s.io/kubernetes v1.18.6 h1:2rkR3ffvd5YVyPYU4LAUDCKoKQZtjuuj8ga15mbv96o=
+k8s.io/kubernetes v1.18.6/go.mod h1:Efg82S+Ti02A/Mww53bxroc7IgzX2bgPsf6hT8gAs3M=
+k8s.io/legacy-cloud-providers v0.18.6/go.mod h1:0bU6t0dTOd0YkcByIdjx7WD4ihApa+aUrTgVJpqciZU=
+k8s.io/metrics v0.18.6 h1:IRMCn0KKNhbOSnxNZ+MhooRi8c67iIMjpGkKpm6oqOM=
+k8s.io/metrics v0.18.6/go.mod h1:iAwGeabusQNO3duHDM7BBExTUB8L+iq8PM7N9EtQw6g=
 k8s.io/repo-infra v0.0.0-20181204233714-00fe14e3d1a3/go.mod h1:+G1xBfZDfVFsm1Tj/HNCvg4QqWx8rJ2Fxpqr1rqp/gQ=
-k8s.io/sample-apiserver v0.17.1/go.mod h1:/aPEYThypAkyvvGXdRUUU69J1Ys5ITY8lgNc7bPKdbI=
-k8s.io/sample-controller v0.17.1/go.mod h1:QCdOpdrbJMaHI5ObTsgmBgMxZw3PTjl0HCqwtb3jscM=
+k8s.io/sample-apiserver v0.18.6/go.mod h1:NSRGjwumFclVpq8zewaqGVwiyIR7DQbLAE6wQZ0uljI=
+k8s.io/sample-controller v0.18.6/go.mod h1:xn1exAmtuaxuIbp0+7c7Al7UYobXtspFzAfMYWDy/z0=
 k8s.io/system-validators v1.0.4/go.mod h1:HgSgTg4NAGNoYYjKsUyk52gdNi2PVDswQ9Iyn66R7NI=
 k8s.io/utils v0.0.0-20190801114015-581e00157fb1 h1:+ySTxfHnfzZb9ys375PXNlLhkJPLKgHajBU0N62BDvE=
 k8s.io/utils v0.0.0-20190801114015-581e00157fb1/go.mod h1:sZAwmy6armz5eXlNoLmJcl4F1QuKu7sr+mFQ0byX7Ew=
@@ -1551,20 +1694,24 @@ modernc.org/mathutil v1.0.0/go.mod h1:wU0vUrJsVWBZ4P6e7xtFJEhFSNsfRLJ8H458uRjg03
 modernc.org/strutil v1.0.0/go.mod h1:lstksw84oURvj9y3tn8lGvRxyRC1S2+g5uuIzNfIOBs=
 modernc.org/strutil v1.1.0/go.mod h1:lstksw84oURvj9y3tn8lGvRxyRC1S2+g5uuIzNfIOBs=
 modernc.org/xc v1.0.0/go.mod h1:mRNCo0bvLjGhHO9WsyuKVU4q0ceiDDDoEeWDJHrNx8I=
+rsc.io/binaryregexp v0.2.0/go.mod h1:qTv7/COck+e2FymRvadv62gMdZztPaShugOCi3I+8D8=
 rsc.io/letsencrypt v0.0.1 h1:DV0d09Ne9E7UUa9ZqWktZ9L2VmybgTgfq7xlfFR/bbU=
 rsc.io/letsencrypt v0.0.1/go.mod h1:buyQKZ6IXrRnB7TdkHP0RyEybLx18HHyOSoTyoOLqNY=
 rsc.io/pdf v0.1.1/go.mod h1:n8OzWcQ6Sp37PL01nO98y4iUCRdTGarVfzxY20ICaU4=
 rsc.io/quote/v3 v3.1.0/go.mod h1:yEA65RcK8LyAZtP9Kv3t0HmxON59tX3rD+tICJqUlj0=
 rsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=
+sigs.k8s.io/apiserver-network-proxy/konnectivity-client v0.0.7/go.mod h1:PHgbrJT7lCHcxMU+mDHEm+nx46H4zuuHZkDP6icnhu0=
 sigs.k8s.io/aws-iam-authenticator v0.5.0/go.mod h1:hGGN2wp01A1NU/88s8Wjfa3nY5bZYdeZn1aAAb8j1SI=
 sigs.k8s.io/controller-runtime v0.4.0/go.mod h1:ApC79lpY3PHW9xj/w9pj+lYkLgwAAUZwfXkME1Lajns=
 sigs.k8s.io/controller-runtime v0.5.6/go.mod h1:JZUwSMVbxDupo0lTJSSFP5pimEyxGynROImSsqIOx1A=
-sigs.k8s.io/controller-runtime v0.5.8 h1:+pp4plYh2rpjuVo6HBJ1pVgN3cvAfQHfkKK27rLdxxI=
-sigs.k8s.io/controller-runtime v0.5.8/go.mod h1:UI/unU7Q+mo/rWBrND0NAaVNj/Xjh/+aqSv/M3njpmo=
+sigs.k8s.io/controller-runtime v0.6.2 h1:jkAnfdTYBpFwlmBn3pS5HFO06SfxvnTZ1p5PeEF/zAA=
+sigs.k8s.io/controller-runtime v0.6.2/go.mod h1:vhcq/rlnENJ09SIRp3EveTaZ0yqH526hjf9iJdbUJ/E=
 sigs.k8s.io/kustomize v2.0.3+incompatible h1:JUufWFNlI44MdtnjUqVnvh29rR37PQFzPbLXqhyOyX0=
 sigs.k8s.io/kustomize v2.0.3+incompatible/go.mod h1:MkjgH3RdOWrievjo6c9T245dYlB5QeXV4WCbnt/PEpU=
+sigs.k8s.io/structured-merge-diff v0.0.0-20190525122527-15d366b2352e h1:4Z09Hglb792X0kfOBBJUPFEyvVfQWrYT/l8h5EKA6JQ=
 sigs.k8s.io/structured-merge-diff v0.0.0-20190525122527-15d366b2352e/go.mod h1:wWxsB5ozmmv/SG7nM11ayaAW51xMvak/t1r0CSlcokI=
-sigs.k8s.io/structured-merge-diff v1.0.1-0.20191108220359-b1b620dd3f06/go.mod h1:/ULNhyfzRopfcjskuui0cTITekDduZ7ycKN3oUT9R18=
+sigs.k8s.io/structured-merge-diff/v3 v3.0.0 h1:dOmIZBMfhcHS09XZkMyUgkq5trg3/jRyJYFZUiaOp8E=
+sigs.k8s.io/structured-merge-diff/v3 v3.0.0/go.mod h1:PlARxl6Hbt/+BC80dRLi1qAmnMqwqDg62YvvVkZjemw=
 sigs.k8s.io/testing_frameworks v0.1.2/go.mod h1:ToQrwSC3s8Xf/lADdZp3Mktcql9CG0UAmdJG9th5i0w=
 sigs.k8s.io/yaml v1.1.0/go.mod h1:UJmg0vDUVViEyp3mgSv9WPwZCDxu4rQW1olrI1uml+o=
 sigs.k8s.io/yaml v1.2.0 h1:kr/MCeFWJWTwyaHoR9c8EjH9OumOmoF9YGiZd7lFm/Q=
diff --git a/pkg/cliutil/uri.go b/pkg/cliutil/uri.go
index d29990bc4..3469645d9 100644
--- a/pkg/cliutil/uri.go
+++ b/pkg/cliutil/uri.go
@@ -57,7 +57,7 @@ func GetResource(uri string) (io.ReadCloser, error) {
 	return file, nil
 }
 
-func GetIngressHost(proxyName, proxyNamespace, proxyPort string, localCluster bool, clusterName string) (string, error) {
+func GetIngressHost(ctx context.Context, proxyName, proxyNamespace, proxyPort string, localCluster bool, clusterName string) (string, error) {
 	restCfg, err := kubeutils.GetConfig("", "")
 	if err != nil {
 		return "", errors.Wrapf(err, "getting kube rest config")
@@ -66,7 +66,7 @@ func GetIngressHost(proxyName, proxyNamespace, proxyPort string, localCluster bo
 	if err != nil {
 		return "", errors.Wrapf(err, "starting kube client")
 	}
-	svc, err := kube.CoreV1().Services(proxyNamespace).Get(proxyName, metav1.GetOptions{})
+	svc, err := kube.CoreV1().Services(proxyNamespace).Get(ctx, proxyName, metav1.GetOptions{})
 	if err != nil {
 		return "", errors.Wrapf(err, "could not detect '%v' service in %v namespace. "+
 			"Check that Gloo has been installed properly and is running with 'kubectl get pod -n gloo-system'",
@@ -95,7 +95,7 @@ func GetIngressHost(proxyName, proxyNamespace, proxyPort string, localCluster bo
 	if len(svc.Status.LoadBalancer.Ingress) == 0 || localCluster {
 		// assume nodeport on kubernetes
 		// TODO: support more types of NodePort services
-		host, err = getNodeIp(svc, kube, clusterName)
+		host, err = getNodeIp(ctx, svc, kube, clusterName)
 		if err != nil {
 			return "", errors.Wrapf(err, "")
 		}
@@ -110,9 +110,9 @@ func GetIngressHost(proxyName, proxyNamespace, proxyPort string, localCluster bo
 	return host + ":" + port, nil
 }
 
-func getNodeIp(svc *v1.Service, kube kubernetes.Interface, clusterName string) (string, error) {
+func getNodeIp(ctx context.Context, svc *v1.Service, kube kubernetes.Interface, clusterName string) (string, error) {
 	// pick a node where one of our pods is running
-	pods, err := kube.CoreV1().Pods(svc.Namespace).List(metav1.ListOptions{
+	pods, err := kube.CoreV1().Pods(svc.Namespace).List(ctx, metav1.ListOptions{
 		LabelSelector: labels.SelectorFromSet(svc.Spec.Selector).String(),
 	})
 	if err != nil {
@@ -136,7 +136,7 @@ func getNodeIp(svc *v1.Service, kube kubernetes.Interface, clusterName string) (
 		return minikubeIp(clusterName)
 	}
 
-	node, err := kube.CoreV1().Nodes().Get(nodeName, metav1.GetOptions{})
+	node, err := kube.CoreV1().Nodes().Get(ctx, nodeName, metav1.GetOptions{})
 	if err != nil {
 		return "", err
 	}
diff --git a/pkg/listers/listers.go b/pkg/listers/listers.go
index 5eeed7119..f8118f37a 100644
--- a/pkg/listers/listers.go
+++ b/pkg/listers/listers.go
@@ -1,7 +1,11 @@
 package listers
 
+import (
+	"context"
+)
+
 //go:generate mockgen -destination mocks/mock_listers.go -package mocks github.com/solo-io/gloo/pkg/listers NamespaceLister
 
 type NamespaceLister interface {
-	List() ([]string, error)
+	List(ctx context.Context) ([]string, error)
 }
diff --git a/pkg/listers/mocks/mock_listers.go b/pkg/listers/mocks/mock_listers.go
index 901dcc73d..45f773b93 100644
--- a/pkg/listers/mocks/mock_listers.go
+++ b/pkg/listers/mocks/mock_listers.go
@@ -5,6 +5,7 @@
 package mocks
 
 import (
+	context "context"
 	reflect "reflect"
 
 	gomock "github.com/golang/mock/gomock"
@@ -34,16 +35,16 @@ func (m *MockNamespaceLister) EXPECT() *MockNamespaceListerMockRecorder {
 }
 
 // List mocks base method
-func (m *MockNamespaceLister) List() ([]string, error) {
+func (m *MockNamespaceLister) List(arg0 context.Context) ([]string, error) {
 	m.ctrl.T.Helper()
-	ret := m.ctrl.Call(m, "List")
+	ret := m.ctrl.Call(m, "List", arg0)
 	ret0, _ := ret[0].([]string)
 	ret1, _ := ret[1].(error)
 	return ret0, ret1
 }
 
 // List indicates an expected call of List
-func (mr *MockNamespaceListerMockRecorder) List() *gomock.Call {
+func (mr *MockNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNamespaceLister)(nil).List))
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNamespaceLister)(nil).List), arg0)
 }
diff --git a/pkg/utils/selectionutils/virtual_service.go b/pkg/utils/selectionutils/virtual_service.go
index 4c1093afe..5db14e682 100644
--- a/pkg/utils/selectionutils/virtual_service.go
+++ b/pkg/utils/selectionutils/virtual_service.go
@@ -52,7 +52,7 @@ func (s *virtualServiceSelector) SelectOrBuildVirtualService(ctx context.Context
 	}
 
 	// Look for an existing virtual service with * domain
-	namespaces, err := s.namespaceLister.List()
+	namespaces, err := s.namespaceLister.List(ctx)
 	if err != nil {
 		return nil, err
 	}
diff --git a/pkg/utils/setuputils/main_setup.go b/pkg/utils/setuputils/main_setup.go
index d6ffff685..bb4a1affd 100644
--- a/pkg/utils/setuputils/main_setup.go
+++ b/pkg/utils/setuputils/main_setup.go
@@ -96,7 +96,7 @@ func Main(opts SetupOpts) error {
 func kubeOrFileSettingsClient(ctx context.Context, setupNamespace, settingsDir string) (v1.SettingsClient, error) {
 	if settingsDir != "" {
 		contextutils.LoggerFrom(ctx).Infow("using filesystem for settings", zap.String("directory", settingsDir))
-		return v1.NewSettingsClient(&factory.FileResourceClientFactory{
+		return v1.NewSettingsClient(ctx, &factory.FileResourceClientFactory{
 			RootDir: settingsDir,
 		})
 	}
@@ -104,7 +104,7 @@ func kubeOrFileSettingsClient(ctx context.Context, setupNamespace, settingsDir s
 	if err != nil {
 		return nil, err
 	}
-	return v1.NewSettingsClient(&factory.KubeResourceClientFactory{
+	return v1.NewSettingsClient(ctx, &factory.KubeResourceClientFactory{
 		Crd:                v1.SettingsCrd,
 		Cfg:                cfg,
 		SharedCache:        kube.NewKubeCache(ctx),
diff --git a/pkg/utils/usage/usage_readers.go b/pkg/utils/usage/usage_readers.go
index 779999590..a48252bf7 100644
--- a/pkg/utils/usage/usage_readers.go
+++ b/pkg/utils/usage/usage_readers.go
@@ -1,6 +1,7 @@
 package usage
 
 import (
+	"context"
 	"fmt"
 	"os"
 	"strings"
@@ -31,8 +32,8 @@ type DefaultUsageReader struct {
 
 var _ client.UsagePayloadReader = &DefaultUsageReader{}
 
-func (d *DefaultUsageReader) GetPayload() (map[string]string, error) {
-	usage, err := d.MetricsStorage.GetUsage()
+func (d *DefaultUsageReader) GetPayload(ctx context.Context) (map[string]string, error) {
+	usage, err := d.MetricsStorage.GetUsage(ctx)
 	if err != nil {
 		return nil, err
 	}
@@ -73,7 +74,7 @@ type CliUsageReader struct {
 var _ client.UsagePayloadReader = &CliUsageReader{}
 
 // when reporting usage, also include the args that glooctl was invoked with
-func (c *CliUsageReader) GetPayload() (map[string]string, error) {
+func (c *CliUsageReader) GetPayload(ctx context.Context) (map[string]string, error) {
 	argsMap := map[string]string{}
 
 	if len(os.Args) > 1 {
diff --git a/projects/clusteringress/pkg/api/external/knative/cluster_ingress_client.sk.go b/projects/clusteringress/pkg/api/external/knative/cluster_ingress_client.sk.go
index 016ec0f2e..22a1244b6 100644
--- a/projects/clusteringress/pkg/api/external/knative/cluster_ingress_client.sk.go
+++ b/projects/clusteringress/pkg/api/external/knative/cluster_ingress_client.sk.go
@@ -3,6 +3,8 @@
 package v1alpha1
 
 import (
+	"context"
+
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
@@ -28,12 +30,12 @@ type clusterIngressClient struct {
 	rc clients.ResourceClient
 }
 
-func NewClusterIngressClient(rcFactory factory.ResourceClientFactory) (ClusterIngressClient, error) {
-	return NewClusterIngressClientWithToken(rcFactory, "")
+func NewClusterIngressClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (ClusterIngressClient, error) {
+	return NewClusterIngressClientWithToken(ctx, rcFactory, "")
 }
 
-func NewClusterIngressClientWithToken(rcFactory factory.ResourceClientFactory, token string) (ClusterIngressClient, error) {
-	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
+func NewClusterIngressClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (ClusterIngressClient, error) {
+	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
 		ResourceType: &ClusterIngress{},
 		Token:        token,
 	})
diff --git a/projects/gateway/pkg/api/v1/gateway_client.sk.go b/projects/gateway/pkg/api/v1/gateway_client.sk.go
index 8e0a50a80..ae6530ae3 100644
--- a/projects/gateway/pkg/api/v1/gateway_client.sk.go
+++ b/projects/gateway/pkg/api/v1/gateway_client.sk.go
@@ -3,6 +3,8 @@
 package v1
 
 import (
+	"context"
+
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
@@ -28,12 +30,12 @@ type gatewayClient struct {
 	rc clients.ResourceClient
 }
 
-func NewGatewayClient(rcFactory factory.ResourceClientFactory) (GatewayClient, error) {
-	return NewGatewayClientWithToken(rcFactory, "")
+func NewGatewayClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (GatewayClient, error) {
+	return NewGatewayClientWithToken(ctx, rcFactory, "")
 }
 
-func NewGatewayClientWithToken(rcFactory factory.ResourceClientFactory, token string) (GatewayClient, error) {
-	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
+func NewGatewayClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (GatewayClient, error) {
+	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
 		ResourceType: &Gateway{},
 		Token:        token,
 	})
diff --git a/projects/gateway/pkg/api/v1/route_table_client.sk.go b/projects/gateway/pkg/api/v1/route_table_client.sk.go
index 6a5e5aec0..f947a05c9 100644
--- a/projects/gateway/pkg/api/v1/route_table_client.sk.go
+++ b/projects/gateway/pkg/api/v1/route_table_client.sk.go
@@ -3,6 +3,8 @@
 package v1
 
 import (
+	"context"
+
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
@@ -28,12 +30,12 @@ type routeTableClient struct {
 	rc clients.ResourceClient
 }
 
-func NewRouteTableClient(rcFactory factory.ResourceClientFactory) (RouteTableClient, error) {
-	return NewRouteTableClientWithToken(rcFactory, "")
+func NewRouteTableClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (RouteTableClient, error) {
+	return NewRouteTableClientWithToken(ctx, rcFactory, "")
 }
 
-func NewRouteTableClientWithToken(rcFactory factory.ResourceClientFactory, token string) (RouteTableClient, error) {
-	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
+func NewRouteTableClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (RouteTableClient, error) {
+	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
 		ResourceType: &RouteTable{},
 		Token:        token,
 	})
diff --git a/projects/gateway/pkg/api/v1/virtual_service_client.sk.go b/projects/gateway/pkg/api/v1/virtual_service_client.sk.go
index 408c52ced..9e13a7e41 100644
--- a/projects/gateway/pkg/api/v1/virtual_service_client.sk.go
+++ b/projects/gateway/pkg/api/v1/virtual_service_client.sk.go
@@ -3,6 +3,8 @@
 package v1
 
 import (
+	"context"
+
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
@@ -28,12 +30,12 @@ type virtualServiceClient struct {
 	rc clients.ResourceClient
 }
 
-func NewVirtualServiceClient(rcFactory factory.ResourceClientFactory) (VirtualServiceClient, error) {
-	return NewVirtualServiceClientWithToken(rcFactory, "")
+func NewVirtualServiceClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (VirtualServiceClient, error) {
+	return NewVirtualServiceClientWithToken(ctx, rcFactory, "")
 }
 
-func NewVirtualServiceClientWithToken(rcFactory factory.ResourceClientFactory, token string) (VirtualServiceClient, error) {
-	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
+func NewVirtualServiceClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (VirtualServiceClient, error) {
+	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
 		ResourceType: &VirtualService{},
 		Token:        token,
 	})
diff --git a/projects/gloo/cli/pkg/argsutils/metadata.go b/projects/gloo/cli/pkg/argsutils/metadata.go
index 03d744df0..b5b678627 100644
--- a/projects/gloo/cli/pkg/argsutils/metadata.go
+++ b/projects/gloo/cli/pkg/argsutils/metadata.go
@@ -17,7 +17,7 @@ func MetadataArgsParse(opts *options.Options, args []string) error {
 
 	// if interactive mode, get any missing fields interactively
 	if opts.Top.Interactive {
-		return surveyutils.EnsureMetadataSurvey(&opts.Metadata)
+		return surveyutils.EnsureMetadataSurvey(opts.Top.Ctx, &opts.Metadata)
 	}
 
 	// if not interactive mode, ensure that the required fields were provided
diff --git a/projects/gloo/cli/pkg/cmd/add/route.go b/projects/gloo/cli/pkg/cmd/add/route.go
index 29d0379b4..9d8989ac6 100644
--- a/projects/gloo/cli/pkg/cmd/add/route.go
+++ b/projects/gloo/cli/pkg/cmd/add/route.go
@@ -98,7 +98,7 @@ func addRoute(opts *options.Options) error {
 			Namespace: opts.Metadata.Namespace,
 			Name:      opts.Metadata.Name,
 		}
-		selector := selectionutils.NewRouteTableSelector(helpers.MustNamespacedRouteTableClient(opts.Metadata.GetNamespace()), defaults.GlooSystem)
+		selector := selectionutils.NewRouteTableSelector(helpers.MustNamespacedRouteTableClient(opts.Top.Ctx, opts.Metadata.GetNamespace()), defaults.GlooSystem)
 		routeTable, err := selector.SelectOrBuildRouteTable(opts.Top.Ctx, rtRef)
 		if err != nil {
 			return err
@@ -110,7 +110,7 @@ func addRoute(opts *options.Options) error {
 		routeTable.Routes[index] = v1Route
 
 		if !opts.Add.DryRun {
-			routeTable, err = helpers.MustNamespacedRouteTableClient(opts.Metadata.GetNamespace()).Write(routeTable, clients.WriteOpts{
+			routeTable, err = helpers.MustNamespacedRouteTableClient(opts.Top.Ctx, opts.Metadata.GetNamespace()).Write(routeTable, clients.WriteOpts{
 				Ctx:               opts.Top.Ctx,
 				OverwriteExisting: true,
 			})
@@ -128,10 +128,10 @@ func addRoute(opts *options.Options) error {
 		Namespace: opts.Metadata.Namespace,
 		Name:      opts.Metadata.Name,
 	}
-	vsClient := helpers.MustNamespacedVirtualServiceClient(opts.Metadata.GetNamespace())
+	vsClient := helpers.MustNamespacedVirtualServiceClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 	nsLister := helpers.NewProvidedNamespaceLister([]string{opts.Metadata.GetNamespace()})
 	if opts.Add.Route.ClusterScopedVsClient {
-		vsClient = helpers.MustVirtualServiceClient()
+		vsClient = helpers.MustVirtualServiceClient(opts.Top.Ctx)
 		nsLister = helpers.NewNamespaceLister()
 	}
 	selector := selectionutils.NewVirtualServiceSelector(vsClient, nsLister, defaults.GlooSystem)
@@ -156,7 +156,7 @@ func addRoute(opts *options.Options) error {
 		contextutils.LoggerFrom(opts.Top.Ctx).Infow("Created new default virtual service", zap.Any("virtualService", virtualService))
 	}
 
-	_ = printers.PrintVirtualServices(gatewayv1.VirtualServiceList{virtualService}, opts.Top.Output, opts.Metadata.Namespace)
+	_ = printers.PrintVirtualServices(opts.Top.Ctx, gatewayv1.VirtualServiceList{virtualService}, opts.Top.Output, opts.Metadata.Namespace)
 	return nil
 }
 
diff --git a/projects/gloo/cli/pkg/cmd/add/route_interactive_test.go b/projects/gloo/cli/pkg/cmd/add/route_interactive_test.go
index 6074f889a..57916d2b5 100644
--- a/projects/gloo/cli/pkg/cmd/add/route_interactive_test.go
+++ b/projects/gloo/cli/pkg/cmd/add/route_interactive_test.go
@@ -25,7 +25,7 @@ var _ = Describe("Routes interactive", func() {
 			},
 		}, clients.WriteOpts{})
 
-		upClient := helpers.MustUpstreamClient()
+		upClient := helpers.MustUpstreamClient(nil)
 		upClient.Write(&gloov1.Upstream{
 			Metadata: core.Metadata{
 				Name:      "up",
diff --git a/projects/gloo/cli/pkg/cmd/check/root.go b/projects/gloo/cli/pkg/cmd/check/root.go
index 85d57b3bf..84fb2d428 100644
--- a/projects/gloo/cli/pkg/cmd/check/root.go
+++ b/projects/gloo/cli/pkg/cmd/check/root.go
@@ -71,7 +71,7 @@ func RootCmd(opts *options.Options, optionsFunc ...cliutils.OptionsFunc) *cobra.
 }
 
 func CheckResources(opts *options.Options) (bool, error) {
-	err := checkConnection(opts.Metadata.Namespace)
+	err := checkConnection(opts.Top.Ctx, opts.Metadata.Namespace)
 	if err != nil {
 		return false, err
 	}
@@ -94,50 +94,50 @@ func CheckResources(opts *options.Options) (bool, error) {
 		return false, err
 	}
 
-	namespaces, err := getNamespaces(settings)
+	namespaces, err := getNamespaces(opts.Top.Ctx, settings)
 	if err != nil {
 		return false, err
 	}
 
-	knownUpstreams, ok, err := checkUpstreams(namespaces)
+	knownUpstreams, ok, err := checkUpstreams(opts.Top.Ctx, namespaces)
 	if !ok || err != nil {
 		return ok, err
 	}
 
 	includeUpstreamGroup := doesNotContain(opts.Top.CheckName, "upstreamgroup")
 	if includeUpstreamGroup {
-		ok, err := checkUpstreamGroups(namespaces)
+		ok, err := checkUpstreamGroups(opts.Top.Ctx, namespaces)
 		if !ok || err != nil {
 			return ok, err
 		}
 	}
 
-	knownAuthConfigs, ok, err := checkAuthConfigs(namespaces)
+	knownAuthConfigs, ok, err := checkAuthConfigs(opts.Top.Ctx, namespaces)
 	if !ok || err != nil {
 		return ok, err
 	}
 
-	knownRateLimitConfigs, ok, err := checkRateLimitConfigs(namespaces)
+	knownRateLimitConfigs, ok, err := checkRateLimitConfigs(opts.Top.Ctx, namespaces)
 	if !ok || err != nil {
 		return ok, err
 	}
 
 	includeSecrets := doesNotContain(opts.Top.CheckName, "secrets")
 	if includeSecrets {
-		ok, err := checkSecrets(namespaces)
+		ok, err := checkSecrets(opts.Top.Ctx, namespaces)
 		if !ok || err != nil {
 			return ok, err
 		}
 	}
 
-	ok, err = checkVirtualServices(namespaces, knownUpstreams, knownAuthConfigs, knownRateLimitConfigs)
+	ok, err = checkVirtualServices(opts.Top.Ctx, namespaces, knownUpstreams, knownAuthConfigs, knownRateLimitConfigs)
 	if !ok || err != nil {
 		return ok, err
 	}
 
 	includeGateway := doesNotContain(opts.Top.CheckName, "gateways")
 	if includeGateway {
-		ok, err := checkGateways(namespaces)
+		ok, err := checkGateways(opts.Top.Ctx, namespaces)
 		if !ok || err != nil {
 			return ok, err
 		}
@@ -161,12 +161,12 @@ func CheckResources(opts *options.Options) (bool, error) {
 func getAndCheckDeployments(opts *options.Options) (*appsv1.DeploymentList, bool, error) {
 	fmt.Printf("Checking deployments... ")
 	client := helpers.MustKubeClient()
-	_, err := client.CoreV1().Namespaces().Get(opts.Metadata.Namespace, metav1.GetOptions{})
+	_, err := client.CoreV1().Namespaces().Get(opts.Top.Ctx, opts.Metadata.Namespace, metav1.GetOptions{})
 	if err != nil {
 		fmt.Printf("Gloo namespace does not exist\n")
 		return nil, false, err
 	}
-	deployments, err := client.AppsV1().Deployments(opts.Metadata.Namespace).List(metav1.ListOptions{})
+	deployments, err := client.AppsV1().Deployments(opts.Metadata.Namespace).List(opts.Top.Ctx, metav1.ListOptions{})
 	if err != nil {
 		return nil, false, err
 	}
@@ -237,7 +237,7 @@ func getAndCheckDeployments(opts *options.Options) (*appsv1.DeploymentList, bool
 func checkPods(opts *options.Options) (bool, error) {
 	fmt.Printf("Checking pods... ")
 	client := helpers.MustKubeClient()
-	pods, err := client.CoreV1().Pods(opts.Metadata.Namespace).List(metav1.ListOptions{})
+	pods, err := client.CoreV1().Pods(opts.Metadata.Namespace).List(opts.Top.Ctx, metav1.ListOptions{})
 	if err != nil {
 		return false, err
 	}
@@ -290,23 +290,23 @@ func checkPods(opts *options.Options) (bool, error) {
 }
 
 func getSettings(opts *options.Options) (*v1.Settings, error) {
-	client := helpers.MustNamespacedSettingsClient(opts.Metadata.GetNamespace())
+	client := helpers.MustNamespacedSettingsClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 	return client.Read(opts.Metadata.Namespace, defaults.SettingsName, clients.ReadOpts{})
 }
 
-func getNamespaces(settings *v1.Settings) ([]string, error) {
+func getNamespaces(ctx context.Context, settings *v1.Settings) ([]string, error) {
 	if settings.WatchNamespaces != nil {
 		return settings.WatchNamespaces, nil
 	}
 
-	return helpers.GetNamespaces()
+	return helpers.GetNamespaces(ctx)
 }
 
-func checkUpstreams(namespaces []string) ([]string, bool, error) {
+func checkUpstreams(ctx context.Context, namespaces []string) ([]string, bool, error) {
 	fmt.Printf("Checking upstreams... ")
 	var knownUpstreams []string
 	for _, ns := range namespaces {
-		upstreams, err := helpers.MustNamespacedUpstreamClient(ns).List(ns, clients.ListOpts{})
+		upstreams, err := helpers.MustNamespacedUpstreamClient(ctx, ns).List(ns, clients.ListOpts{})
 		if err != nil {
 			return nil, false, err
 		}
@@ -328,10 +328,10 @@ func checkUpstreams(namespaces []string) ([]string, bool, error) {
 	return knownUpstreams, true, nil
 }
 
-func checkUpstreamGroups(namespaces []string) (bool, error) {
+func checkUpstreamGroups(ctx context.Context, namespaces []string) (bool, error) {
 	fmt.Printf("Checking upstream groups... ")
 	for _, ns := range namespaces {
-		upstreamGroups, err := helpers.MustNamespacedUpstreamGroupClient(ns).List(ns, clients.ListOpts{})
+		upstreamGroups, err := helpers.MustNamespacedUpstreamGroupClient(ctx, ns).List(ns, clients.ListOpts{})
 		if err != nil {
 			return false, err
 		}
@@ -352,11 +352,11 @@ func checkUpstreamGroups(namespaces []string) (bool, error) {
 	return true, nil
 }
 
-func checkAuthConfigs(namespaces []string) ([]string, bool, error) {
+func checkAuthConfigs(ctx context.Context, namespaces []string) ([]string, bool, error) {
 	fmt.Printf("Checking auth configs... ")
 	var knownAuthConfigs []string
 	for _, ns := range namespaces {
-		authConfigs, err := helpers.MustNamespacedAuthConfigClient(ns).List(ns, clients.ListOpts{})
+		authConfigs, err := helpers.MustNamespacedAuthConfigClient(ctx, ns).List(ns, clients.ListOpts{})
 		if err != nil {
 			return nil, false, err
 		}
@@ -378,12 +378,12 @@ func checkAuthConfigs(namespaces []string) ([]string, bool, error) {
 	return knownAuthConfigs, true, nil
 }
 
-func checkRateLimitConfigs(namespaces []string) ([]string, bool, error) {
+func checkRateLimitConfigs(ctx context.Context, namespaces []string) ([]string, bool, error) {
 	fmt.Printf("Checking rate limit configs... ")
 	var knownConfigs []string
 	for _, ns := range namespaces {
 
-		rlcClient, err := helpers.RateLimitConfigClient([]string{ns})
+		rlcClient, err := helpers.RateLimitConfigClient(ctx, []string{ns})
 		if err != nil {
 			if isCrdNotFoundErr(err) {
 				// Just warn. If the CRD is required, the check would have failed on the crashing gloo/gloo-ee pod.
@@ -410,10 +410,10 @@ func checkRateLimitConfigs(namespaces []string) ([]string, bool, error) {
 	return knownConfigs, true, nil
 }
 
-func checkVirtualServices(namespaces, knownUpstreams, knownAuthConfigs, knownRateLimitConfigs []string) (bool, error) {
+func checkVirtualServices(ctx context.Context, namespaces, knownUpstreams, knownAuthConfigs, knownRateLimitConfigs []string) (bool, error) {
 	fmt.Printf("Checking virtual services... ")
 	for _, ns := range namespaces {
-		virtualServices, err := helpers.MustNamespacedVirtualServiceClient(ns).List(ns, clients.ListOpts{})
+		virtualServices, err := helpers.MustNamespacedVirtualServiceClient(ctx, ns).List(ns, clients.ListOpts{})
 		if err != nil {
 			return false, err
 		}
@@ -506,10 +506,10 @@ func checkVirtualServices(namespaces, knownUpstreams, knownAuthConfigs, knownRat
 	return true, nil
 }
 
-func checkGateways(namespaces []string) (bool, error) {
+func checkGateways(ctx context.Context, namespaces []string) (bool, error) {
 	fmt.Printf("Checking gateways... ")
 	for _, ns := range namespaces {
-		gateways, err := helpers.MustNamespacedGatewayClient(ns).List(ns, clients.ListOpts{})
+		gateways, err := helpers.MustNamespacedGatewayClient(ctx, ns).List(ns, clients.ListOpts{})
 		if err != nil {
 			return false, err
 		}
@@ -533,7 +533,7 @@ func checkGateways(namespaces []string) (bool, error) {
 func checkProxies(ctx context.Context, namespaces []string, glooNamespace string, deployments *appsv1.DeploymentList) (bool, error) {
 	fmt.Printf("Checking proxies... ")
 	for _, ns := range namespaces {
-		proxies, err := helpers.MustNamespacedProxyClient(ns).List(ns, clients.ListOpts{})
+		proxies, err := helpers.MustNamespacedProxyClient(ctx, ns).List(ns, clients.ListOpts{})
 		if err != nil {
 			return false, err
 		}
@@ -554,9 +554,9 @@ func checkProxies(ctx context.Context, namespaces []string, glooNamespace string
 	return checkProxiesPromStats(ctx, glooNamespace, deployments)
 }
 
-func checkSecrets(namespaces []string) (bool, error) {
+func checkSecrets(ctx context.Context, namespaces []string) (bool, error) {
 	fmt.Printf("Checking secrets... ")
-	client := helpers.MustSecretClientWithOptions(5*time.Second, namespaces)
+	client := helpers.MustSecretClientWithOptions(ctx, 5*time.Second, namespaces)
 
 	for _, ns := range namespaces {
 		_, err := client.List(ns, clients.ListOpts{})
@@ -583,12 +583,12 @@ func renderNamespaceName(namespace, name string) string {
 
 // Checks whether the cluster that the kubeconfig points at is available
 // The timeout for the kubernetes client is set to a low value to notify the user of the failure
-func checkConnection(ns string) error {
+func checkConnection(ctx context.Context, ns string) error {
 	client, err := helpers.GetKubernetesClientWithTimeout(5 * time.Second)
 	if err != nil {
 		return eris.Wrapf(err, "Could not get kubernetes client")
 	}
-	_, err = client.CoreV1().Namespaces().Get(ns, metav1.GetOptions{})
+	_, err = client.CoreV1().Namespaces().Get(ctx, ns, metav1.GetOptions{})
 	if err != nil {
 		return eris.Wrapf(err, "Could not communicate with kubernetes cluster")
 	}
diff --git a/projects/gloo/cli/pkg/cmd/create/authconfig/authconfig.go b/projects/gloo/cli/pkg/cmd/create/authconfig/authconfig.go
index d48fe2738..f48992f71 100644
--- a/projects/gloo/cli/pkg/cmd/create/authconfig/authconfig.go
+++ b/projects/gloo/cli/pkg/cmd/create/authconfig/authconfig.go
@@ -84,7 +84,7 @@ func createAuthConfig(opts *options.Options, args []string) error {
 	}
 
 	if !opts.Create.DryRun {
-		authConfigClient := helpers.MustNamespacedAuthConfigClient(opts.Metadata.GetNamespace())
+		authConfigClient := helpers.MustNamespacedAuthConfigClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 		ac, err = authConfigClient.Write(ac, clients.WriteOpts{})
 		if err != nil {
 			return err
diff --git a/projects/gloo/cli/pkg/cmd/create/root.go b/projects/gloo/cli/pkg/cmd/create/root.go
index 67d77a1b4..8303c9003 100644
--- a/projects/gloo/cli/pkg/cmd/create/root.go
+++ b/projects/gloo/cli/pkg/cmd/create/root.go
@@ -55,7 +55,7 @@ func RootCmd(opts *options.Options, optionsFunc ...cliutils.OptionsFunc) *cobra.
 			if err != nil {
 				return err
 			}
-			return common.CreateAndPrintObject(yml, opts.Top.Output, opts.Metadata.Namespace)
+			return common.CreateAndPrintObject(opts.Top.Ctx, yml, opts.Top.Output, opts.Metadata.Namespace)
 		},
 	}
 	flagutils.AddFileFlag(cmd.LocalFlags(), &opts.Top.File)
diff --git a/projects/gloo/cli/pkg/cmd/create/secret/aws.go b/projects/gloo/cli/pkg/cmd/create/secret/aws.go
index 125b634e1..f54391c91 100644
--- a/projects/gloo/cli/pkg/cmd/create/secret/aws.go
+++ b/projects/gloo/cli/pkg/cmd/create/secret/aws.go
@@ -102,7 +102,7 @@ func createAwsSecret(ctx context.Context, meta core.Metadata, input options.AwsS
 
 	if !dryRun {
 		var err error
-		secretClient := helpers.MustSecretClient()
+		secretClient := helpers.MustSecretClient(ctx)
 		if secret, err = secretClient.Write(secret, clients.WriteOpts{Ctx: ctx}); err != nil {
 			return err
 		}
diff --git a/projects/gloo/cli/pkg/cmd/create/secret/azure.go b/projects/gloo/cli/pkg/cmd/create/secret/azure.go
index c1ea8fa40..c3b191515 100644
--- a/projects/gloo/cli/pkg/cmd/create/secret/azure.go
+++ b/projects/gloo/cli/pkg/cmd/create/secret/azure.go
@@ -74,7 +74,7 @@ func createAzureSecret(ctx context.Context, meta core.Metadata, input options.Az
 
 	if !dryRun {
 		var err error
-		secretClient := helpers.MustSecretClient()
+		secretClient := helpers.MustSecretClient(ctx)
 		if secret, err = secretClient.Write(secret, clients.WriteOpts{Ctx: ctx}); err != nil {
 			return err
 		}
diff --git a/projects/gloo/cli/pkg/cmd/create/secret/extauth_apikey.go b/projects/gloo/cli/pkg/cmd/create/secret/extauth_apikey.go
index 37f45acfc..e1493005f 100644
--- a/projects/gloo/cli/pkg/cmd/create/secret/extauth_apikey.go
+++ b/projects/gloo/cli/pkg/cmd/create/secret/extauth_apikey.go
@@ -59,7 +59,7 @@ func ExtAuthApiKeyCmd(opts *options.Options) *cobra.Command {
 
 			if opts.Top.Interactive {
 				// and gather any missing args that are available through interactive mode
-				if err := apiKeySecretArgsInteractive(meta, &input); err != nil {
+				if err := apiKeySecretArgsInteractive(opts.Top.Ctx, meta, &input); err != nil {
 					return err
 				}
 			}
@@ -80,8 +80,8 @@ func ExtAuthApiKeyCmd(opts *options.Options) *cobra.Command {
 	return cmd
 }
 
-func apiKeySecretArgsInteractive(meta *core.Metadata, input *apiKeySecret) error {
-	if err := surveyutils.InteractiveNamespace(&meta.Namespace); err != nil {
+func apiKeySecretArgsInteractive(ctx context.Context, meta *core.Metadata, input *apiKeySecret) error {
+	if err := surveyutils.InteractiveNamespace(ctx, &meta.Namespace); err != nil {
 		return err
 	}
 
@@ -140,7 +140,7 @@ func createApiKeySecret(ctx context.Context, meta core.Metadata, input apiKeySec
 	}
 
 	if !dryRun {
-		secretClient := helpers.MustSecretClient()
+		secretClient := helpers.MustSecretClient(ctx)
 		if _, err := secretClient.Write(secret, clients.WriteOpts{Ctx: ctx}); err != nil {
 			return err
 		}
diff --git a/projects/gloo/cli/pkg/cmd/create/secret/extauth_apikey_test.go b/projects/gloo/cli/pkg/cmd/create/secret/extauth_apikey_test.go
index ae2054cc2..032b48b08 100644
--- a/projects/gloo/cli/pkg/cmd/create/secret/extauth_apikey_test.go
+++ b/projects/gloo/cli/pkg/cmd/create/secret/extauth_apikey_test.go
@@ -1,6 +1,7 @@
 package secret_test
 
 import (
+	"context"
 	"fmt"
 
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
@@ -18,15 +19,20 @@ import (
 
 var _ = Describe("ExtauthApiKey", func() {
 
+	var (
+		ctx context.Context
+	)
+
 	BeforeEach(func() {
 		helpers.UseMemoryClients()
+		ctx, _ = context.WithCancel(context.Background())
 	})
 
 	It("should create secret without labels", func() {
 		err := testutils.Glooctl("create secret apikey --name user --namespace gloo-system --apikey secretApiKey")
 		Expect(err).NotTo(HaveOccurred())
 
-		secret, err := helpers.MustSecretClient().Read("gloo-system", "user", clients.ReadOpts{})
+		secret, err := helpers.MustSecretClient(ctx).Read("gloo-system", "user", clients.ReadOpts{})
 		Expect(err).NotTo(HaveOccurred())
 
 		Expect(secret.GetApiKey()).To(Equal(&extauthpb.ApiKeySecret{
@@ -38,7 +44,7 @@ var _ = Describe("ExtauthApiKey", func() {
 		err := testutils.Glooctl("create secret apikey --name user --namespace gloo-system --apikey secretApiKey --apikey-labels k1=v1,k2=v2")
 		Expect(err).NotTo(HaveOccurred())
 
-		secret, err := helpers.MustSecretClient().Read("gloo-system", "user", clients.ReadOpts{})
+		secret, err := helpers.MustSecretClient(ctx).Read("gloo-system", "user", clients.ReadOpts{})
 		Expect(err).NotTo(HaveOccurred())
 
 		Expect(secret.GetApiKey()).To(Equal(&extauthpb.ApiKeySecret{
diff --git a/projects/gloo/cli/pkg/cmd/create/secret/extauth_oauth.go b/projects/gloo/cli/pkg/cmd/create/secret/extauth_oauth.go
index 3f598377d..4f8a06f21 100644
--- a/projects/gloo/cli/pkg/cmd/create/secret/extauth_oauth.go
+++ b/projects/gloo/cli/pkg/cmd/create/secret/extauth_oauth.go
@@ -36,7 +36,7 @@ func ExtAuthOathCmd(opts *options.Options) *cobra.Command {
 
 			if opts.Top.Interactive {
 				// and gather any missing args that are available through interactive mode
-				if err := oauthSecretArgsInteractive(meta, &input); err != nil {
+				if err := oauthSecretArgsInteractive(opts.Top.Ctx, meta, &input); err != nil {
 					return err
 				}
 			}
@@ -55,8 +55,8 @@ func ExtAuthOathCmd(opts *options.Options) *cobra.Command {
 	return cmd
 }
 
-func oauthSecretArgsInteractive(meta *core.Metadata, input *extauth.OauthSecret) error {
-	if err := surveyutils.InteractiveNamespace(&meta.Namespace); err != nil {
+func oauthSecretArgsInteractive(ctx context.Context, meta *core.Metadata, input *extauth.OauthSecret) error {
+	if err := surveyutils.InteractiveNamespace(ctx, &meta.Namespace); err != nil {
 		return err
 	}
 
@@ -84,7 +84,7 @@ func createOauthSecret(ctx context.Context, meta core.Metadata, input extauth.Oa
 	}
 
 	if !dryRun {
-		secretClient := helpers.MustSecretClient()
+		secretClient := helpers.MustSecretClient(ctx)
 		var err error
 		if secret, err = secretClient.Write(secret, clients.WriteOpts{Ctx: ctx}); err != nil {
 			return err
diff --git a/projects/gloo/cli/pkg/cmd/create/secret/extauth_oauth_test.go b/projects/gloo/cli/pkg/cmd/create/secret/extauth_oauth_test.go
index 9e0977be0..b9016e16e 100644
--- a/projects/gloo/cli/pkg/cmd/create/secret/extauth_oauth_test.go
+++ b/projects/gloo/cli/pkg/cmd/create/secret/extauth_oauth_test.go
@@ -1,6 +1,7 @@
 package secret_test
 
 import (
+	"context"
 	"fmt"
 
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
@@ -17,15 +18,20 @@ import (
 
 var _ = Describe("ExtauthOauth", func() {
 
+	var (
+		ctx context.Context
+	)
+
 	BeforeEach(func() {
 		helpers.UseMemoryClients()
+		ctx, _ = context.WithCancel(context.Background())
 	})
 
 	It("should create secret", func() {
 		err := testutils.Glooctl("create secret oauth --name oauth --namespace gloo-system --client-secret 123")
 		Expect(err).NotTo(HaveOccurred())
 
-		secret, err := helpers.MustSecretClient().Read("gloo-system", "oauth", clients.ReadOpts{})
+		secret, err := helpers.MustSecretClient(ctx).Read("gloo-system", "oauth", clients.ReadOpts{})
 		Expect(err).NotTo(HaveOccurred())
 
 		Expect(secret.GetOauth()).To(Equal(&extauthpb.OauthSecret{ClientSecret: "123"}))
diff --git a/projects/gloo/cli/pkg/cmd/create/secret/header.go b/projects/gloo/cli/pkg/cmd/create/secret/header.go
index 7477228c7..95a23c43b 100644
--- a/projects/gloo/cli/pkg/cmd/create/secret/header.go
+++ b/projects/gloo/cli/pkg/cmd/create/secret/header.go
@@ -73,7 +73,7 @@ func createHeaderSecret(ctx context.Context, meta core.Metadata, input options.H
 
 	if !dryRun {
 		var err error
-		secretClient := helpers.MustSecretClientWithOptions(0, []string{meta.Namespace})
+		secretClient := helpers.MustSecretClientWithOptions(ctx, 0, []string{meta.Namespace})
 		if secret, err = secretClient.Write(secret, clients.WriteOpts{Ctx: ctx}); err != nil {
 			return err
 		}
diff --git a/projects/gloo/cli/pkg/cmd/create/secret/secret_test.go b/projects/gloo/cli/pkg/cmd/create/secret/secret_test.go
index 1a41d4641..26267db87 100644
--- a/projects/gloo/cli/pkg/cmd/create/secret/secret_test.go
+++ b/projects/gloo/cli/pkg/cmd/create/secret/secret_test.go
@@ -1,6 +1,7 @@
 package secret_test
 
 import (
+	"context"
 	"fmt"
 	"os"
 
@@ -21,8 +22,13 @@ import (
 
 var _ = Describe("Secret", func() {
 
+	var (
+		ctx context.Context
+	)
+
 	BeforeEach(func() {
 		helpers.UseMemoryClients()
+		ctx, _ = context.WithCancel(context.Background())
 	})
 
 	AfterEach(func() {
@@ -48,7 +54,7 @@ var _ = Describe("Secret", func() {
 			err := testutils.Glooctl(command)
 			Expect(err).NotTo(HaveOccurred())
 
-			secret, err := helpers.MustSecretClient().Read(namespace, "test", clients.ReadOpts{})
+			secret, err := helpers.MustSecretClient(ctx).Read(namespace, "test", clients.ReadOpts{})
 			Expect(err).NotTo(HaveOccurred())
 
 			aws := v1.AwsSecret{
@@ -111,7 +117,7 @@ type: Opaque
 			err := testutils.Glooctl(command)
 			Expect(err).NotTo(HaveOccurred())
 
-			secret, err := helpers.MustSecretClient().Read(namespace, "test", clients.ReadOpts{})
+			secret, err := helpers.MustSecretClient(ctx).Read(namespace, "test", clients.ReadOpts{})
 			Expect(err).NotTo(HaveOccurred())
 
 			azure := v1.AzureSecret{
@@ -155,7 +161,7 @@ metadata:
 			err := testutils.Glooctl(command)
 			Expect(err).NotTo(HaveOccurred())
 
-			secret, err := helpers.MustSecretClient().Read(namespace, "test", clients.ReadOpts{})
+			secret, err := helpers.MustSecretClient(ctx).Read(namespace, "test", clients.ReadOpts{})
 			Expect(err).NotTo(HaveOccurred())
 
 			header := v1.HeaderSecret{
@@ -188,7 +194,7 @@ metadata:
 				RootCa: "foo",
 			}
 
-			secret, err := helpers.MustSecretClient().Read("gloo-system", "valid", clients.ReadOpts{})
+			secret, err := helpers.MustSecretClient(ctx).Read("gloo-system", "valid", clients.ReadOpts{})
 			Expect(err).NotTo(HaveOccurred())
 			Expect(*secret.GetTls()).To(Equal(tls))
 		})
@@ -231,14 +237,14 @@ metadata:
 						err := testutils.Glooctl(args)
 						Expect(err).NotTo(HaveOccurred())
 
-						secret, err := helpers.MustSecretClient().Read("gloo-system", kp.resourceName, clients.ReadOpts{})
+						secret, err := helpers.MustSecretClient(ctx).Read("gloo-system", kp.resourceName, clients.ReadOpts{})
 						Expect(err).NotTo(HaveOccurred())
 						Expect(*secret.GetTls()).To(Equal(tls))
 					} else {
 						err := testutils.Glooctl(args)
 						Expect(err).To(HaveOccurred())
 
-						_, err = helpers.MustSecretClient().Read("gloo-system", kp.resourceName, clients.ReadOpts{})
+						_, err = helpers.MustSecretClient(ctx).Read("gloo-system", kp.resourceName, clients.ReadOpts{})
 						Expect(err).To(HaveOccurred())
 					}
 
diff --git a/projects/gloo/cli/pkg/cmd/create/secret/tls.go b/projects/gloo/cli/pkg/cmd/create/secret/tls.go
index 5347ff715..3439a227b 100644
--- a/projects/gloo/cli/pkg/cmd/create/secret/tls.go
+++ b/projects/gloo/cli/pkg/cmd/create/secret/tls.go
@@ -93,7 +93,7 @@ func createTlsSecret(ctx context.Context, meta core.Metadata, input options.TlsS
 
 	if !dryRun {
 		var err error
-		secretClient := helpers.MustSecretClient()
+		secretClient := helpers.MustSecretClient(ctx)
 		if secret, err = secretClient.Write(secret, clients.WriteOpts{Ctx: ctx}); err != nil {
 			return err
 		}
diff --git a/projects/gloo/cli/pkg/cmd/create/upstream.go b/projects/gloo/cli/pkg/cmd/create/upstream.go
index 71c31fb94..ac9b094be 100644
--- a/projects/gloo/cli/pkg/cmd/create/upstream.go
+++ b/projects/gloo/cli/pkg/cmd/create/upstream.go
@@ -56,7 +56,7 @@ func Upstream(opts *options.Options, optionsFunc ...cliutils.OptionsFunc) *cobra
 			if !opts.Top.Interactive {
 				return errors.Errorf(EmptyUpstreamCreateError)
 			}
-			if err := surveyutils.AddUpstreamFlagsInteractive(&opts.Create.InputUpstream); err != nil {
+			if err := surveyutils.AddUpstreamFlagsInteractive(opts.Top.Ctx, &opts.Create.InputUpstream); err != nil {
 				return err
 			}
 			if err := argsutils.MetadataArgsParse(opts, args); err != nil {
@@ -135,7 +135,7 @@ func createUpstreamSubcommand(opts *options.Options, upstreamType, short, long s
 			}
 			opts.Create.InputUpstream.UpstreamType = upstreamType
 			if opts.Top.Interactive {
-				if err := surveyutils.AddUpstreamFlagsInteractive(&opts.Create.InputUpstream); err != nil {
+				if err := surveyutils.AddUpstreamFlagsInteractive(opts.Top.Ctx, &opts.Create.InputUpstream); err != nil {
 					return err
 				}
 			}
@@ -156,7 +156,7 @@ func createUpstream(opts *options.Options) error {
 	}
 
 	if !opts.Create.DryRun {
-		us, err = helpers.MustNamespacedUpstreamClient(opts.Metadata.GetNamespace()).Write(us, clients.WriteOpts{})
+		us, err = helpers.MustNamespacedUpstreamClient(opts.Top.Ctx, opts.Metadata.GetNamespace()).Write(us, clients.WriteOpts{})
 		if err != nil {
 			return err
 		}
diff --git a/projects/gloo/cli/pkg/cmd/create/upstream_interactive_test.go b/projects/gloo/cli/pkg/cmd/create/upstream_interactive_test.go
index 771ef4cc1..c352ac97f 100644
--- a/projects/gloo/cli/pkg/cmd/create/upstream_interactive_test.go
+++ b/projects/gloo/cli/pkg/cmd/create/upstream_interactive_test.go
@@ -1,6 +1,8 @@
 package create_test
 
 import (
+	"context"
+
 	. "github.com/onsi/ginkgo"
 	. "github.com/onsi/gomega"
 	"github.com/solo-io/gloo/pkg/cliutil/testutil"
@@ -22,8 +24,13 @@ var _ = Describe("Upstream Interactive Mode", func() {
 		azureSecretPrompt    = "Choose an Azure credentials secret to link to this upstream"
 	)
 
+	var (
+		ctx context.Context
+	)
+
 	BeforeEach(func() {
 		helpers.UseMemoryClients()
+		ctx, _ = context.WithCancel(context.Background())
 	})
 
 	It("should not be allowed for Kube", func() {
@@ -33,7 +40,7 @@ var _ = Describe("Upstream Interactive Mode", func() {
 			c.ExpectEOF()
 		}, func() {
 			var upstream options.InputUpstream
-			err := AddUpstreamFlagsInteractive(&upstream)
+			err := AddUpstreamFlagsInteractive(ctx, &upstream)
 			Expect(err).To(HaveOccurred())
 			Expect(err.Error()).To(Equal("interactive mode not currently available for type kube"))
 		})
@@ -46,7 +53,7 @@ var _ = Describe("Upstream Interactive Mode", func() {
 			c.ExpectEOF()
 		}, func() {
 			var upstream options.InputUpstream
-			err := AddUpstreamFlagsInteractive(&upstream)
+			err := AddUpstreamFlagsInteractive(ctx, &upstream)
 			Expect(err).To(HaveOccurred())
 			Expect(err.Error()).To(Equal("interactive mode not currently available for type consul"))
 		})
@@ -61,7 +68,7 @@ var _ = Describe("Upstream Interactive Mode", func() {
 			c.ExpectEOF()
 		}, func() {
 			var upstream options.InputUpstream
-			err := AddUpstreamFlagsInteractive(&upstream)
+			err := AddUpstreamFlagsInteractive(ctx, &upstream)
 			Expect(err).To(HaveOccurred())
 			Expect(err.Error()).To(Equal("no AWS secrets found. create an AWS credentials secret using " +
 				"glooctl create secret aws --help"))
@@ -81,7 +88,7 @@ var _ = Describe("Upstream Interactive Mode", func() {
 		)
 
 		BeforeEach(func() {
-			secretClient := helpers.MustSecretClient()
+			secretClient := helpers.MustSecretClient(ctx)
 			secret := &gloov1.Secret{
 				Metadata: core.Metadata{
 					Name:      awsSecretName,
@@ -114,7 +121,7 @@ var _ = Describe("Upstream Interactive Mode", func() {
 				c.ExpectEOF()
 			}, func() {
 				var upstream options.InputUpstream
-				err := AddUpstreamFlagsInteractive(&upstream)
+				err := AddUpstreamFlagsInteractive(ctx, &upstream)
 				Expect(err).NotTo(HaveOccurred())
 				Expect(upstream.Aws.Secret).To(Equal(localSecretRef))
 				Expect(upstream.Aws.Region).To(Equal(defaultAwsRegion))
@@ -133,7 +140,7 @@ var _ = Describe("Upstream Interactive Mode", func() {
 				c.ExpectEOF()
 			}, func() {
 				var upstream options.InputUpstream
-				err := AddUpstreamFlagsInteractive(&upstream)
+				err := AddUpstreamFlagsInteractive(ctx, &upstream)
 				Expect(err).NotTo(HaveOccurred())
 				Expect(upstream.Aws.Secret).To(Equal(localSecretRef))
 				Expect(upstream.Aws.Region).To(Equal("custom-region"))
@@ -150,7 +157,7 @@ var _ = Describe("Upstream Interactive Mode", func() {
 			c.ExpectEOF()
 		}, func() {
 			var upstream options.InputUpstream
-			err := AddUpstreamFlagsInteractive(&upstream)
+			err := AddUpstreamFlagsInteractive(ctx, &upstream)
 			Expect(err).NotTo(HaveOccurred())
 			Expect(upstream.Static.Hosts).To(BeNil())
 		})
@@ -169,7 +176,7 @@ var _ = Describe("Upstream Interactive Mode", func() {
 			c.ExpectEOF()
 		}, func() {
 			var upstream options.InputUpstream
-			err := AddUpstreamFlagsInteractive(&upstream)
+			err := AddUpstreamFlagsInteractive(ctx, &upstream)
 			Expect(err).NotTo(HaveOccurred())
 			Expect(upstream.Static.Hosts).To(BeEquivalentTo([]string{"foo", "bar"}))
 		})
@@ -184,7 +191,7 @@ var _ = Describe("Upstream Interactive Mode", func() {
 			c.ExpectEOF()
 		}, func() {
 			var upstream options.InputUpstream
-			err := AddUpstreamFlagsInteractive(&upstream)
+			err := AddUpstreamFlagsInteractive(ctx, &upstream)
 			Expect(err).To(HaveOccurred())
 			Expect(err.Error()).To(Equal("no Azure secrets found. create an Azure credentials secret using " +
 				"glooctl create secret azure --help"))
@@ -203,7 +210,7 @@ var _ = Describe("Upstream Interactive Mode", func() {
 		)
 
 		BeforeEach(func() {
-			secretClient := helpers.MustSecretClient()
+			secretClient := helpers.MustSecretClient(ctx)
 			secret := &gloov1.Secret{
 				Metadata: core.Metadata{
 					Name:      azureSecretName,
@@ -238,7 +245,7 @@ var _ = Describe("Upstream Interactive Mode", func() {
 				c.ExpectEOF()
 			}, func() {
 				var upstream options.InputUpstream
-				err := AddUpstreamFlagsInteractive(&upstream)
+				err := AddUpstreamFlagsInteractive(ctx, &upstream)
 				Expect(err).NotTo(HaveOccurred())
 				Expect(upstream.Azure.Secret).To(Equal(localSecretRef))
 				Expect(upstream.Azure.FunctionAppName).To(Equal(""))
@@ -258,7 +265,7 @@ var _ = Describe("Upstream Interactive Mode", func() {
 				c.ExpectEOF()
 			}, func() {
 				var upstream options.InputUpstream
-				err := AddUpstreamFlagsInteractive(&upstream)
+				err := AddUpstreamFlagsInteractive(ctx, &upstream)
 				Expect(err).NotTo(HaveOccurred())
 				Expect(upstream.Azure.Secret).To(Equal(localSecretRef))
 				Expect(upstream.Azure.FunctionAppName).To(Equal("custom"))
diff --git a/projects/gloo/cli/pkg/cmd/create/upstreamgroup.go b/projects/gloo/cli/pkg/cmd/create/upstreamgroup.go
index fd53c0469..a1ee26f16 100644
--- a/projects/gloo/cli/pkg/cmd/create/upstreamgroup.go
+++ b/projects/gloo/cli/pkg/cmd/create/upstreamgroup.go
@@ -1,6 +1,7 @@
 package create
 
 import (
+	"context"
 	"strconv"
 	"strings"
 
@@ -47,7 +48,7 @@ func UpstreamGroup(opts *options.Options, optionsFunc ...cliutils.OptionsFunc) *
 				return errors.Errorf(EmptyUpstreamGroupCreateError)
 			}
 			if len(opts.Create.InputUpstreamGroup.WeightedDestinations.Entries) == 0 {
-				if err := surveyutils.AddUpstreamGroupFlagsInteractive(&opts.Create.InputUpstreamGroup); err != nil {
+				if err := surveyutils.AddUpstreamGroupFlagsInteractive(opts.Top.Ctx, &opts.Create.InputUpstreamGroup); err != nil {
 					return err
 				}
 			}
@@ -75,7 +76,7 @@ func createUpstreamGroup(opts *options.Options) error {
 	}
 
 	if !opts.Create.DryRun {
-		ug, err = helpers.MustNamespacedUpstreamGroupClient(opts.Metadata.GetNamespace()).Write(ug, clients.WriteOpts{})
+		ug, err = helpers.MustNamespacedUpstreamGroupClient(opts.Top.Ctx, opts.Metadata.GetNamespace()).Write(ug, clients.WriteOpts{})
 		if err != nil {
 			return err
 		}
@@ -87,7 +88,7 @@ func createUpstreamGroup(opts *options.Options) error {
 }
 
 func upstreamGroupFromOpts(opts *options.Options) (*v1.UpstreamGroup, error) {
-	dest, err := upstreamGroupDestinationsFromOpts(opts.Create.InputUpstreamGroup)
+	dest, err := upstreamGroupDestinationsFromOpts(opts.Top.Ctx, opts.Create.InputUpstreamGroup)
 	if err != nil {
 		return nil, errors.Wrapf(err, "invalid upstream spec")
 	}
@@ -97,12 +98,12 @@ func upstreamGroupFromOpts(opts *options.Options) (*v1.UpstreamGroup, error) {
 	}, nil
 }
 
-func upstreamGroupDestinationsFromOpts(input options.InputUpstreamGroup) ([]*v1.WeightedDestination, error) {
+func upstreamGroupDestinationsFromOpts(ctx context.Context, input options.InputUpstreamGroup) ([]*v1.WeightedDestination, error) {
 	// collect upstreams list
 	ussByKey := make(map[string]*v1.Upstream)
 	var usKeys []string
-	for _, ns := range helpers.MustGetNamespaces() {
-		usList, err := helpers.MustNamespacedUpstreamClient(ns).List(ns, clients.ListOpts{})
+	for _, ns := range helpers.MustGetNamespaces(ctx) {
+		usList, err := helpers.MustNamespacedUpstreamClient(ctx, ns).List(ns, clients.ListOpts{})
 		if err != nil {
 			return nil, err
 		}
diff --git a/projects/gloo/cli/pkg/cmd/create/virtualservice.go b/projects/gloo/cli/pkg/cmd/create/virtualservice.go
index db1073626..ad5756f04 100644
--- a/projects/gloo/cli/pkg/cmd/create/virtualservice.go
+++ b/projects/gloo/cli/pkg/cmd/create/virtualservice.go
@@ -79,14 +79,14 @@ func createVirtualService(opts *options.Options, args []string) error {
 	}
 
 	if !opts.Create.DryRun {
-		virtualServiceClient := helpers.MustNamespacedVirtualServiceClient(opts.Metadata.GetNamespace())
+		virtualServiceClient := helpers.MustNamespacedVirtualServiceClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 		vs, err = virtualServiceClient.Write(vs, clients.WriteOpts{})
 		if err != nil {
 			return err
 		}
 	}
 
-	printers.PrintVirtualServices(v1.VirtualServiceList{vs}, opts.Top.Output, opts.Metadata.Namespace)
+	printers.PrintVirtualServices(opts.Top.Ctx, v1.VirtualServiceList{vs}, opts.Top.Output, opts.Metadata.Namespace)
 
 	return nil
 }
diff --git a/projects/gloo/cli/pkg/cmd/dashboard/root.go b/projects/gloo/cli/pkg/cmd/dashboard/root.go
index ca326ccad..e73d4a8a7 100644
--- a/projects/gloo/cli/pkg/cmd/dashboard/root.go
+++ b/projects/gloo/cli/pkg/cmd/dashboard/root.go
@@ -42,7 +42,7 @@ func RootCmd(opts *options.Options, optionsFunc ...cliutils.OptionsFunc) *cobra.
 				return err
 			}
 
-			deployment, err := client.AppsV1().Deployments(opts.Metadata.Namespace).Get("api-server", metav1.GetOptions{})
+			deployment, err := client.AppsV1().Deployments(opts.Metadata.Namespace).Get(opts.Top.Ctx, "api-server", metav1.GetOptions{})
 			if err != nil {
 				if apierrors.IsNotFound(err) {
 					fmt.Printf("No Gloo dashboard found as part of the installation in namespace %s. The full dashboard is part of Gloo Enterprise by default. "+
diff --git a/projects/gloo/cli/pkg/cmd/debug/debug.go b/projects/gloo/cli/pkg/cmd/debug/debug.go
index c762d08a3..ba999e02d 100644
--- a/projects/gloo/cli/pkg/cmd/debug/debug.go
+++ b/projects/gloo/cli/pkg/cmd/debug/debug.go
@@ -161,7 +161,7 @@ func displayLogs(w io.Writer, logs strings.Builder) error {
 }
 
 func setup(opts *options.Options) ([]*debugutils.LogsResponse, error) {
-	pods, err := helpers.MustKubeClient().CoreV1().Pods(opts.Metadata.Namespace).List(metav1.ListOptions{
+	pods, err := helpers.MustKubeClient().CoreV1().Pods(opts.Metadata.Namespace).List(opts.Top.Ctx, metav1.ListOptions{
 		LabelSelector: "gloo",
 	})
 	if err != nil {
@@ -175,10 +175,10 @@ func setup(opts *options.Options) ([]*debugutils.LogsResponse, error) {
 	if err != nil {
 		return nil, err
 	}
-	logRequests, err := logCollector.GetLogRequests(resources)
+	logRequests, err := logCollector.GetLogRequests(opts.Top.Ctx, resources)
 	if err != nil {
 		return nil, err
 	}
 
-	return logCollector.LogRequestBuilder.StreamLogs(logRequests)
+	return logCollector.LogRequestBuilder.StreamLogs(opts.Top.Ctx, logRequests)
 }
diff --git a/projects/gloo/cli/pkg/cmd/del/proxy.go b/projects/gloo/cli/pkg/cmd/del/proxy.go
index e1d5e5b1b..a215b398d 100644
--- a/projects/gloo/cli/pkg/cmd/del/proxy.go
+++ b/projects/gloo/cli/pkg/cmd/del/proxy.go
@@ -22,7 +22,7 @@ func Proxy(opts *options.Options, optionsFunc ...cliutils.OptionsFunc) *cobra.Co
 		Long:    "usage: glooctl delete proxy [NAME] [--namespace=namespace]",
 		RunE: func(cmd *cobra.Command, args []string) error {
 			name := common.GetName(args, opts)
-			if err := helpers.MustNamespacedProxyClient(opts.Metadata.GetNamespace()).Delete(opts.Metadata.Namespace, name,
+			if err := helpers.MustNamespacedProxyClient(opts.Top.Ctx, opts.Metadata.GetNamespace()).Delete(opts.Metadata.Namespace, name,
 				clients.DeleteOpts{Ctx: opts.Top.Ctx}); err != nil {
 				return err
 			}
diff --git a/projects/gloo/cli/pkg/cmd/del/upstream.go b/projects/gloo/cli/pkg/cmd/del/upstream.go
index 2ad2ca089..056f9e281 100644
--- a/projects/gloo/cli/pkg/cmd/del/upstream.go
+++ b/projects/gloo/cli/pkg/cmd/del/upstream.go
@@ -22,7 +22,7 @@ func Upstream(opts *options.Options, optionsFunc ...cliutils.OptionsFunc) *cobra
 		Long:    "usage: glooctl delete upstream [NAME] [--namespace=namespace]",
 		RunE: func(cmd *cobra.Command, args []string) error {
 			name := common.GetName(args, opts)
-			if err := helpers.MustNamespacedUpstreamClient(opts.Metadata.GetNamespace()).Delete(opts.Metadata.Namespace, name,
+			if err := helpers.MustNamespacedUpstreamClient(opts.Top.Ctx, opts.Metadata.GetNamespace()).Delete(opts.Metadata.Namespace, name,
 				clients.DeleteOpts{Ctx: opts.Top.Ctx}); err != nil {
 				return err
 			}
diff --git a/projects/gloo/cli/pkg/cmd/del/upstreamgroup.go b/projects/gloo/cli/pkg/cmd/del/upstreamgroup.go
index ed760a2e9..70cfe8297 100644
--- a/projects/gloo/cli/pkg/cmd/del/upstreamgroup.go
+++ b/projects/gloo/cli/pkg/cmd/del/upstreamgroup.go
@@ -22,7 +22,7 @@ func UpstreamGroup(opts *options.Options, optionsFunc ...cliutils.OptionsFunc) *
 		Long:    "usage: glooctl delete upstreamgroup [NAME] [--namespace=namespace]",
 		RunE: func(cmd *cobra.Command, args []string) error {
 			name := common.GetName(args, opts)
-			if err := helpers.MustNamespacedUpstreamGroupClient(opts.Metadata.GetNamespace()).Delete(opts.Metadata.Namespace, name,
+			if err := helpers.MustNamespacedUpstreamGroupClient(opts.Top.Ctx, opts.Metadata.GetNamespace()).Delete(opts.Metadata.Namespace, name,
 				clients.DeleteOpts{Ctx: opts.Top.Ctx}); err != nil {
 				return err
 			}
diff --git a/projects/gloo/cli/pkg/cmd/del/virtualservice.go b/projects/gloo/cli/pkg/cmd/del/virtualservice.go
index 27844745a..f05007bfe 100644
--- a/projects/gloo/cli/pkg/cmd/del/virtualservice.go
+++ b/projects/gloo/cli/pkg/cmd/del/virtualservice.go
@@ -22,7 +22,7 @@ func VirtualService(opts *options.Options, optionsFunc ...cliutils.OptionsFunc)
 		Long:    "usage: glooctl delete virtualservice [NAME] [--namespace=namespace]",
 		RunE: func(cmd *cobra.Command, args []string) error {
 			name := common.GetName(args, opts)
-			if err := helpers.MustNamespacedVirtualServiceClient(opts.Metadata.GetNamespace()).Delete(opts.Metadata.Namespace, name,
+			if err := helpers.MustNamespacedVirtualServiceClient(opts.Top.Ctx, opts.Metadata.GetNamespace()).Delete(opts.Metadata.Namespace, name,
 				clients.DeleteOpts{Ctx: opts.Top.Ctx}); err != nil {
 				return err
 			}
diff --git a/projects/gloo/cli/pkg/cmd/edit/route/options/options.go b/projects/gloo/cli/pkg/cmd/edit/route/options/options.go
index 0a4c30a81..ac14e2ef8 100644
--- a/projects/gloo/cli/pkg/cmd/edit/route/options/options.go
+++ b/projects/gloo/cli/pkg/cmd/edit/route/options/options.go
@@ -17,7 +17,7 @@ type RouteEditInput struct {
 }
 
 func UpdateRoute(opts *RouteEditInput, modify func(*gatewayv1.Route) error) error {
-	vsClient := helpers.MustNamespacedVirtualServiceClient(opts.Metadata.GetNamespace())
+	vsClient := helpers.MustNamespacedVirtualServiceClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 	vs, err := vsClient.Read(opts.Metadata.Namespace, opts.Metadata.Name, clients.ReadOpts{})
 	if err != nil {
 		return errors.Wrapf(err, "Error reading vhost")
@@ -46,7 +46,7 @@ func UpdateRoute(opts *RouteEditInput, modify func(*gatewayv1.Route) error) erro
 
 func EditRoutePreRunE(opts *RouteEditInput) error {
 	if opts.Top.Interactive {
-		vsclient := helpers.MustNamespacedVirtualServiceClient(opts.Metadata.GetNamespace())
+		vsclient := helpers.MustNamespacedVirtualServiceClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 		vsvc, err := vsclient.Read(opts.Metadata.Namespace, opts.Metadata.Name, clients.ReadOpts{})
 		if err != nil {
 			return err
diff --git a/projects/gloo/cli/pkg/cmd/edit/settings/extauth.go b/projects/gloo/cli/pkg/cmd/edit/settings/extauth.go
index b15ff52ee..389cbff39 100644
--- a/projects/gloo/cli/pkg/cmd/edit/settings/extauth.go
+++ b/projects/gloo/cli/pkg/cmd/edit/settings/extauth.go
@@ -46,7 +46,7 @@ func ExtAuthConfig(opts *editOptions.EditOptions, optionsFunc ...cliutils.Option
 }
 
 func editSettings(opts *editOptions.EditOptions, optsExt *options.OIDCSettings, args []string) error {
-	settingsClient := helpers.MustNamespacedSettingsClient(opts.Metadata.GetNamespace())
+	settingsClient := helpers.MustNamespacedSettingsClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 	settings, err := settingsClient.Read(opts.Metadata.Namespace, opts.Metadata.Name, clients.ReadOpts{})
 	if err != nil {
 		return errors.Wrapf(err, "Error reading settings")
diff --git a/projects/gloo/cli/pkg/cmd/edit/settings/ratelimit/custom_server_config.go b/projects/gloo/cli/pkg/cmd/edit/settings/ratelimit/custom_server_config.go
index 83285dde3..a017add04 100644
--- a/projects/gloo/cli/pkg/cmd/edit/settings/ratelimit/custom_server_config.go
+++ b/projects/gloo/cli/pkg/cmd/edit/settings/ratelimit/custom_server_config.go
@@ -33,7 +33,7 @@ func RateLimitCustomConfig(opts *editOptions.EditOptions, optionsFunc ...cliutil
 }
 
 func edit(opts *editOptions.EditOptions) error {
-	settingsClient := helpers.MustNamespacedSettingsClient(opts.Metadata.GetNamespace())
+	settingsClient := helpers.MustNamespacedSettingsClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 	settings, err := settingsClient.Read(opts.Metadata.Namespace, opts.Metadata.Name, clients.ReadOpts{})
 	if err != nil {
 		return errors.Wrapf(err, "Error reading settings")
diff --git a/projects/gloo/cli/pkg/cmd/edit/settings/ratelimit/ratelimit.go b/projects/gloo/cli/pkg/cmd/edit/settings/ratelimit/ratelimit.go
index 95c71a842..365dfe645 100644
--- a/projects/gloo/cli/pkg/cmd/edit/settings/ratelimit/ratelimit.go
+++ b/projects/gloo/cli/pkg/cmd/edit/settings/ratelimit/ratelimit.go
@@ -49,7 +49,7 @@ func RateLimitConfig(opts *editOptions.EditOptions, optionsFunc ...cliutils.Opti
 }
 
 func editSettings(opts *editOptions.EditOptions, optsExt *RateLimitSettings, args []string) error {
-	settingsClient := helpers.MustNamespacedSettingsClient(opts.Metadata.GetNamespace())
+	settingsClient := helpers.MustNamespacedSettingsClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 	settings, err := settingsClient.Read(opts.Metadata.Namespace, opts.Metadata.Name, clients.ReadOpts{})
 	if err != nil {
 		return errors.Wrapf(err, "Error reading settings")
diff --git a/projects/gloo/cli/pkg/cmd/edit/upstream/root.go b/projects/gloo/cli/pkg/cmd/edit/upstream/root.go
index 8d89fab3f..bab5a9959 100644
--- a/projects/gloo/cli/pkg/cmd/edit/upstream/root.go
+++ b/projects/gloo/cli/pkg/cmd/edit/upstream/root.go
@@ -71,7 +71,7 @@ func addEditUpstreamInteractiveFlags(opts *EditUpstream) error {
 }
 
 func editUpstream(opts *options.EditOptions, optsExt *EditUpstream, args []string) error {
-	upClient := helpers.MustNamespacedUpstreamClient(opts.Metadata.GetNamespace())
+	upClient := helpers.MustNamespacedUpstreamClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 	up, err := upClient.Read(opts.Metadata.Namespace, opts.Metadata.Name, clients.ReadOpts{})
 	if err != nil {
 		return errors.Wrapf(err, "Error reading upstream")
diff --git a/projects/gloo/cli/pkg/cmd/edit/virtualservice/custom_envoy_config.go b/projects/gloo/cli/pkg/cmd/edit/virtualservice/custom_envoy_config.go
index 318aab249..ec5072b08 100644
--- a/projects/gloo/cli/pkg/cmd/edit/virtualservice/custom_envoy_config.go
+++ b/projects/gloo/cli/pkg/cmd/edit/virtualservice/custom_envoy_config.go
@@ -36,7 +36,7 @@ func RateLimitCustomConfig(opts *editOptions.EditOptions, optionsFunc ...cliutil
 
 func editVhost(opts *editOptions.EditOptions) error {
 
-	vsClient := helpers.MustNamespacedVirtualServiceClient(opts.Metadata.GetNamespace())
+	vsClient := helpers.MustNamespacedVirtualServiceClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 	vs, err := vsClient.Read(opts.Metadata.Namespace, opts.Metadata.Name, clients.ReadOpts{})
 	if err != nil {
 		return errors.Wrapf(err, "Error reading virtual service")
diff --git a/projects/gloo/cli/pkg/cmd/edit/virtualservice/root.go b/projects/gloo/cli/pkg/cmd/edit/virtualservice/root.go
index 6f8b3dd4e..3338fe18a 100644
--- a/projects/gloo/cli/pkg/cmd/edit/virtualservice/root.go
+++ b/projects/gloo/cli/pkg/cmd/edit/virtualservice/root.go
@@ -73,7 +73,7 @@ func addEditVirtualServiceInteractiveFlags(opts *EditVirtualService) error {
 }
 
 func editVirtualService(opts *options.EditOptions, optsExt *EditVirtualService, args []string) error {
-	vsClient := helpers.MustNamespacedVirtualServiceClient(opts.Metadata.GetNamespace())
+	vsClient := helpers.MustNamespacedVirtualServiceClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 	vs, err := vsClient.Read(opts.Metadata.Namespace, opts.Metadata.Name, clients.ReadOpts{})
 	if err != nil {
 		return errors.Wrapf(err, "Error reading virtual service")
diff --git a/projects/gloo/cli/pkg/cmd/federation/list/root.go b/projects/gloo/cli/pkg/cmd/federation/list/root.go
index 931b17301..c188f71a3 100644
--- a/projects/gloo/cli/pkg/cmd/federation/list/root.go
+++ b/projects/gloo/cli/pkg/cmd/federation/list/root.go
@@ -23,7 +23,7 @@ func RootCmd(opts *options.Options) *cobra.Command {
 		Short: constants.CLUSTER_LIST_COMMAND.Short,
 		RunE: func(cmd *cobra.Command, args []string) error {
 			secretClient := helpers.MustKubeClient().CoreV1().Secrets(opts.Cluster.FederationNamespace)
-			secrets, err := secretClient.List(metav1.ListOptions{})
+			secrets, err := secretClient.List(opts.Top.Ctx, metav1.ListOptions{})
 			if err != nil {
 				return errors.Wrapf(err, "Failed to list clusters.")
 			}
diff --git a/projects/gloo/cli/pkg/cmd/gateway/url.go b/projects/gloo/cli/pkg/cmd/gateway/url.go
index f139f2f15..74ff30315 100644
--- a/projects/gloo/cli/pkg/cmd/gateway/url.go
+++ b/projects/gloo/cli/pkg/cmd/gateway/url.go
@@ -16,7 +16,8 @@ func urlCmd(opts *options.Options, optionsFunc ...cliutils.OptionsFunc) *cobra.C
 		Short: "print the http endpoint for a proxy",
 		Long:  "Use this command to view the HTTP URL of a Proxy reachable from outside the cluster. You can connect to this address from a host on the same network (such as the host machine, in the case of minikube/minishift).",
 		RunE: func(cmd *cobra.Command, args []string) error {
-			ingressHost, err := cliutil.GetIngressHost(opts.Proxy.Name, opts.Metadata.Namespace, opts.Proxy.Port,
+			// todo is this the right way to get the context?
+			ingressHost, err := cliutil.GetIngressHost(opts.Top.Ctx, opts.Proxy.Name, opts.Metadata.Namespace, opts.Proxy.Port,
 				opts.Proxy.LocalCluster, opts.Proxy.LocalClusterName)
 			if err != nil {
 				return err
@@ -45,7 +46,8 @@ func addressCmd(opts *options.Options, optionsFunc ...cliutils.OptionsFunc) *cob
 		Short: "print the socket address for a proxy",
 		Long:  "Use this command to view the address (host:port) of a Proxy reachable from outside the cluster. You can connect to this address from a host on the same network (such as the host machine, in the case of minikube/minishift).",
 		RunE: func(cmd *cobra.Command, args []string) error {
-			ingressHost, err := cliutil.GetIngressHost(opts.Proxy.Name, opts.Metadata.Namespace, opts.Proxy.Port,
+			// todo is this the right way to get the context?
+			ingressHost, err := cliutil.GetIngressHost(opts.Top.Ctx, opts.Proxy.Name, opts.Metadata.Namespace, opts.Proxy.Port,
 				opts.Proxy.LocalCluster, opts.Proxy.LocalClusterName)
 			if err != nil {
 				return err
diff --git a/projects/gloo/cli/pkg/cmd/get/root.go b/projects/gloo/cli/pkg/cmd/get/root.go
index 76efb17aa..128881623 100644
--- a/projects/gloo/cli/pkg/cmd/get/root.go
+++ b/projects/gloo/cli/pkg/cmd/get/root.go
@@ -34,7 +34,7 @@ func RootCmd(opts *options.Options, optionsFunc ...cliutils.OptionsFunc) *cobra.
 			}
 			if !opts.Top.Consul.UseConsul {
 				client := helpers.MustKubeClient()
-				_, err := client.CoreV1().Namespaces().Get(opts.Metadata.Namespace, metav1.GetOptions{})
+				_, err := client.CoreV1().Namespaces().Get(opts.Top.Ctx, opts.Metadata.Namespace, metav1.GetOptions{})
 				if err != nil {
 					if apierrors.IsNotFound(err) {
 						return UnsetNamespaceError
diff --git a/projects/gloo/cli/pkg/cmd/get/virtualservice.go b/projects/gloo/cli/pkg/cmd/get/virtualservice.go
index e6209164e..be0bf51e3 100644
--- a/projects/gloo/cli/pkg/cmd/get/virtualservice.go
+++ b/projects/gloo/cli/pkg/cmd/get/virtualservice.go
@@ -21,7 +21,7 @@ func VirtualService(opts *options.Options) *cobra.Command {
 			if err != nil {
 				return err
 			}
-			_ = printers.PrintVirtualServices(virtualServices, opts.Top.Output, opts.Metadata.Namespace)
+			_ = printers.PrintVirtualServices(opts.Top.Ctx, virtualServices, opts.Top.Output, opts.Metadata.Namespace)
 			return nil
 		},
 	}
diff --git a/projects/gloo/cli/pkg/cmd/install/enterprise.go b/projects/gloo/cli/pkg/cmd/install/enterprise.go
index aff41e62e..1abe25727 100644
--- a/projects/gloo/cli/pkg/cmd/install/enterprise.go
+++ b/projects/gloo/cli/pkg/cmd/install/enterprise.go
@@ -33,6 +33,7 @@ func enterpriseCmd(opts *options.Options) *cobra.Command {
 				ExtraValues:    extraValues,
 				Mode:           mode, // mode will be overwritten in Install to Gloo if the helm chart doesn't have gloo subchart
 				Verbose:        opts.Top.Verbose,
+				Ctx:            opts.Top.Ctx,
 			}); err != nil {
 				return eris.Wrapf(err, "installing Gloo Enterprise in gateway mode")
 			}
diff --git a/projects/gloo/cli/pkg/cmd/install/federation.go b/projects/gloo/cli/pkg/cmd/install/federation.go
index dc78d59b9..7244bc6c3 100644
--- a/projects/gloo/cli/pkg/cmd/install/federation.go
+++ b/projects/gloo/cli/pkg/cmd/install/federation.go
@@ -33,6 +33,7 @@ func glooFedCmd(opts *options.Options) *cobra.Command {
 				ExtraValues:    extraValues,
 				Mode:           Federation,
 				Verbose:        opts.Top.Verbose,
+				Ctx:            opts.Top.Ctx,
 			}); err != nil {
 				return eris.Wrapf(err, "installing Gloo Federation")
 			}
diff --git a/projects/gloo/cli/pkg/cmd/install/gateway.go b/projects/gloo/cli/pkg/cmd/install/gateway.go
index e2db05ef3..0aceda9fe 100644
--- a/projects/gloo/cli/pkg/cmd/install/gateway.go
+++ b/projects/gloo/cli/pkg/cmd/install/gateway.go
@@ -26,6 +26,7 @@ func gatewayCmd(opts *options.Options) *cobra.Command {
 				InstallCliArgs: &opts.Install,
 				Mode:           mode,
 				Verbose:        opts.Top.Verbose,
+				Ctx:            opts.Top.Ctx,
 			}); err != nil {
 				return eris.Wrapf(err, "installing gloo in gateway mode")
 			}
diff --git a/projects/gloo/cli/pkg/cmd/install/ingress.go b/projects/gloo/cli/pkg/cmd/install/ingress.go
index 210482a82..f492b05a9 100644
--- a/projects/gloo/cli/pkg/cmd/install/ingress.go
+++ b/projects/gloo/cli/pkg/cmd/install/ingress.go
@@ -27,6 +27,7 @@ func ingressCmd(opts *options.Options) *cobra.Command {
 				InstallCliArgs: &opts.Install,
 				ExtraValues:    ingressOverrides,
 				Verbose:        opts.Top.Verbose,
+				Ctx:            opts.Top.Ctx,
 			}); err != nil {
 				return eris.Wrapf(err, "installing gloo in ingress mode")
 			}
diff --git a/projects/gloo/cli/pkg/cmd/install/installer.go b/projects/gloo/cli/pkg/cmd/install/installer.go
index 501a75855..e62d2708a 100644
--- a/projects/gloo/cli/pkg/cmd/install/installer.go
+++ b/projects/gloo/cli/pkg/cmd/install/installer.go
@@ -1,6 +1,7 @@
 package install
 
 import (
+	"context"
 	"encoding/json"
 	"fmt"
 	"io"
@@ -46,6 +47,7 @@ type InstallerConfig struct {
 	ExtraValues    map[string]interface{}
 	Mode           Mode
 	Verbose        bool
+	Ctx            context.Context
 }
 
 type Mode int
@@ -85,7 +87,7 @@ func (i *installer) Install(installerConfig *InstallerConfig) error {
 		}
 		if installerConfig.InstallCliArgs.CreateNamespace {
 			// Create the namespace if it doesn't exist. Helm3 no longer does this.
-			i.createNamespace(namespace)
+			i.createNamespace(installerConfig.Ctx, namespace)
 		}
 	}
 
@@ -179,14 +181,18 @@ func (i *installer) Install(installerConfig *InstallerConfig) error {
 	return nil
 }
 
-func (i *installer) createNamespace(namespace string) {
-	_, err := i.kubeNsClient.Get(namespace, metav1.GetOptions{})
+func (i *installer) createNamespace(ctx context.Context, namespace string) {
+	_, err := i.kubeNsClient.Get(ctx, namespace, metav1.GetOptions{})
 	if apierrors.IsNotFound(err) {
 		fmt.Printf("Creating namespace %s... ", namespace)
-		if _, err := i.kubeNsClient.Create(&corev1.Namespace{
+		if _, err := i.kubeNsClient.Create(ctx, &corev1.Namespace{
 			ObjectMeta: metav1.ObjectMeta{
 				Name: namespace,
 			},
+		}, metav1.CreateOptions{ // todo what defaults should this have, or should i input these form somewhere?
+			TypeMeta:     metav1.TypeMeta{},
+			DryRun:       nil,
+			FieldManager: "",
 		}); err != nil {
 			fmt.Printf("\nUnable to create namespace %s. Continuing...\n", namespace)
 		} else {
diff --git a/projects/gloo/cli/pkg/cmd/install/installer_test.go b/projects/gloo/cli/pkg/cmd/install/installer_test.go
index 77582208b..57cf4f238 100644
--- a/projects/gloo/cli/pkg/cmd/install/installer_test.go
+++ b/projects/gloo/cli/pkg/cmd/install/installer_test.go
@@ -2,6 +2,7 @@ package install_test
 
 import (
 	"bytes"
+	"context"
 
 	"k8s.io/client-go/kubernetes/fake"
 
@@ -27,6 +28,7 @@ var _ = Describe("Install", func() {
 		ctrl                 *gomock.Controller
 		chart                *helmchart.Chart
 		helmRelease          *release.Release
+		ctx                  context.Context
 
 		glooOsVersion          = "test"
 		glooOsChartUri         = "https://storage.googleapis.com/solo-public-helm/charts/gloo-test.tgz"
@@ -80,6 +82,7 @@ rules:
 		ctrl = gomock.NewController(GinkgoT())
 		mockHelmClient = mocks.NewMockHelmClient(ctrl)
 		mockHelmInstallation = mocks.NewMockHelmInstallation(ctrl)
+		ctx, _ = context.WithCancel(context.Background())
 
 		chart = &helmchart.Chart{
 			Metadata: &helmchart.Metadata{
@@ -143,7 +146,7 @@ rules:
 		Expect(dryRunOutputBuffer.String()).To(BeEmpty())
 
 		// Check that namespace was created
-		_, err = kubeNsClient.Get(installConfig.Namespace, metav1.GetOptions{})
+		_, err = kubeNsClient.Get(ctx, installConfig.Namespace, metav1.GetOptions{})
 		Expect(err).NotTo(HaveOccurred())
 	}
 
@@ -286,7 +289,7 @@ rules:
 		Expect(dryRunOutput).To(ContainSubstring("helm.sh/hook"), "Should output non-cleanup hooks")
 
 		// Make sure that namespace was not created
-		_, err = kubeNsClient.Get(installConfig.Namespace, metav1.GetOptions{})
+		_, err = kubeNsClient.Get(ctx, installConfig.Namespace, metav1.GetOptions{})
 		Expect(err).To(HaveOccurred())
 	})
 })
diff --git a/projects/gloo/cli/pkg/cmd/install/knative.go b/projects/gloo/cli/pkg/cmd/install/knative.go
index c7ef31c26..682095cad 100644
--- a/projects/gloo/cli/pkg/cmd/install/knative.go
+++ b/projects/gloo/cli/pkg/cmd/install/knative.go
@@ -76,7 +76,7 @@ func knativeCmd(opts *options.Options) *cobra.Command {
 
 			if opts.Install.Knative.InstallKnative {
 				if !opts.Install.DryRun {
-					installed, _, err := checkKnativeInstallation()
+					installed, _, err := checkKnativeInstallation(opts.Top.Ctx)
 					if err != nil {
 						return eris.Wrapf(err, "checking for existing knative installation")
 					}
@@ -115,6 +115,7 @@ func knativeCmd(opts *options.Options) *cobra.Command {
 					InstallCliArgs: &opts.Install,
 					ExtraValues:    knativeOverrides,
 					Verbose:        opts.Top.Verbose,
+					Ctx:            opts.Top.Ctx,
 				}); err != nil {
 					return eris.Wrapf(err, "installing gloo in knative mode")
 				}
@@ -185,14 +186,14 @@ func installKnativeServing(opts *options.Options) error {
 }
 
 // if knative is present but was not installed by us, the return values will be true, nil, nil
-func checkKnativeInstallation(kubeclient ...kubernetes.Interface) (bool, *options.Knative, error) {
+func checkKnativeInstallation(ctx context.Context, kubeclient ...kubernetes.Interface) (bool, *options.Knative, error) {
 	var kc kubernetes.Interface
 	if len(kubeclient) > 0 {
 		kc = kubeclient[0]
 	} else {
 		kc = helpers.MustKubeClient()
 	}
-	namespaces, err := kc.CoreV1().Namespaces().List(v1.ListOptions{})
+	namespaces, err := kc.CoreV1().Namespaces().List(ctx, v1.ListOptions{})
 	if err != nil {
 		return false, nil, err
 	}
@@ -405,7 +406,7 @@ func waitForCrdsToBeRegistered(ctx context.Context, crds []string) error {
 	logger := contextutils.LoggerFrom(ctx)
 	for _, crdName := range crds {
 		logger.Debugw("waiting for crd to be registered", zap.String("crd", crdName))
-		if err := kubeutils.WaitForCrdActive(apiExts, crdName); err != nil {
+		if err := kubeutils.WaitForCrdActive(ctx, apiExts, crdName); err != nil {
 			return eris.Wrapf(err, "waiting for crd %v to become registered", crdName)
 		}
 	}
diff --git a/projects/gloo/cli/pkg/cmd/install/uninstall.go b/projects/gloo/cli/pkg/cmd/install/uninstall.go
index 04b51995d..591f6dd61 100644
--- a/projects/gloo/cli/pkg/cmd/install/uninstall.go
+++ b/projects/gloo/cli/pkg/cmd/install/uninstall.go
@@ -1,6 +1,7 @@
 package install
 
 import (
+	"context"
 	"fmt"
 	"io"
 	"os"
@@ -20,7 +21,7 @@ func Uninstall(opts *options.Options, cli install.KubeCli, mode Mode) error {
 	if mode == Federation {
 		uninstallArgs = &opts.Uninstall.FedUninstall
 	}
-	if err := uninstaller.Uninstall(uninstallArgs, mode); err != nil {
+	if err := uninstaller.Uninstall(opts.Top.Ctx, uninstallArgs, mode); err != nil {
 		_, _ = fmt.Fprintf(os.Stderr, "Uninstall failed. Detailed logs available at %s.\n", cliutil.GetLogsPath())
 		return err
 	}
@@ -28,7 +29,7 @@ func Uninstall(opts *options.Options, cli install.KubeCli, mode Mode) error {
 }
 
 type Uninstaller interface {
-	Uninstall(cliArgs *options.HelmUninstall, mode Mode) error
+	Uninstall(ctx context.Context, cliArgs *options.HelmUninstall, mode Mode) error
 }
 
 type uninstaller struct {
@@ -50,7 +51,7 @@ func NewUninstallerWithOutput(helmClient HelmClient, kubeCli install.KubeCli, ou
 	}
 }
 
-func (u *uninstaller) Uninstall(cliArgs *options.HelmUninstall, mode Mode) error {
+func (u *uninstaller) Uninstall(ctx context.Context, cliArgs *options.HelmUninstall, mode Mode) error {
 	namespace := cliArgs.Namespace
 	releaseName := cliArgs.HelmReleaseName
 
@@ -108,7 +109,7 @@ func (u *uninstaller) Uninstall(cliArgs *options.HelmUninstall, mode Mode) error
 	}
 
 	if mode != Federation {
-		u.uninstallKnativeIfNecessary()
+		u.uninstallKnativeIfNecessary(ctx)
 	}
 
 	// may need to delete hard-coded crd names even if releaseExists because helm chart for glooe doesn't show gloo dependency (https://github.com/helm/helm/issues/7847)
@@ -196,8 +197,8 @@ func makeUnstructured(manifest string) (*unstructured.Unstructured, error) {
 	return runtimeObj.(*unstructured.Unstructured), nil
 }
 
-func (u *uninstaller) uninstallKnativeIfNecessary() {
-	_, installOpts, err := checkKnativeInstallation()
+func (u *uninstaller) uninstallKnativeIfNecessary(ctx context.Context) {
+	_, installOpts, err := checkKnativeInstallation(ctx)
 	if err != nil {
 		_, _ = fmt.Fprintf(u.output, "Finding knative installation\n")
 		return
diff --git a/projects/gloo/cli/pkg/cmd/install/uninstall_test.go b/projects/gloo/cli/pkg/cmd/install/uninstall_test.go
index 5b8ea7ca8..6b8688d11 100644
--- a/projects/gloo/cli/pkg/cmd/install/uninstall_test.go
+++ b/projects/gloo/cli/pkg/cmd/install/uninstall_test.go
@@ -2,6 +2,7 @@ package install_test
 
 import (
 	"bytes"
+	"context"
 	"fmt"
 	"strings"
 
@@ -26,6 +27,7 @@ var _ = Describe("Uninstall", func() {
 		mockReleaseListRunner  *mocks.MockHelmReleaseListRunner
 		crdDeleteCmd           string
 		crdName                = "authconfigs.enterprise.gloo.solo.io"
+		ctx                    context.Context
 
 		testCRD = `
 apiVersion: apiextensions.k8s.io/v1beta1
@@ -53,6 +55,8 @@ spec:
 	BeforeEach(func() {
 		ctrl = gomock.NewController(GinkgoT())
 
+		// todo is this the right way to make a context when none is available?
+		ctx, _ = context.WithCancel(context.Background())
 		mockHelmClient = mocks.NewMockHelmClient(ctrl)
 		mockHelmUninstallation = mocks.NewMockHelmUninstallation(ctrl)
 		mockReleaseListRunner = mocks.NewMockHelmReleaseListRunner(ctrl)
@@ -84,7 +88,7 @@ spec:
 
 		It("can uninstall", func() {
 			uninstaller := install.NewUninstallerWithOutput(mockHelmClient, installutil.NewMockKubectl([]string{}, []string{}), new(bytes.Buffer))
-			err := uninstaller.Uninstall(&options.HelmUninstall{
+			err := uninstaller.Uninstall(ctx, &options.HelmUninstall{
 				Namespace:       defaults.GlooSystem,
 				HelmReleaseName: constants.GlooReleaseName,
 			}, install.Gloo)
@@ -96,7 +100,7 @@ spec:
 			mockKubectl := installutil.NewMockKubectl([]string{"delete crd " + crdName}, []string{})
 
 			uninstaller := install.NewUninstallerWithOutput(mockHelmClient, mockKubectl, new(bytes.Buffer))
-			err := uninstaller.Uninstall(&options.HelmUninstall{
+			err := uninstaller.Uninstall(ctx, &options.HelmUninstall{
 				Namespace:       defaults.GlooSystem,
 				HelmReleaseName: constants.GlooReleaseName,
 				DeleteCrds:      true,
@@ -111,7 +115,7 @@ spec:
 			}, []string{})
 
 			uninstaller := install.NewUninstallerWithOutput(mockHelmClient, mockKubectl, new(bytes.Buffer))
-			err := uninstaller.Uninstall(&options.HelmUninstall{
+			err := uninstaller.Uninstall(ctx, &options.HelmUninstall{
 				Namespace:       defaults.GlooSystem,
 				HelmReleaseName: constants.GlooReleaseName,
 				DeleteNamespace: true,
@@ -127,7 +131,7 @@ spec:
 			}, []string{})
 
 			uninstaller := install.NewUninstallerWithOutput(mockHelmClient, mockKubectl, new(bytes.Buffer))
-			err := uninstaller.Uninstall(&options.HelmUninstall{
+			err := uninstaller.Uninstall(ctx, &options.HelmUninstall{
 				Namespace:       defaults.GlooSystem,
 				HelmReleaseName: constants.GlooReleaseName,
 				DeleteAll:       true,
@@ -164,7 +168,7 @@ spec:
 			mockKubectl := installutil.NewMockKubectl(namespacedDeleteCmds, []string{})
 
 			uninstaller := install.NewUninstallerWithOutput(mockHelmClient, mockKubectl, new(bytes.Buffer))
-			err := uninstaller.Uninstall(&options.HelmUninstall{
+			err := uninstaller.Uninstall(ctx, &options.HelmUninstall{
 				Namespace:       defaults.GlooSystem,
 				HelmReleaseName: constants.GlooReleaseName,
 			}, install.Gloo)
@@ -176,7 +180,7 @@ spec:
 			mockKubectl := installutil.NewMockKubectl(append(namespacedDeleteCmds, crdDeleteCmd), []string{})
 
 			uninstaller := install.NewUninstallerWithOutput(mockHelmClient, mockKubectl, new(bytes.Buffer))
-			err := uninstaller.Uninstall(&options.HelmUninstall{
+			err := uninstaller.Uninstall(ctx, &options.HelmUninstall{
 				Namespace:       defaults.GlooSystem,
 				HelmReleaseName: constants.GlooReleaseName,
 				DeleteCrds:      true,
@@ -189,7 +193,7 @@ spec:
 			mockKubectl := installutil.NewMockKubectl(append(namespacedDeleteCmds, "delete namespace "+defaults.GlooSystem), []string{})
 
 			uninstaller := install.NewUninstallerWithOutput(mockHelmClient, mockKubectl, new(bytes.Buffer))
-			err := uninstaller.Uninstall(&options.HelmUninstall{
+			err := uninstaller.Uninstall(ctx, &options.HelmUninstall{
 				Namespace:       defaults.GlooSystem,
 				HelmReleaseName: constants.GlooReleaseName,
 				DeleteNamespace: true,
@@ -205,7 +209,7 @@ spec:
 			mockKubectl := installutil.NewMockKubectl(commands, []string{})
 
 			uninstaller := install.NewUninstallerWithOutput(mockHelmClient, mockKubectl, new(bytes.Buffer))
-			err := uninstaller.Uninstall(&options.HelmUninstall{
+			err := uninstaller.Uninstall(ctx, &options.HelmUninstall{
 				Namespace:       defaults.GlooSystem,
 				HelmReleaseName: constants.GlooReleaseName,
 				DeleteAll:       true,
@@ -236,7 +240,7 @@ spec:
 
 		It("can uninstall", func() {
 			uninstaller := install.NewUninstallerWithOutput(mockHelmClient, installutil.NewMockKubectl([]string{}, []string{}), new(bytes.Buffer))
-			err := uninstaller.Uninstall(&options.HelmUninstall{Namespace: defaults.GlooFed, HelmReleaseName: constants.GlooFedReleaseName}, install.Federation)
+			err := uninstaller.Uninstall(ctx, &options.HelmUninstall{Namespace: defaults.GlooFed, HelmReleaseName: constants.GlooFedReleaseName}, install.Federation)
 
 			Expect(err).NotTo(HaveOccurred())
 		})
@@ -245,7 +249,7 @@ spec:
 			mockKubectl := installutil.NewMockKubectl([]string{"delete crd " + strings.Join(install.GlooFedCrdNames, " ")}, []string{})
 
 			uninstaller := install.NewUninstallerWithOutput(mockHelmClient, mockKubectl, new(bytes.Buffer))
-			err := uninstaller.Uninstall(&options.HelmUninstall{
+			err := uninstaller.Uninstall(ctx, &options.HelmUninstall{
 				Namespace:       defaults.GlooFed,
 				HelmReleaseName: constants.GlooFedReleaseName,
 				DeleteCrds:      true,
@@ -260,7 +264,7 @@ spec:
 			}, []string{})
 
 			uninstaller := install.NewUninstallerWithOutput(mockHelmClient, mockKubectl, new(bytes.Buffer))
-			err := uninstaller.Uninstall(&options.HelmUninstall{
+			err := uninstaller.Uninstall(ctx, &options.HelmUninstall{
 				Namespace:       defaults.GlooFed,
 				HelmReleaseName: constants.GlooFedReleaseName,
 				DeleteNamespace: true,
@@ -276,7 +280,7 @@ spec:
 			}, []string{})
 
 			uninstaller := install.NewUninstallerWithOutput(mockHelmClient, mockKubectl, new(bytes.Buffer))
-			err := uninstaller.Uninstall(&options.HelmUninstall{
+			err := uninstaller.Uninstall(ctx, &options.HelmUninstall{
 				Namespace:       defaults.GlooFed,
 				HelmReleaseName: constants.GlooFedReleaseName,
 				DeleteAll:       true,
diff --git a/projects/gloo/cli/pkg/cmd/istio/enable_mtls.go b/projects/gloo/cli/pkg/cmd/istio/enable_mtls.go
index 1a7326cf2..09deff42d 100644
--- a/projects/gloo/cli/pkg/cmd/istio/enable_mtls.go
+++ b/projects/gloo/cli/pkg/cmd/istio/enable_mtls.go
@@ -47,7 +47,7 @@ func EnableMTLS(opts *options.Options, optionsFunc ...cliutils.OptionsFunc) *cob
 }
 
 func istioEnableMTLS(args []string, opts *options.Options) error {
-	upClient := helpers.MustNamespacedUpstreamClient(opts.Metadata.GetNamespace())
+	upClient := helpers.MustNamespacedUpstreamClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 	up, err := upClient.Read(opts.Metadata.Namespace, opts.Istio.Upstream, clients.ReadOpts{})
 	if err != nil {
 		return errors.Wrapf(err, "Error reading upstream")
diff --git a/projects/gloo/cli/pkg/cmd/istio/inject.go b/projects/gloo/cli/pkg/cmd/istio/inject.go
index 05342cfcf..f7cdd3cba 100644
--- a/projects/gloo/cli/pkg/cmd/istio/inject.go
+++ b/projects/gloo/cli/pkg/cmd/istio/inject.go
@@ -2,6 +2,7 @@ package istio
 
 import (
 	"bytes"
+	"context"
 	"errors"
 	"fmt"
 	"strings"
@@ -81,13 +82,13 @@ func istioInject(args []string, opts *options.Options) error {
 	istioNS := opts.Istio.Namespace
 
 	client := helpers.MustKubeClient()
-	_, err := client.CoreV1().Namespaces().Get(glooNS, metav1.GetOptions{})
+	_, err := client.CoreV1().Namespaces().Get(opts.Top.Ctx, glooNS, metav1.GetOptions{})
 	if err != nil {
 		return err
 	}
 
 	// Add gateway_proxy_sds configmap
-	configMaps, err := client.CoreV1().ConfigMaps(glooNS).List(metav1.ListOptions{})
+	configMaps, err := client.CoreV1().ConfigMaps(glooNS).List(opts.Top.Ctx, metav1.ListOptions{})
 	for _, configMap := range configMaps.Items {
 		if configMap.Name == gatewayProxyConfigMap {
 			// Make sure we don't already have the gateway_proxy_sds cluster set up
@@ -99,14 +100,14 @@ func istioInject(args []string, opts *options.Options) error {
 			if err != nil {
 				return err
 			}
-			_, err = client.CoreV1().ConfigMaps(glooNS).Update(&configMap)
+			_, err = client.CoreV1().ConfigMaps(glooNS).Update(opts.Top.Ctx, &configMap, metav1.UpdateOptions{})
 			if err != nil {
 				return err
 			}
 		}
 	}
 
-	deployments, err := client.AppsV1().Deployments(glooNS).List(metav1.ListOptions{})
+	deployments, err := client.AppsV1().Deployments(glooNS).List(opts.Top.Ctx, metav1.ListOptions{})
 	if err != nil {
 		return err
 	}
@@ -126,15 +127,15 @@ func istioInject(args []string, opts *options.Options) error {
 				}
 			}
 
-			err := addSdsSidecar(&deployment, glooNS)
+			err := addSdsSidecar(opts.Top.Ctx, &deployment, glooNS)
 			if err != nil {
 				return err
 			}
-			err = addIstioSidecar(&deployment, istioNS)
+			err = addIstioSidecar(opts.Top.Ctx, &deployment, istioNS)
 			if err != nil {
 				return err
 			}
-			_, err = client.AppsV1().Deployments(glooNS).Update(&deployment)
+			_, err = client.AppsV1().Deployments(glooNS).Update(opts.Top.Ctx, &deployment, metav1.UpdateOptions{})
 			if err != nil {
 				return err
 			}
@@ -146,8 +147,8 @@ func istioInject(args []string, opts *options.Options) error {
 }
 
 // addSdsSidecar adds an SDS sidecar to the given deployment's containers
-func addSdsSidecar(deployment *appsv1.Deployment, glooNamespace string) error {
-	glooVersion, err := getGlooVersion(glooNamespace)
+func addSdsSidecar(ctx context.Context, deployment *appsv1.Deployment, glooNamespace string) error {
+	glooVersion, err := getGlooVersion(ctx, glooNamespace)
 	if err != nil {
 		return ErrGlooVerUndetermined
 	}
@@ -160,9 +161,9 @@ func addSdsSidecar(deployment *appsv1.Deployment, glooNamespace string) error {
 }
 
 // addIstioSidecar adds an Istio sidecar to the given deployment's containers
-func addIstioSidecar(deployment *appsv1.Deployment, istioNamespace string) error {
+func addIstioSidecar(ctx context.Context, deployment *appsv1.Deployment, istioNamespace string) error {
 	// Get current istio version & JWT policy from cluster
-	istioPilotContainer, err := getIstiodContainer(istioNamespace)
+	istioPilotContainer, err := getIstiodContainer(ctx, istioNamespace)
 	if err != nil {
 		return err
 	}
diff --git a/projects/gloo/cli/pkg/cmd/istio/uninject.go b/projects/gloo/cli/pkg/cmd/istio/uninject.go
index bca34dc14..f9c7609b4 100644
--- a/projects/gloo/cli/pkg/cmd/istio/uninject.go
+++ b/projects/gloo/cli/pkg/cmd/istio/uninject.go
@@ -53,13 +53,13 @@ func istioUninject(args []string, opts *options.Options) error {
 	glooNS := opts.Metadata.Namespace
 
 	client := helpers.MustKubeClient()
-	_, err := client.CoreV1().Namespaces().Get(glooNS, metav1.GetOptions{})
+	_, err := client.CoreV1().Namespaces().Get(opts.Top.Ctx, glooNS, metav1.GetOptions{})
 	if err != nil {
 		return err
 	}
 
 	// Remove gateway_proxy_sds cluster from the gateway-proxy configmap
-	configMaps, err := client.CoreV1().ConfigMaps(glooNS).List(metav1.ListOptions{})
+	configMaps, err := client.CoreV1().ConfigMaps(glooNS).List(opts.Top.Ctx, metav1.ListOptions{})
 	for _, configMap := range configMaps.Items {
 		if configMap.Name == gatewayProxyConfigMap {
 			// Make sure we don't already have the gateway_proxy_sds cluster set up
@@ -67,14 +67,14 @@ func istioUninject(args []string, opts *options.Options) error {
 			if err != nil {
 				return err
 			}
-			_, err = client.CoreV1().ConfigMaps(glooNS).Update(&configMap)
+			_, err = client.CoreV1().ConfigMaps(glooNS).Update(opts.Top.Ctx, &configMap, metav1.UpdateOptions{})
 			if err != nil {
 				return err
 			}
 		}
 	}
 
-	deployments, err := client.AppsV1().Deployments(glooNS).List(metav1.ListOptions{})
+	deployments, err := client.AppsV1().Deployments(glooNS).List(opts.Top.Ctx, metav1.ListOptions{})
 	if err != nil {
 		return err
 	}
@@ -110,7 +110,7 @@ func istioUninject(args []string, opts *options.Options) error {
 			deployment.Spec.Template.Spec.Containers = containers
 
 			removeIstioVolumes(&deployment)
-			_, err = client.AppsV1().Deployments(glooNS).Update(&deployment)
+			_, err = client.AppsV1().Deployments(glooNS).Update(opts.Top.Ctx, &deployment, metav1.UpdateOptions{})
 			if err != nil {
 				return err
 			}
diff --git a/projects/gloo/cli/pkg/cmd/istio/util.go b/projects/gloo/cli/pkg/cmd/istio/util.go
index fbd74702f..8530e20ed 100644
--- a/projects/gloo/cli/pkg/cmd/istio/util.go
+++ b/projects/gloo/cli/pkg/cmd/istio/util.go
@@ -2,6 +2,7 @@ package istio
 
 import (
 	"bytes"
+	"context"
 	"fmt"
 	"strings"
 
@@ -29,14 +30,14 @@ func envoyConfigFromString(config string) (envoy_config_bootstrap.Bootstrap, err
 	return bootstrapConfig, err
 }
 
-func getIstiodContainer(namespace string) (corev1.Container, error) {
+func getIstiodContainer(ctx context.Context, namespace string) (corev1.Container, error) {
 	var c corev1.Container
 	client := helpers.MustKubeClient()
-	_, err := client.CoreV1().Namespaces().Get(namespace, metav1.GetOptions{})
+	_, err := client.CoreV1().Namespaces().Get(ctx, namespace, metav1.GetOptions{})
 	if err != nil {
 		return c, err
 	}
-	deployments, err := client.AppsV1().Deployments(namespace).List(metav1.ListOptions{})
+	deployments, err := client.AppsV1().Deployments(namespace).List(ctx, metav1.ListOptions{})
 	if err != nil {
 		return c, err
 	}
@@ -79,13 +80,13 @@ func getJWTPolicy(pilotContainer corev1.Container) string {
 
 // getGlooVersion gets the version of gloo currently running
 // in the given namespace, by checking the gloo deployment.
-func getGlooVersion(namespace string) (string, error) {
+func getGlooVersion(ctx context.Context, namespace string) (string, error) {
 	client := helpers.MustKubeClient()
-	_, err := client.CoreV1().Namespaces().Get(namespace, metav1.GetOptions{})
+	_, err := client.CoreV1().Namespaces().Get(ctx, namespace, metav1.GetOptions{})
 	if err != nil {
 		return "", err
 	}
-	deployments, err := client.AppsV1().Deployments(namespace).List(metav1.ListOptions{})
+	deployments, err := client.AppsV1().Deployments(namespace).List(ctx, metav1.ListOptions{})
 	if err != nil {
 		return "", err
 	}
diff --git a/projects/gloo/cli/pkg/cmd/remove/route.go b/projects/gloo/cli/pkg/cmd/remove/route.go
index a124b96c1..5101ba11e 100644
--- a/projects/gloo/cli/pkg/cmd/remove/route.go
+++ b/projects/gloo/cli/pkg/cmd/remove/route.go
@@ -53,7 +53,7 @@ func removeRoute(opts *options.Options) error {
 		return errors.Errorf("name of the target virtual service cannot be empty")
 	}
 
-	vs, err := helpers.MustNamespacedVirtualServiceClient(opts.Metadata.GetNamespace()).Read(opts.Metadata.Namespace, opts.Metadata.Name,
+	vs, err := helpers.MustNamespacedVirtualServiceClient(opts.Top.Ctx, opts.Metadata.GetNamespace()).Read(opts.Metadata.Namespace, opts.Metadata.Name,
 		clients.ReadOpts{Ctx: opts.Top.Ctx})
 	if err != nil {
 		return errors.Wrapf(err, "reading vs %v", opts.Metadata.Ref())
@@ -65,7 +65,7 @@ func removeRoute(opts *options.Options) error {
 
 	vs.VirtualHost.Routes = append(vs.VirtualHost.Routes[:index], vs.VirtualHost.Routes[index+1:]...)
 
-	out, err := helpers.MustNamespacedVirtualServiceClient(opts.Metadata.GetNamespace()).Write(vs, clients.WriteOpts{
+	out, err := helpers.MustNamespacedVirtualServiceClient(opts.Top.Ctx, opts.Metadata.GetNamespace()).Write(vs, clients.WriteOpts{
 		Ctx:               opts.Top.Ctx,
 		OverwriteExisting: true,
 	})
@@ -73,6 +73,6 @@ func removeRoute(opts *options.Options) error {
 		return errors.Wrapf(err, "writing updated vs")
 	}
 
-	_ = printers.PrintVirtualServices(gatewayv1.VirtualServiceList{out}, opts.Top.Output, opts.Metadata.Namespace)
+	_ = printers.PrintVirtualServices(opts.Top.Ctx, gatewayv1.VirtualServiceList{out}, opts.Top.Output, opts.Metadata.Namespace)
 	return nil
 }
diff --git a/projects/gloo/cli/pkg/cmd/route/sort.go b/projects/gloo/cli/pkg/cmd/route/sort.go
index 0ada1b08d..8d6381999 100644
--- a/projects/gloo/cli/pkg/cmd/route/sort.go
+++ b/projects/gloo/cli/pkg/cmd/route/sort.go
@@ -49,7 +49,7 @@ func sortRoutes(opts *options.Options) error {
 		return errors.Errorf("name of the target virtual service cannot be empty")
 	}
 
-	vs, err := helpers.MustNamespacedVirtualServiceClient(opts.Metadata.GetNamespace()).Read(opts.Metadata.Namespace, opts.Metadata.Name,
+	vs, err := helpers.MustNamespacedVirtualServiceClient(opts.Top.Ctx, opts.Metadata.GetNamespace()).Read(opts.Metadata.Namespace, opts.Metadata.Name,
 		clients.ReadOpts{Ctx: opts.Top.Ctx})
 	if err != nil {
 		return errors.Wrapf(err, "reading vs %v", opts.Metadata.Ref())
@@ -61,7 +61,7 @@ func sortRoutes(opts *options.Options) error {
 		"...\n", len(vs.VirtualHost.Routes))
 	utils.SortGatewayRoutesByPath(vs.VirtualHost.Routes)
 
-	out, err := helpers.MustNamespacedVirtualServiceClient(opts.Metadata.GetNamespace()).Write(vs, clients.WriteOpts{
+	out, err := helpers.MustNamespacedVirtualServiceClient(opts.Top.Ctx, opts.Metadata.GetNamespace()).Write(vs, clients.WriteOpts{
 		Ctx:               opts.Top.Ctx,
 		OverwriteExisting: true,
 	})
@@ -69,6 +69,6 @@ func sortRoutes(opts *options.Options) error {
 		return errors.Wrapf(err, "writing updated vs")
 	}
 
-	_ = printers.PrintVirtualServices(gatewayv1.VirtualServiceList{out}, opts.Top.Output, opts.Metadata.Namespace)
+	_ = printers.PrintVirtualServices(opts.Top.Ctx, gatewayv1.VirtualServiceList{out}, opts.Top.Output, opts.Metadata.Namespace)
 	return nil
 }
diff --git a/projects/gloo/cli/pkg/cmd/version/clients.go b/projects/gloo/cli/pkg/cmd/version/clients.go
index 6f2f785a6..c3b49edfc 100644
--- a/projects/gloo/cli/pkg/cmd/version/clients.go
+++ b/projects/gloo/cli/pkg/cmd/version/clients.go
@@ -1,6 +1,7 @@
 package version
 
 import (
+	"context"
 	"strings"
 
 	"github.com/solo-io/gloo/install/helm/gloo/generate"
@@ -15,7 +16,7 @@ import (
 //go:generate mockgen -destination ./mocks/mock_watcher.go -source clients.go
 
 type ServerVersion interface {
-	Get() ([]*version.ServerVersion, error)
+	Get(ctx context.Context) ([]*version.ServerVersion, error)
 }
 
 type kube struct {
@@ -34,7 +35,7 @@ func NewKube(namespace string) *kube {
 	}
 }
 
-func (k *kube) Get() ([]*version.ServerVersion, error) {
+func (k *kube) Get(ctx context.Context) ([]*version.ServerVersion, error) {
 	cfg, err := kubeutils.GetConfig("", "")
 	if err != nil {
 		// kubecfg is missing, therefore no cluster is present, only print client version
@@ -45,7 +46,7 @@ func (k *kube) Get() ([]*version.ServerVersion, error) {
 		return nil, err
 	}
 
-	deployments, err := client.AppsV1().Deployments(k.namespace).List(metav1.ListOptions{
+	deployments, err := client.AppsV1().Deployments(k.namespace).List(ctx, metav1.ListOptions{
 		// search only for gloo deployments based on labels
 		LabelSelector: "app=gloo",
 	})
diff --git a/projects/gloo/cli/pkg/cmd/version/cmd.go b/projects/gloo/cli/pkg/cmd/version/cmd.go
index e17c7eb7a..2959a95aa 100644
--- a/projects/gloo/cli/pkg/cmd/version/cmd.go
+++ b/projects/gloo/cli/pkg/cmd/version/cmd.go
@@ -1,6 +1,7 @@
 package version
 
 import (
+	"context"
 	"fmt"
 	"io"
 	"os"
@@ -58,11 +59,11 @@ func RootCmd(opts *options.Options, optionsFunc ...cliutils.OptionsFunc) *cobra.
 	return cmd
 }
 
-func GetClientServerVersions(sv ServerVersion) (*version.Version, error) {
+func GetClientServerVersions(ctx context.Context, sv ServerVersion) (*version.Version, error) {
 	v := &version.Version{
 		Client: getClientVersion(),
 	}
-	serverVersion, err := sv.Get()
+	serverVersion, err := sv.Get(ctx)
 	if err != nil {
 		return v, err
 	}
@@ -77,7 +78,7 @@ func getClientVersion() *version.ClientVersion {
 }
 
 func printVersion(sv ServerVersion, w io.Writer, opts *options.Options) error {
-	vrs, _ := GetClientServerVersions(sv)
+	vrs, _ := GetClientServerVersions(opts.Top.Ctx, sv)
 	// ignoring error so we still print client version even if we can't get server versions (e.g., not deployed, no rbac)
 	switch opts.Top.Output {
 	case printers.JSON:
diff --git a/projects/gloo/cli/pkg/cmd/version/mocks/mock_watcher.go b/projects/gloo/cli/pkg/cmd/version/mocks/mock_watcher.go
index 6339effbf..fb038b482 100644
--- a/projects/gloo/cli/pkg/cmd/version/mocks/mock_watcher.go
+++ b/projects/gloo/cli/pkg/cmd/version/mocks/mock_watcher.go
@@ -5,6 +5,7 @@
 package mock_version
 
 import (
+	context "context"
 	reflect "reflect"
 
 	gomock "github.com/golang/mock/gomock"
@@ -35,16 +36,16 @@ func (m *MockServerVersion) EXPECT() *MockServerVersionMockRecorder {
 }
 
 // Get mocks base method
-func (m *MockServerVersion) Get() ([]*version.ServerVersion, error) {
+func (m *MockServerVersion) Get(ctx context.Context) ([]*version.ServerVersion, error) {
 	m.ctrl.T.Helper()
-	ret := m.ctrl.Call(m, "Get")
+	ret := m.ctrl.Call(m, "Get", ctx)
 	ret0, _ := ret[0].([]*version.ServerVersion)
 	ret1, _ := ret[1].(error)
 	return ret0, ret1
 }
 
 // Get indicates an expected call of Get
-func (mr *MockServerVersionMockRecorder) Get() *gomock.Call {
+func (mr *MockServerVersionMockRecorder) Get(ctx interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServerVersion)(nil).Get))
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServerVersion)(nil).Get), ctx)
 }
diff --git a/projects/gloo/cli/pkg/cmd/version/version_test.go b/projects/gloo/cli/pkg/cmd/version/version_test.go
index 73a487598..52ccbd220 100644
--- a/projects/gloo/cli/pkg/cmd/version/version_test.go
+++ b/projects/gloo/cli/pkg/cmd/version/version_test.go
@@ -2,6 +2,7 @@ package version
 
 import (
 	"bytes"
+	"context"
 
 	"github.com/golang/mock/gomock"
 	. "github.com/onsi/ginkgo"
@@ -17,25 +18,27 @@ var _ = Describe("version command", func() {
 	var (
 		ctrl   *gomock.Controller
 		client *mock_version.MockServerVersion
+		ctx    context.Context
 	)
 
 	BeforeEach(func() {
 		ctrl = gomock.NewController(T)
 		client = mock_version.NewMockServerVersion(ctrl)
+		ctx, _ = context.WithCancel(context.Background())
 	})
 
 	Context("getVersion", func() {
 		It("will error if an error occurs while getting the version", func() {
 			fakeErr := eris.New("test")
 			client.EXPECT().Get().Return(nil, fakeErr).Times(1)
-			_, err := GetClientServerVersions(client)
+			_, err := GetClientServerVersions(ctx, client)
 			Expect(err).To(HaveOccurred())
 			Expect(err).To(Equal(fakeErr))
 		})
 		It("can get the version", func() {
 			v := make([]*version.ServerVersion, 1)
 			client.EXPECT().Get().Return(v, nil).Times(1)
-			vrs, err := GetClientServerVersions(client)
+			vrs, err := GetClientServerVersions(ctx, client)
 			Expect(err).NotTo(HaveOccurred())
 			Expect(v).To(Equal(vrs.Server))
 		})
diff --git a/projects/gloo/cli/pkg/common/create.go b/projects/gloo/cli/pkg/common/create.go
index b2e61819d..d741a36a3 100644
--- a/projects/gloo/cli/pkg/common/create.go
+++ b/projects/gloo/cli/pkg/common/create.go
@@ -1,6 +1,8 @@
 package common
 
 import (
+	"context"
+
 	"github.com/ghodss/yaml"
 	"github.com/rotisserie/eris"
 	v1 "github.com/solo-io/gloo/projects/gateway/pkg/api/v1"
@@ -12,24 +14,24 @@ import (
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
 )
 
-func CreateAndPrintObject(yml []byte, outputType printers.OutputType, namespace string) error {
+func CreateAndPrintObject(ctx context.Context, yml []byte, outputType printers.OutputType, namespace string) error {
 	resource, err := resourceFromYaml(yml)
 	if err != nil {
 		return eris.Wrapf(err, "parsing resource from yaml")
 	}
 	switch res := resource.(type) {
 	case *gloov1.Upstream:
-		us, err := helpers.MustNamespacedUpstreamClient(namespace).Write(res, clients.WriteOpts{})
+		us, err := helpers.MustNamespacedUpstreamClient(ctx, namespace).Write(res, clients.WriteOpts{})
 		if err != nil {
 			return eris.Wrapf(err, "saving Upstream to storage")
 		}
 		_ = printers.PrintUpstreams(gloov1.UpstreamList{us}, outputType, nil)
 	case *v1.VirtualService:
-		vs, err := helpers.MustNamespacedVirtualServiceClient(namespace).Write(res, clients.WriteOpts{})
+		vs, err := helpers.MustNamespacedVirtualServiceClient(ctx, namespace).Write(res, clients.WriteOpts{})
 		if err != nil {
 			return eris.Wrapf(err, "saving VirtualService to storage")
 		}
-		_ = printers.PrintVirtualServices(v1.VirtualServiceList{vs}, outputType, namespace)
+		_ = printers.PrintVirtualServices(ctx, v1.VirtualServiceList{vs}, outputType, namespace)
 	default:
 		return eris.Errorf("cli error: unimplemented resource type %v", resource)
 	}
diff --git a/projects/gloo/cli/pkg/common/get.go b/projects/gloo/cli/pkg/common/get.go
index a4a6bc846..3473d235b 100644
--- a/projects/gloo/cli/pkg/common/get.go
+++ b/projects/gloo/cli/pkg/common/get.go
@@ -11,7 +11,7 @@ import (
 
 func GetVirtualServices(name string, opts *options.Options) (v1.VirtualServiceList, error) {
 	var virtualServiceList v1.VirtualServiceList
-	virtualServiceClient := helpers.MustNamespacedVirtualServiceClient(opts.Metadata.GetNamespace())
+	virtualServiceClient := helpers.MustNamespacedVirtualServiceClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 	if name == "" {
 		virtualServices, err := virtualServiceClient.List(opts.Metadata.Namespace,
 			clients.ListOpts{Ctx: opts.Top.Ctx, Selector: opts.Get.Selector.MustMap()})
@@ -34,7 +34,7 @@ func GetVirtualServices(name string, opts *options.Options) (v1.VirtualServiceLi
 func GetRouteTables(name string, opts *options.Options) (v1.RouteTableList, error) {
 	var routeTableList v1.RouteTableList
 
-	routeTableClient := helpers.MustNamespacedRouteTableClient(opts.Metadata.GetNamespace())
+	routeTableClient := helpers.MustNamespacedRouteTableClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 	if name == "" {
 		routeTables, err := routeTableClient.List(opts.Metadata.Namespace,
 			clients.ListOpts{Ctx: opts.Top.Ctx, Selector: opts.Get.Selector.MustMap()})
@@ -57,7 +57,7 @@ func GetRouteTables(name string, opts *options.Options) (v1.RouteTableList, erro
 func GetUpstreams(name string, opts *options.Options) (gloov1.UpstreamList, error) {
 	var list gloov1.UpstreamList
 
-	usClient := helpers.MustNamespacedUpstreamClient(opts.Metadata.GetNamespace())
+	usClient := helpers.MustNamespacedUpstreamClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 	if name == "" {
 		uss, err := usClient.List(opts.Metadata.Namespace,
 			clients.ListOpts{Ctx: opts.Top.Ctx, Selector: opts.Get.Selector.MustMap()})
@@ -80,7 +80,7 @@ func GetUpstreams(name string, opts *options.Options) (gloov1.UpstreamList, erro
 func GetUpstreamGroups(name string, opts *options.Options) (gloov1.UpstreamGroupList, error) {
 	var list gloov1.UpstreamGroupList
 
-	ugsClient := helpers.MustNamespacedUpstreamGroupClient(opts.Metadata.GetNamespace())
+	ugsClient := helpers.MustNamespacedUpstreamGroupClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 	if name == "" {
 		ugs, err := ugsClient.List(opts.Metadata.Namespace,
 			clients.ListOpts{Ctx: opts.Top.Ctx, Selector: opts.Get.Selector.MustMap()})
@@ -103,7 +103,7 @@ func GetUpstreamGroups(name string, opts *options.Options) (gloov1.UpstreamGroup
 func GetProxies(name string, opts *options.Options) (gloov1.ProxyList, error) {
 	var list gloov1.ProxyList
 
-	pxClient := helpers.MustNamespacedProxyClient(opts.Metadata.GetNamespace())
+	pxClient := helpers.MustNamespacedProxyClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 	if name == "" {
 		uss, err := pxClient.List(opts.Metadata.Namespace,
 			clients.ListOpts{Ctx: opts.Top.Ctx, Selector: opts.Get.Selector.MustMap()})
@@ -126,7 +126,7 @@ func GetProxies(name string, opts *options.Options) (gloov1.ProxyList, error) {
 func GetAuthConfigs(name string, opts *options.Options) (extauthv1.AuthConfigList, error) {
 	var authConfigList extauthv1.AuthConfigList
 
-	authConfigClient := helpers.MustNamespacedAuthConfigClient(opts.Metadata.GetNamespace())
+	authConfigClient := helpers.MustNamespacedAuthConfigClient(opts.Top.Ctx, opts.Metadata.GetNamespace())
 	if name == "" {
 		authConfigs, err := authConfigClient.List(opts.Metadata.Namespace,
 			clients.ListOpts{Ctx: opts.Top.Ctx, Selector: opts.Get.Selector.MustMap()})
diff --git a/projects/gloo/cli/pkg/helpers/clients.go b/projects/gloo/cli/pkg/helpers/clients.go
index 4d3dc46fb..70f0c853a 100644
--- a/projects/gloo/cli/pkg/helpers/clients.go
+++ b/projects/gloo/cli/pkg/helpers/clients.go
@@ -130,8 +130,8 @@ func KubeClient() (kubernetes.Interface, error) {
 	return kubernetes.NewForConfig(cfg)
 }
 
-func MustGetNamespaces() []string {
-	ns, err := GetNamespaces()
+func MustGetNamespaces(ctx context.Context) []string {
+	ns, err := GetNamespaces(ctx)
 	if err != nil {
 		log.Fatalf("failed to list namespaces")
 	}
@@ -139,7 +139,7 @@ func MustGetNamespaces() []string {
 }
 
 // Note: requires RBAC permission to list namespaces at the cluster level
-func GetNamespaces() ([]string, error) {
+func GetNamespaces(ctx context.Context) ([]string, error) {
 	customFactory := getConfigClientFactory()
 	if customFactory != nil {
 		return []string{"default", defaults.GlooSystem}, nil
@@ -154,7 +154,7 @@ func GetNamespaces() ([]string, error) {
 		return nil, errors.Wrapf(err, "getting kube client")
 	}
 	var namespaces []string
-	nsList, err := kubeClient.CoreV1().Namespaces().List(metav1.ListOptions{})
+	nsList, err := kubeClient.CoreV1().Namespaces().List(ctx, metav1.ListOptions{})
 	if err != nil {
 		return nil, err
 	}
@@ -172,8 +172,9 @@ func NewNamespaceLister() listers.NamespaceLister {
 	return namespaceLister{}
 }
 
-func (namespaceLister) List() ([]string, error) {
-	return GetNamespaces()
+// this namespaceLister implementation requires all implementations to have a context input.
+func (namespaceLister) List(ctx context.Context) ([]string, error) {
+	return GetNamespaces(ctx)
 }
 
 type providedNamespaceLister struct {
@@ -184,20 +185,20 @@ func NewProvidedNamespaceLister(namespaces []string) listers.NamespaceLister {
 	return providedNamespaceLister{namespaces: namespaces}
 }
 
-func (l providedNamespaceLister) List() ([]string, error) {
+func (l providedNamespaceLister) List(ctx context.Context) ([]string, error) {
 	return l.namespaces, nil
 }
 
-func MustUpstreamClient() v1.UpstreamClient {
-	return MustNamespacedUpstreamClient(metav1.NamespaceAll) // will require cluster-scoped permissions
+func MustUpstreamClient(ctx context.Context) v1.UpstreamClient {
+	return MustNamespacedUpstreamClient(ctx, metav1.NamespaceAll) // will require cluster-scoped permissions
 }
 
-func MustNamespacedUpstreamClient(ns string) v1.UpstreamClient {
-	return MustMultiNamespacedUpstreamClient([]string{ns})
+func MustNamespacedUpstreamClient(ctx context.Context, ns string) v1.UpstreamClient {
+	return MustMultiNamespacedUpstreamClient(ctx, []string{ns})
 }
 
-func MustMultiNamespacedUpstreamClient(namespaces []string) v1.UpstreamClient {
-	client, err := UpstreamClient(namespaces)
+func MustMultiNamespacedUpstreamClient(ctx context.Context, namespaces []string) v1.UpstreamClient {
+	client, err := UpstreamClient(ctx, namespaces)
 	if err != nil {
 		log.Fatalf("failed to create upstream client: %v", err)
 	}
@@ -205,10 +206,10 @@ func MustMultiNamespacedUpstreamClient(namespaces []string) v1.UpstreamClient {
 }
 
 // provide "" (metav1.NamespaceAll) to get a cluster-scoped upstream client
-func UpstreamClient(namespaces []string) (v1.UpstreamClient, error) {
+func UpstreamClient(ctx context.Context, namespaces []string) (v1.UpstreamClient, error) {
 	customFactory := getConfigClientFactory()
 	if customFactory != nil {
-		return v1.NewUpstreamClient(customFactory)
+		return v1.NewUpstreamClient(ctx, customFactory)
 	}
 
 	cfg, err := kubeutils.GetConfig("", "")
@@ -216,7 +217,7 @@ func UpstreamClient(namespaces []string) (v1.UpstreamClient, error) {
 		return nil, errors.Wrapf(err, "getting kube config")
 	}
 	cache := kube.NewKubeCache(context.TODO())
-	upstreamClient, err := v1.NewUpstreamClient(&factory.KubeResourceClientFactory{
+	upstreamClient, err := v1.NewUpstreamClient(ctx, &factory.KubeResourceClientFactory{
 		Crd:                v1.UpstreamCrd,
 		Cfg:                cfg,
 		SharedCache:        cache,
@@ -232,16 +233,16 @@ func UpstreamClient(namespaces []string) (v1.UpstreamClient, error) {
 	return upstreamClient, nil
 }
 
-func MustUpstreamGroupClient() v1.UpstreamGroupClient {
-	return MustNamespacedUpstreamGroupClient(metav1.NamespaceAll) // will require cluster-scoped permissions
+func MustUpstreamGroupClient(ctx context.Context) v1.UpstreamGroupClient {
+	return MustNamespacedUpstreamGroupClient(ctx, metav1.NamespaceAll) // will require cluster-scoped permissions
 }
 
-func MustNamespacedUpstreamGroupClient(ns string) v1.UpstreamGroupClient {
-	return MustMultiNamespacedUpstreamGroupClient([]string{ns})
+func MustNamespacedUpstreamGroupClient(ctx context.Context, ns string) v1.UpstreamGroupClient {
+	return MustMultiNamespacedUpstreamGroupClient(ctx, []string{ns})
 }
 
-func MustMultiNamespacedUpstreamGroupClient(namespaces []string) v1.UpstreamGroupClient {
-	client, err := UpstreamGroupClient(namespaces)
+func MustMultiNamespacedUpstreamGroupClient(ctx context.Context, namespaces []string) v1.UpstreamGroupClient {
+	client, err := UpstreamGroupClient(ctx, namespaces)
 	if err != nil {
 		log.Fatalf("failed to create upstream group client: %v", err)
 	}
@@ -249,10 +250,10 @@ func MustMultiNamespacedUpstreamGroupClient(namespaces []string) v1.UpstreamGrou
 }
 
 // provide "" (metav1.NamespaceAll) to get a cluster-scoped upstream group client
-func UpstreamGroupClient(namespaces []string) (v1.UpstreamGroupClient, error) {
+func UpstreamGroupClient(ctx context.Context, namespaces []string) (v1.UpstreamGroupClient, error) {
 	customFactory := getConfigClientFactory()
 	if customFactory != nil {
-		return v1.NewUpstreamGroupClient(customFactory)
+		return v1.NewUpstreamGroupClient(ctx, customFactory)
 	}
 
 	cfg, err := kubeutils.GetConfig("", "")
@@ -260,7 +261,7 @@ func UpstreamGroupClient(namespaces []string) (v1.UpstreamGroupClient, error) {
 		return nil, errors.Wrapf(err, "getting kube config")
 	}
 	cache := kube.NewKubeCache(context.TODO())
-	upstreamGroupClient, err := v1.NewUpstreamGroupClient(&factory.KubeResourceClientFactory{
+	upstreamGroupClient, err := v1.NewUpstreamGroupClient(ctx, &factory.KubeResourceClientFactory{
 		Crd:                v1.UpstreamGroupCrd,
 		Cfg:                cfg,
 		SharedCache:        cache,
@@ -276,16 +277,16 @@ func UpstreamGroupClient(namespaces []string) (v1.UpstreamGroupClient, error) {
 	return upstreamGroupClient, nil
 }
 
-func MustProxyClient() v1.ProxyClient {
-	return MustNamespacedProxyClient(metav1.NamespaceAll) // will require cluster-scoped permissions
+func MustProxyClient(ctx context.Context) v1.ProxyClient {
+	return MustNamespacedProxyClient(ctx, metav1.NamespaceAll) // will require cluster-scoped permissions
 }
 
-func MustNamespacedProxyClient(ns string) v1.ProxyClient {
-	return MustMultiNamespacedProxyClient([]string{ns})
+func MustNamespacedProxyClient(ctx context.Context, ns string) v1.ProxyClient {
+	return MustMultiNamespacedProxyClient(ctx, []string{ns})
 }
 
-func MustMultiNamespacedProxyClient(namespaces []string) v1.ProxyClient {
-	client, err := ProxyClient(namespaces)
+func MustMultiNamespacedProxyClient(ctx context.Context, namespaces []string) v1.ProxyClient {
+	client, err := ProxyClient(ctx, namespaces)
 	if err != nil {
 		log.Fatalf("failed to create proxy client: %v", err)
 	}
@@ -293,10 +294,10 @@ func MustMultiNamespacedProxyClient(namespaces []string) v1.ProxyClient {
 }
 
 // provide "" (metav1.NamespaceAll) to get a cluster-scoped proxy client
-func ProxyClient(namespaces []string) (v1.ProxyClient, error) {
+func ProxyClient(ctx context.Context, namespaces []string) (v1.ProxyClient, error) {
 	customFactory := getConfigClientFactory()
 	if customFactory != nil {
-		return v1.NewProxyClient(customFactory)
+		return v1.NewProxyClient(ctx, customFactory)
 	}
 
 	cfg, err := kubeutils.GetConfig("", "")
@@ -304,7 +305,7 @@ func ProxyClient(namespaces []string) (v1.ProxyClient, error) {
 		return nil, errors.Wrapf(err, "getting kube config")
 	}
 	cache := kube.NewKubeCache(context.TODO())
-	proxyClient, err := v1.NewProxyClient(&factory.KubeResourceClientFactory{
+	proxyClient, err := v1.NewProxyClient(ctx, &factory.KubeResourceClientFactory{
 		Crd:                v1.ProxyCrd,
 		Cfg:                cfg,
 		SharedCache:        cache,
@@ -320,16 +321,16 @@ func ProxyClient(namespaces []string) (v1.ProxyClient, error) {
 	return proxyClient, nil
 }
 
-func MustGatewayClient() gatewayv1.GatewayClient {
-	return MustNamespacedGatewayClient(metav1.NamespaceAll) // will require cluster-scoped permissions
+func MustGatewayClient(ctx context.Context) gatewayv1.GatewayClient {
+	return MustNamespacedGatewayClient(ctx, metav1.NamespaceAll) // will require cluster-scoped permissions
 }
 
-func MustNamespacedGatewayClient(ns string) gatewayv1.GatewayClient {
-	return MustMultiNamespacedGatewayClient([]string{ns})
+func MustNamespacedGatewayClient(ctx context.Context, ns string) gatewayv1.GatewayClient {
+	return MustMultiNamespacedGatewayClient(ctx, []string{ns})
 }
 
-func MustMultiNamespacedGatewayClient(namespaces []string) gatewayv1.GatewayClient {
-	client, err := GatewayClient(namespaces)
+func MustMultiNamespacedGatewayClient(ctx context.Context, namespaces []string) gatewayv1.GatewayClient {
+	client, err := GatewayClient(ctx, namespaces)
 	if err != nil {
 		log.Fatalf("failed to create gateway client: %v", err)
 	}
@@ -337,10 +338,10 @@ func MustMultiNamespacedGatewayClient(namespaces []string) gatewayv1.GatewayClie
 }
 
 // provide "" (metav1.NamespaceAll) to get a cluster-scoped gateway client
-func GatewayClient(namespaces []string) (gatewayv1.GatewayClient, error) {
+func GatewayClient(ctx context.Context, namespaces []string) (gatewayv1.GatewayClient, error) {
 	customFactory := getConfigClientFactory()
 	if customFactory != nil {
-		return gatewayv1.NewGatewayClient(customFactory)
+		return gatewayv1.NewGatewayClient(ctx, customFactory)
 	}
 
 	cfg, err := kubeutils.GetConfig("", "")
@@ -348,7 +349,7 @@ func GatewayClient(namespaces []string) (gatewayv1.GatewayClient, error) {
 		return nil, errors.Wrapf(err, "getting kube config")
 	}
 	cache := kube.NewKubeCache(context.TODO())
-	gatewayClient, err := gatewayv1.NewGatewayClient(&factory.KubeResourceClientFactory{
+	gatewayClient, err := gatewayv1.NewGatewayClient(ctx, &factory.KubeResourceClientFactory{
 		Crd:                gatewayv1.GatewayCrd,
 		Cfg:                cfg,
 		SharedCache:        cache,
@@ -364,16 +365,16 @@ func GatewayClient(namespaces []string) (gatewayv1.GatewayClient, error) {
 	return gatewayClient, nil
 }
 
-func MustVirtualServiceClient() gatewayv1.VirtualServiceClient {
-	return MustNamespacedVirtualServiceClient(metav1.NamespaceAll) // will require cluster-scoped permissions
+func MustVirtualServiceClient(ctx context.Context) gatewayv1.VirtualServiceClient {
+	return MustNamespacedVirtualServiceClient(ctx, metav1.NamespaceAll) // will require cluster-scoped permissions
 }
 
-func MustNamespacedVirtualServiceClient(ns string) gatewayv1.VirtualServiceClient {
-	return MustMultiNamespacedVirtualServiceClient([]string{ns})
+func MustNamespacedVirtualServiceClient(ctx context.Context, ns string) gatewayv1.VirtualServiceClient {
+	return MustMultiNamespacedVirtualServiceClient(ctx, []string{ns})
 }
 
-func MustMultiNamespacedVirtualServiceClient(namespaces []string) gatewayv1.VirtualServiceClient {
-	client, err := VirtualServiceClient(namespaces)
+func MustMultiNamespacedVirtualServiceClient(ctx context.Context, namespaces []string) gatewayv1.VirtualServiceClient {
+	client, err := VirtualServiceClient(ctx, namespaces)
 	if err != nil {
 		log.Fatalf("failed to create virtualService client: %v", err)
 	}
@@ -381,10 +382,10 @@ func MustMultiNamespacedVirtualServiceClient(namespaces []string) gatewayv1.Virt
 }
 
 // provide "" (metav1.NamespaceAll) to get a cluster-scoped virtual service client
-func VirtualServiceClient(namespaces []string) (gatewayv1.VirtualServiceClient, error) {
+func VirtualServiceClient(ctx context.Context, namespaces []string) (gatewayv1.VirtualServiceClient, error) {
 	customFactory := getConfigClientFactory()
 	if customFactory != nil {
-		return gatewayv1.NewVirtualServiceClient(customFactory)
+		return gatewayv1.NewVirtualServiceClient(ctx, customFactory)
 	}
 
 	cfg, err := kubeutils.GetConfig("", "")
@@ -392,7 +393,7 @@ func VirtualServiceClient(namespaces []string) (gatewayv1.VirtualServiceClient,
 		return nil, errors.Wrapf(err, "getting kube config")
 	}
 	cache := kube.NewKubeCache(context.TODO())
-	virtualServiceClient, err := gatewayv1.NewVirtualServiceClient(&factory.KubeResourceClientFactory{
+	virtualServiceClient, err := gatewayv1.NewVirtualServiceClient(ctx, &factory.KubeResourceClientFactory{
 		Crd:                gatewayv1.VirtualServiceCrd,
 		Cfg:                cfg,
 		SharedCache:        cache,
@@ -408,16 +409,16 @@ func VirtualServiceClient(namespaces []string) (gatewayv1.VirtualServiceClient,
 	return virtualServiceClient, nil
 }
 
-func MustRouteTableClient() gatewayv1.RouteTableClient {
-	return MustNamespacedRouteTableClient(metav1.NamespaceAll) // will require cluster-scoped permissions
+func MustRouteTableClient(ctx context.Context) gatewayv1.RouteTableClient {
+	return MustNamespacedRouteTableClient(ctx, metav1.NamespaceAll) // will require cluster-scoped permissions
 }
 
-func MustNamespacedRouteTableClient(ns string) gatewayv1.RouteTableClient {
-	return MustMultiNamespacedRouteTableClient([]string{ns})
+func MustNamespacedRouteTableClient(ctx context.Context, ns string) gatewayv1.RouteTableClient {
+	return MustMultiNamespacedRouteTableClient(ctx, []string{ns})
 }
 
-func MustMultiNamespacedRouteTableClient(namespaces []string) gatewayv1.RouteTableClient {
-	client, err := RouteTableClient(namespaces)
+func MustMultiNamespacedRouteTableClient(ctx context.Context, namespaces []string) gatewayv1.RouteTableClient {
+	client, err := RouteTableClient(ctx, namespaces)
 	if err != nil {
 		log.Fatalf("failed to create routeTable client: %v", err)
 	}
@@ -425,10 +426,10 @@ func MustMultiNamespacedRouteTableClient(namespaces []string) gatewayv1.RouteTab
 }
 
 // provide "" (metav1.NamespaceAll) to get a cluster-scoped route table client
-func RouteTableClient(namespaces []string) (gatewayv1.RouteTableClient, error) {
+func RouteTableClient(ctx context.Context, namespaces []string) (gatewayv1.RouteTableClient, error) {
 	customFactory := getConfigClientFactory()
 	if customFactory != nil {
-		return gatewayv1.NewRouteTableClient(customFactory)
+		return gatewayv1.NewRouteTableClient(ctx, customFactory)
 	}
 
 	cfg, err := kubeutils.GetConfig("", "")
@@ -436,7 +437,7 @@ func RouteTableClient(namespaces []string) (gatewayv1.RouteTableClient, error) {
 		return nil, errors.Wrapf(err, "getting kube config")
 	}
 	cache := kube.NewKubeCache(context.TODO())
-	routeTableClient, err := gatewayv1.NewRouteTableClient(&factory.KubeResourceClientFactory{
+	routeTableClient, err := gatewayv1.NewRouteTableClient(ctx, &factory.KubeResourceClientFactory{
 		Crd:                gatewayv1.RouteTableCrd,
 		Cfg:                cfg,
 		SharedCache:        cache,
@@ -452,16 +453,16 @@ func RouteTableClient(namespaces []string) (gatewayv1.RouteTableClient, error) {
 	return routeTableClient, nil
 }
 
-func MustSettingsClient() v1.SettingsClient {
-	return MustNamespacedSettingsClient(metav1.NamespaceAll) // will require cluster-scoped permissions
+func MustSettingsClient(ctx context.Context) v1.SettingsClient {
+	return MustNamespacedSettingsClient(ctx, metav1.NamespaceAll) // will require cluster-scoped permissions
 }
 
-func MustNamespacedSettingsClient(ns string) v1.SettingsClient {
-	return MustMultiNamespacedSettingsClient([]string{ns})
+func MustNamespacedSettingsClient(ctx context.Context, ns string) v1.SettingsClient {
+	return MustMultiNamespacedSettingsClient(ctx, []string{ns})
 }
 
-func MustMultiNamespacedSettingsClient(namespaces []string) v1.SettingsClient {
-	client, err := SettingsClient(namespaces)
+func MustMultiNamespacedSettingsClient(ctx context.Context, namespaces []string) v1.SettingsClient {
+	client, err := SettingsClient(ctx, namespaces)
 	if err != nil {
 		log.Fatalf("failed to create settings client: %v", err)
 	}
@@ -469,10 +470,10 @@ func MustMultiNamespacedSettingsClient(namespaces []string) v1.SettingsClient {
 }
 
 // provide "" (metav1.NamespaceAll) to get a cluster-scoped settings client
-func SettingsClient(namespaces []string) (v1.SettingsClient, error) {
+func SettingsClient(ctx context.Context, namespaces []string) (v1.SettingsClient, error) {
 	customFactory := getConfigClientFactory()
 	if customFactory != nil {
-		return v1.NewSettingsClient(customFactory)
+		return v1.NewSettingsClient(ctx, customFactory)
 	}
 
 	cfg, err := kubeutils.GetConfig("", "")
@@ -480,7 +481,7 @@ func SettingsClient(namespaces []string) (v1.SettingsClient, error) {
 		return nil, errors.Wrapf(err, "getting kube config")
 	}
 	cache := kube.NewKubeCache(context.TODO())
-	settingsClient, err := v1.NewSettingsClient(&factory.KubeResourceClientFactory{
+	settingsClient, err := v1.NewSettingsClient(ctx, &factory.KubeResourceClientFactory{
 		Crd:                v1.SettingsCrd,
 		Cfg:                cfg,
 		SharedCache:        cache,
@@ -496,22 +497,22 @@ func SettingsClient(namespaces []string) (v1.SettingsClient, error) {
 	return settingsClient, nil
 }
 
-func MustSecretClient() v1.SecretClient {
-	return MustSecretClientWithOptions(0, nil)
+func MustSecretClient(ctx context.Context) v1.SecretClient {
+	return MustSecretClientWithOptions(ctx, 0, nil)
 }
 
-func MustSecretClientWithOptions(timeout time.Duration, namespaces []string) v1.SecretClient {
-	client, err := getSecretClient(timeout, namespaces)
+func MustSecretClientWithOptions(ctx context.Context, timeout time.Duration, namespaces []string) v1.SecretClient {
+	client, err := getSecretClient(ctx, timeout, namespaces)
 	if err != nil {
 		log.Fatalf("failed to create Secret client: %v", err)
 	}
 	return client
 }
 
-func getSecretClient(timeout time.Duration, namespaces []string) (v1.SecretClient, error) {
+func getSecretClient(ctx context.Context, timeout time.Duration, namespaces []string) (v1.SecretClient, error) {
 	customFactory := getSecretClientFactory()
 	if customFactory != nil {
-		return v1.NewSecretClient(customFactory)
+		return v1.NewSecretClient(ctx, customFactory)
 	}
 
 	clientset, err := GetKubernetesClientWithTimeout(timeout)
@@ -523,7 +524,7 @@ func getSecretClient(timeout time.Duration, namespaces []string) (v1.SecretClien
 		return nil, err
 	}
 
-	secretClient, err := v1.NewSecretClient(&factory.KubeSecretClientFactory{
+	secretClient, err := v1.NewSecretClient(ctx, &factory.KubeSecretClientFactory{
 		Clientset:       clientset,
 		Cache:           coreCache,
 		SecretConverter: kubeconverters.GlooSecretConverterChain,
@@ -578,16 +579,16 @@ func ApiExtsClient() (apiexts.Interface, error) {
 	return apiexts.NewForConfig(cfg)
 }
 
-func MustAuthConfigClient() extauth.AuthConfigClient {
-	return MustNamespacedAuthConfigClient(metav1.NamespaceAll) // will require cluster-scoped permissions
+func MustAuthConfigClient(ctx context.Context) extauth.AuthConfigClient {
+	return MustNamespacedAuthConfigClient(ctx, metav1.NamespaceAll) // will require cluster-scoped permissions
 }
 
-func MustNamespacedAuthConfigClient(ns string) extauth.AuthConfigClient {
-	return MustMultiNamespacedAuthConfigClient([]string{ns})
+func MustNamespacedAuthConfigClient(ctx context.Context, ns string) extauth.AuthConfigClient {
+	return MustMultiNamespacedAuthConfigClient(ctx, []string{ns})
 }
 
-func MustMultiNamespacedAuthConfigClient(namespaces []string) extauth.AuthConfigClient {
-	client, err := AuthConfigClient(namespaces)
+func MustMultiNamespacedAuthConfigClient(ctx context.Context, namespaces []string) extauth.AuthConfigClient {
+	client, err := AuthConfigClient(ctx, namespaces)
 	if err != nil {
 		log.Fatalf("failed to create auth config client: %v", err)
 	}
@@ -595,10 +596,10 @@ func MustMultiNamespacedAuthConfigClient(namespaces []string) extauth.AuthConfig
 }
 
 // provide "" (metav1.NamespaceAll) to get a cluster-scoped authConfig client
-func AuthConfigClient(namespaces []string) (extauth.AuthConfigClient, error) {
+func AuthConfigClient(ctx context.Context, namespaces []string) (extauth.AuthConfigClient, error) {
 	customFactory := getConfigClientFactory()
 	if customFactory != nil {
-		return extauth.NewAuthConfigClient(customFactory)
+		return extauth.NewAuthConfigClient(ctx, customFactory)
 	}
 
 	cfg, err := kubeutils.GetConfig("", "")
@@ -606,7 +607,7 @@ func AuthConfigClient(namespaces []string) (extauth.AuthConfigClient, error) {
 		return nil, errors.Wrapf(err, "getting kube config")
 	}
 	cache := kube.NewKubeCache(context.TODO())
-	authConfigClient, err := extauth.NewAuthConfigClient(&factory.KubeResourceClientFactory{
+	authConfigClient, err := extauth.NewAuthConfigClient(ctx, &factory.KubeResourceClientFactory{
 		Crd:                extauth.AuthConfigCrd,
 		Cfg:                cfg,
 		SharedCache:        cache,
@@ -622,12 +623,12 @@ func AuthConfigClient(namespaces []string) (extauth.AuthConfigClient, error) {
 	return authConfigClient, nil
 }
 
-func MustNamespacedRateLimitConfigClient(ns string) v1alpha1.RateLimitConfigClient {
-	return MustMultiNamespacedRateLimitConfigClient([]string{ns})
+func MustNamespacedRateLimitConfigClient(ctx context.Context, ns string) v1alpha1.RateLimitConfigClient {
+	return MustMultiNamespacedRateLimitConfigClient(ctx, []string{ns})
 }
 
-func MustMultiNamespacedRateLimitConfigClient(namespaces []string) v1alpha1.RateLimitConfigClient {
-	client, err := RateLimitConfigClient(namespaces)
+func MustMultiNamespacedRateLimitConfigClient(ctx context.Context, namespaces []string) v1alpha1.RateLimitConfigClient {
+	client, err := RateLimitConfigClient(ctx, namespaces)
 	if err != nil {
 		log.Fatalf("failed to create rate limit config client: %v", err)
 	}
@@ -635,10 +636,10 @@ func MustMultiNamespacedRateLimitConfigClient(namespaces []string) v1alpha1.Rate
 }
 
 // provide "" (metav1.NamespaceAll) to get a cluster-scoped client
-func RateLimitConfigClient(namespaces []string) (v1alpha1.RateLimitConfigClient, error) {
+func RateLimitConfigClient(ctx context.Context, namespaces []string) (v1alpha1.RateLimitConfigClient, error) {
 	customFactory := getConfigClientFactory()
 	if customFactory != nil {
-		return v1alpha1.NewRateLimitConfigClient(customFactory)
+		return v1alpha1.NewRateLimitConfigClient(ctx, customFactory)
 	}
 
 	cfg, err := kubeutils.GetConfig("", "")
@@ -646,7 +647,7 @@ func RateLimitConfigClient(namespaces []string) (v1alpha1.RateLimitConfigClient,
 		return nil, errors.Wrapf(err, "getting kube config")
 	}
 	kubeCache := kube.NewKubeCache(context.TODO())
-	rlConfigClient, err := v1alpha1.NewRateLimitConfigClient(&factory.KubeResourceClientFactory{
+	rlConfigClient, err := v1alpha1.NewRateLimitConfigClient(ctx, &factory.KubeResourceClientFactory{
 		Crd:                v1alpha1.RateLimitConfigCrd,
 		Cfg:                cfg,
 		SharedCache:        kubeCache,
diff --git a/projects/gloo/cli/pkg/helpers/kube.go b/projects/gloo/cli/pkg/helpers/kube.go
index 3f39f9d69..e16f9a7f7 100644
--- a/projects/gloo/cli/pkg/helpers/kube.go
+++ b/projects/gloo/cli/pkg/helpers/kube.go
@@ -1,13 +1,14 @@
 package helpers
 
 import (
+	"context"
 	"time"
 
 	"github.com/solo-io/go-utils/kubeutils"
 	"k8s.io/client-go/kubernetes"
 )
 
-func CheckKubernetesConnection() error {
+func CheckKubernetesConnection(ctx context.Context) error {
 	cfg, err := kubeutils.GetConfig("", "")
 	if err != nil {
 		return err
@@ -16,6 +17,6 @@ func CheckKubernetesConnection() error {
 	if err != nil {
 		return err
 	}
-	_, err = kubeClient.RESTClient().Get().Timeout(10 * time.Second).DoRaw()
+	_, err = kubeClient.RESTClient().Get().Timeout(10 * time.Second).DoRaw(ctx)
 	return err
 }
diff --git a/projects/gloo/cli/pkg/prerun/version_warning.go b/projects/gloo/cli/pkg/prerun/version_warning.go
index 0a4e892bc..f4ec00756 100644
--- a/projects/gloo/cli/pkg/prerun/version_warning.go
+++ b/projects/gloo/cli/pkg/prerun/version_warning.go
@@ -1,6 +1,7 @@
 package prerun
 
 import (
+	"context"
 	"fmt"
 	"os"
 
@@ -35,7 +36,7 @@ func VersionMismatchWarning(opts *options.Options, cmd *cobra.Command) error {
 		nsToCheck = opts.Install.Namespace
 	}
 
-	return WarnOnMismatch(os.Args[0], versioncmd.NewKube(nsToCheck), &defaultLogger{})
+	return WarnOnMismatch(opts.Top.Ctx, os.Args[0], versioncmd.NewKube(nsToCheck), &defaultLogger{})
 }
 
 // use this logger interface, so that in the unit test we can accumulate lines that were output
@@ -58,8 +59,8 @@ func (d *defaultLogger) Println(str string) {
 }
 
 // visible for testing
-func WarnOnMismatch(binaryName string, sv versioncmd.ServerVersion, logger Logger) error {
-	clientServerVersions, err := versioncmd.GetClientServerVersions(sv)
+func WarnOnMismatch(ctx context.Context, binaryName string, sv versioncmd.ServerVersion, logger Logger) error {
+	clientServerVersions, err := versioncmd.GetClientServerVersions(ctx, sv)
 	if err != nil {
 		warnOnError(err, logger)
 		return nil
diff --git a/projects/gloo/cli/pkg/prerun/version_warning_test.go b/projects/gloo/cli/pkg/prerun/version_warning_test.go
index 7013d441f..4be39437c 100644
--- a/projects/gloo/cli/pkg/prerun/version_warning_test.go
+++ b/projects/gloo/cli/pkg/prerun/version_warning_test.go
@@ -1,6 +1,7 @@
 package prerun_test
 
 import (
+	"context"
 	"fmt"
 	"strings"
 
@@ -19,7 +20,7 @@ type testVersionGetter struct {
 	err      error
 }
 
-func (t *testVersionGetter) Get() ([]*version.ServerVersion, error) {
+func (t *testVersionGetter) Get(ctx context.Context) ([]*version.ServerVersion, error) {
 	return t.versions, t.err
 }
 
@@ -53,6 +54,7 @@ var _ = Describe("version command", func() {
 		v_20_13 = "0.20.13"
 		v_21_0  = "0.21.0"
 		v_1_0_0 = "1.0.0"
+		ctx     context.Context
 
 		buildContainerVersions = func(isEnterprise bool, containers []*version.Kubernetes_Container) []*version.ServerVersion {
 			return []*version.ServerVersion{{
@@ -78,6 +80,7 @@ var _ = Describe("version command", func() {
 		versionGetter = &testVersionGetter{}
 		logger = &testLogger{}
 		expectedOutputLines = []string{}
+		ctx, _ = context.WithCancel(context.Background())
 
 		// this may not be set in some contexts (like running through goland)
 		// so explicitly set it to get predictable test behavior
@@ -100,7 +103,7 @@ var _ = Describe("version command", func() {
 			Registry: "test-registry",
 		}})
 
-		err = prerun.WarnOnMismatch(binaryName, versionGetter, logger)
+		err = prerun.WarnOnMismatch(ctx, binaryName, versionGetter, logger)
 		Expect(logger.printedLines).To(BeEmpty(), "Should not warn when the versions match exactly")
 	})
 
@@ -111,7 +114,7 @@ var _ = Describe("version command", func() {
 			Registry: "test-registry",
 		}})
 
-		err = prerun.WarnOnMismatch(binaryName, versionGetter, logger)
+		err = prerun.WarnOnMismatch(ctx, binaryName, versionGetter, logger)
 		Expect(logger.printedLines).To(BeEmpty(), "Should not warn when the versions differ only by patch version")
 	})
 
@@ -132,7 +135,7 @@ var _ = Describe("version command", func() {
 			prerun.BuildSuggestedUpgradeCommand(binaryName, mismatches),
 		}
 
-		err = prerun.WarnOnMismatch(binaryName, versionGetter, logger)
+		err = prerun.WarnOnMismatch(ctx, binaryName, versionGetter, logger)
 	})
 
 	It("should warn when the versions differ by major version", func() {
@@ -152,7 +155,7 @@ var _ = Describe("version command", func() {
 			prerun.BuildSuggestedUpgradeCommand(binaryName, mismatches),
 		}
 
-		err = prerun.WarnOnMismatch(binaryName, versionGetter, logger)
+		err = prerun.WarnOnMismatch(ctx, binaryName, versionGetter, logger)
 	})
 
 	It("should ignore containers other than the one we specifically look for", func() {
@@ -169,7 +172,7 @@ var _ = Describe("version command", func() {
 			},
 		})
 
-		err = prerun.WarnOnMismatch(binaryName, versionGetter, logger)
+		err = prerun.WarnOnMismatch(ctx, binaryName, versionGetter, logger)
 		Expect(logger.printedLines).To(BeEmpty(), "Should not warn when the versions match exactly")
 	})
 })
diff --git a/projects/gloo/cli/pkg/printers/virtualservice.go b/projects/gloo/cli/pkg/printers/virtualservice.go
index 07b90b1d9..967b47f5c 100644
--- a/projects/gloo/cli/pkg/printers/virtualservice.go
+++ b/projects/gloo/cli/pkg/printers/virtualservice.go
@@ -1,6 +1,7 @@
 package printers
 
 import (
+	"context"
 	"fmt"
 	"io"
 	"os"
@@ -21,13 +22,13 @@ import (
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
 )
 
-func PrintVirtualServices(virtualServices v1.VirtualServiceList, outputType OutputType, namespace string) error {
+func PrintVirtualServices(ctx context.Context, virtualServices v1.VirtualServiceList, outputType OutputType, namespace string) error {
 	if outputType == KUBE_YAML {
 		return PrintKubeCrdList(virtualServices.AsInputResources(), v1.VirtualServiceCrd)
 	}
 	return cliutils.PrintList(outputType.String(), "", virtualServices,
 		func(data interface{}, w io.Writer) error {
-			VirtualServiceTable(data.(v1.VirtualServiceList), w, namespace)
+			VirtualServiceTable(ctx, data.(v1.VirtualServiceList), w, namespace)
 			return nil
 		}, os.Stdout)
 }
@@ -44,7 +45,7 @@ func PrintRouteTables(routeTables v1.RouteTableList, outputType OutputType) erro
 }
 
 // PrintTable prints virtual services using tables to io.Writer
-func VirtualServiceTable(list []*v1.VirtualService, w io.Writer, namespace string) {
+func VirtualServiceTable(ctx context.Context, list []*v1.VirtualService, w io.Writer, namespace string) {
 	table := tablewriter.NewWriter(w)
 	table.SetHeader([]string{"Virtual Service", "Display Name", "Domains", "SSL", "Status", "ListenerPlugins", "Routes"})
 
@@ -53,7 +54,7 @@ func VirtualServiceTable(list []*v1.VirtualService, w io.Writer, namespace strin
 		displayName := v.GetDisplayName()
 		domains := domains(v)
 		ssl := sslConfig(v)
-		status := getStatus(v, namespace)
+		status := getStatus(ctx, v, namespace)
 		routes := routeList(v.GetVirtualHost().GetRoutes())
 		plugins := vhPlugins(v)
 
@@ -133,7 +134,7 @@ func getRouteTableStatus(vs *v1.RouteTable) string {
 	}
 }
 
-func getStatus(res resources.InputResource, namespace string) string {
+func getStatus(ctx context.Context, res resources.InputResource, namespace string) string {
 
 	// If the virtual service is still pending and may yet be accepted, don't clutter the status with other errors.
 	resourceStatus := res.GetStatus().State
@@ -150,7 +151,7 @@ func getStatus(res resources.InputResource, namespace string) string {
 	// If the virtual service was accepted, don't include confusing errors on subresources but note if there's another resource potentially blocking config updates.
 	if resourceStatus == core.Status_Accepted {
 		// if route replacement is turned on, don't say that updates to this resource may be blocked
-		settingsClient, err := helpers.SettingsClient([]string{namespace})
+		settingsClient, err := helpers.SettingsClient(ctx, []string{namespace})
 		// if we get any errors, ignore and default to more verbose error message
 		if err == nil {
 			settings, err := settingsClient.Read(namespace, defaults.SettingsName, clients.ReadOpts{})
diff --git a/projects/gloo/cli/pkg/surveyutils/metadata.go b/projects/gloo/cli/pkg/surveyutils/metadata.go
index 7cf7e4e7c..2a5d3515d 100644
--- a/projects/gloo/cli/pkg/surveyutils/metadata.go
+++ b/projects/gloo/cli/pkg/surveyutils/metadata.go
@@ -1,6 +1,8 @@
 package surveyutils
 
 import (
+	"context"
+
 	"github.com/solo-io/gloo/pkg/cliutil"
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
 )
@@ -8,8 +10,8 @@ import (
 var PromptInteractiveResourceName = "name of the resource: "
 
 // DEPRECATE - use EnsureMetadataSurvey
-func MetadataSurvey(metadata *core.Metadata) error {
-	if err := InteractiveNamespace(&metadata.Namespace); err != nil {
+func MetadataSurvey(ctx context.Context, metadata *core.Metadata) error {
+	if err := InteractiveNamespace(ctx, &metadata.Namespace); err != nil {
 		return err
 	}
 	if err := cliutil.GetStringInput(PromptInteractiveResourceName, &metadata.Name); err != nil {
@@ -21,8 +23,8 @@ func MetadataSurvey(metadata *core.Metadata) error {
 // EnsureMetadataSurvey uses interactive prompts to gather any missing Metadata fields.
 // If a field is not empty, it will keep that value and not produce the associated prompt.
 // This allows users to set some values with flags and gather any missing values interactively.
-func EnsureMetadataSurvey(metadata *core.Metadata) error {
-	if err := EnsureInteractiveNamespace(&metadata.Namespace); err != nil {
+func EnsureMetadataSurvey(ctx context.Context, metadata *core.Metadata) error {
+	if err := EnsureInteractiveNamespace(ctx, &metadata.Namespace); err != nil {
 		return err
 	}
 	if metadata.Name == "" {
diff --git a/projects/gloo/cli/pkg/surveyutils/route.go b/projects/gloo/cli/pkg/surveyutils/route.go
index c6d4c4cd8..07010e082 100644
--- a/projects/gloo/cli/pkg/surveyutils/route.go
+++ b/projects/gloo/cli/pkg/surveyutils/route.go
@@ -1,6 +1,7 @@
 package surveyutils
 
 import (
+	"context"
 	"fmt"
 	"sort"
 	"strings"
@@ -85,14 +86,14 @@ func getMatcherInteractive(match *options.RouteMatchers) error {
 	return nil
 }
 
-func getDestinationInteractive(route *options.InputRoute) error {
+func getDestinationInteractive(ctx context.Context, route *options.InputRoute) error {
 	dest := &route.Destination
 	// collect upstreams list
 	ussByKey := make(map[string]*v1.Upstream)
 	ugsByKey := make(map[string]*v1.UpstreamGroup)
 	var usKeys []string
-	for _, ns := range helpers.MustGetNamespaces() {
-		usList, err := helpers.MustNamespacedUpstreamClient(ns).List(ns, clients.ListOpts{})
+	for _, ns := range helpers.MustGetNamespaces(ctx) {
+		usList, err := helpers.MustNamespacedUpstreamClient(ctx, ns).List(ns, clients.ListOpts{})
 		if err != nil {
 			return err
 		}
@@ -106,8 +107,8 @@ func getDestinationInteractive(route *options.InputRoute) error {
 		return errors.Errorf("no upstreams found. create an upstream first or enable discovery.")
 	}
 
-	for _, ns := range helpers.MustGetNamespaces() {
-		ugList, err := helpers.MustNamespacedUpstreamGroupClient(ns).List(ns, clients.ListOpts{})
+	for _, ns := range helpers.MustGetNamespaces(ctx) {
+		ugList, err := helpers.MustNamespacedUpstreamGroupClient(ctx, ns).List(ns, clients.ListOpts{})
 		if err != nil {
 			return err
 		}
@@ -229,9 +230,9 @@ func AddRouteFlagsInteractive(opts *options.Options) error {
 	vsByKey := make(map[string]core.ResourceRef)
 	vsKeys := []string{"create a new virtualservice"}
 	var namespaces []string
-	for _, ns := range helpers.MustGetNamespaces() {
+	for _, ns := range helpers.MustGetNamespaces(opts.Top.Ctx) {
 		namespaces = append(namespaces, ns)
-		vsList, err := helpers.MustNamespacedVirtualServiceClient(ns).List(ns, clients.ListOpts{})
+		vsList, err := helpers.MustNamespacedVirtualServiceClient(opts.Top.Ctx, ns).List(ns, clients.ListOpts{})
 		if err != nil {
 			return err
 		}
@@ -280,7 +281,7 @@ func AddRouteFlagsInteractive(opts *options.Options) error {
 	if err := getMatcherInteractive(&opts.Add.Route.Matcher); err != nil {
 		return err
 	}
-	if err := getDestinationInteractive(&opts.Add.Route); err != nil {
+	if err := getDestinationInteractive(opts.Top.Ctx, &opts.Add.Route); err != nil {
 		return err
 	}
 	if err := getPluginsInteractive(&opts.Add.Route.Plugins); err != nil {
@@ -352,9 +353,9 @@ func SelectVirtualServiceInteractiveWithPrompt(opts *options.Options, prompt str
 	vsByKey := make(map[string]*gatewayv1.VirtualService)
 	var vsKeys []string
 	var namespaces []string
-	for _, ns := range helpers.MustGetNamespaces() {
+	for _, ns := range helpers.MustGetNamespaces(opts.Top.Ctx) {
 		namespaces = append(namespaces, ns)
-		vsList, err := helpers.MustNamespacedVirtualServiceClient(ns).List(ns, clients.ListOpts{Ctx: opts.Top.Ctx})
+		vsList, err := helpers.MustNamespacedVirtualServiceClient(opts.Top.Ctx, ns).List(ns, clients.ListOpts{Ctx: opts.Top.Ctx})
 		if err != nil {
 			return nil, err
 		}
diff --git a/projects/gloo/cli/pkg/surveyutils/survey.go b/projects/gloo/cli/pkg/surveyutils/survey.go
index d1c62de1b..49bc1002d 100644
--- a/projects/gloo/cli/pkg/surveyutils/survey.go
+++ b/projects/gloo/cli/pkg/surveyutils/survey.go
@@ -1,6 +1,7 @@
 package surveyutils
 
 import (
+	"context"
 	"fmt"
 
 	"github.com/solo-io/gloo/projects/gloo/cli/pkg/flagutils"
@@ -83,8 +84,8 @@ func EnsureResourceByName(message string, static bool, source string, target *re
 
 var PromptInteractiveNamespace = "Please choose a namespace"
 
-func InteractiveNamespace(namespace *string) error {
-	nsList, err := helpers.GetNamespaces()
+func InteractiveNamespace(ctx context.Context, namespace *string) error {
+	nsList, err := helpers.GetNamespaces(ctx)
 	if err != nil {
 		// user may not have permission to list namespaces, let them type the name by hand
 		return cliutil.GetStringInput(PromptInteractiveNamespace, namespace)
@@ -93,9 +94,9 @@ func InteractiveNamespace(namespace *string) error {
 }
 
 // EnsureInteractiveNamespace checks the provided namespace and only prompts for input if the namespace is empty or the flag's default value
-func EnsureInteractiveNamespace(namespace *string) error {
+func EnsureInteractiveNamespace(ctx context.Context, namespace *string) error {
 	if *namespace == "" {
-		return InteractiveNamespace(namespace)
+		return InteractiveNamespace(ctx, namespace)
 	}
 	if *namespace == flagutils.DefaultNamespace {
 		var useDefault bool
@@ -106,5 +107,5 @@ func EnsureInteractiveNamespace(namespace *string) error {
 			return nil
 		}
 	}
-	return InteractiveNamespace(namespace)
+	return InteractiveNamespace(ctx, namespace)
 }
diff --git a/projects/gloo/cli/pkg/surveyutils/upstream.go b/projects/gloo/cli/pkg/surveyutils/upstream.go
index 5b0fe33f3..4a23731e2 100644
--- a/projects/gloo/cli/pkg/surveyutils/upstream.go
+++ b/projects/gloo/cli/pkg/surveyutils/upstream.go
@@ -1,6 +1,7 @@
 package surveyutils
 
 import (
+	"context"
 	"fmt"
 
 	errors "github.com/rotisserie/eris"
@@ -12,7 +13,7 @@ import (
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
 )
 
-func getAwsInteractive(aws *options.InputAwsSpec) error {
+func getAwsInteractive(ctx context.Context, aws *options.InputAwsSpec) error {
 	if err := cliutil.GetStringInputDefault(
 		"What region are the AWS services in for this upstream?",
 		&aws.Region,
@@ -22,10 +23,10 @@ func getAwsInteractive(aws *options.InputAwsSpec) error {
 	}
 
 	// collect secrets list
-	secretClient := helpers.MustSecretClient()
+	secretClient := helpers.MustSecretClient(ctx)
 	secretsByKey := make(map[string]core.ResourceRef)
 	var secretKeys []string
-	for _, ns := range helpers.MustGetNamespaces() {
+	for _, ns := range helpers.MustGetNamespaces(ctx) {
 		secretList, err := secretClient.List(ns, clients.ListOpts{})
 		if err != nil {
 			return err
@@ -55,7 +56,7 @@ func getAwsInteractive(aws *options.InputAwsSpec) error {
 	return nil
 }
 
-func getAzureInteractive(azure *options.InputAzureSpec) error {
+func getAzureInteractive(ctx context.Context, azure *options.InputAzureSpec) error {
 	if err := cliutil.GetStringInputDefault(
 		"What is the name of the Azure Functions app to associate with this upstream?",
 		&azure.FunctionAppName,
@@ -65,10 +66,10 @@ func getAzureInteractive(azure *options.InputAzureSpec) error {
 	}
 
 	// collect secrets list
-	secretClient := helpers.MustSecretClient()
+	secretClient := helpers.MustSecretClient(ctx)
 	secretsByKey := make(map[string]core.ResourceRef)
 	var secretKeys []string
-	for _, ns := range helpers.MustGetNamespaces() {
+	for _, ns := range helpers.MustGetNamespaces(ctx) {
 		secretList, err := secretClient.List(ns, clients.ListOpts{})
 		if err != nil {
 			return err
@@ -108,7 +109,7 @@ func getStaticInteractive(static *options.InputStaticSpec) error {
 	return nil
 }
 
-func AddUpstreamFlagsInteractive(upstream *options.InputUpstream) error {
+func AddUpstreamFlagsInteractive(ctx context.Context, upstream *options.InputUpstream) error {
 	if upstream.UpstreamType == "" {
 		if err := cliutil.ChooseFromList(
 			"What type of Upstream do you want to create?",
@@ -120,11 +121,11 @@ func AddUpstreamFlagsInteractive(upstream *options.InputUpstream) error {
 	}
 	switch upstream.UpstreamType {
 	case options.UpstreamType_Aws:
-		if err := getAwsInteractive(&upstream.Aws); err != nil {
+		if err := getAwsInteractive(ctx, &upstream.Aws); err != nil {
 			return err
 		}
 	case options.UpstreamType_Azure:
-		if err := getAzureInteractive(&upstream.Azure); err != nil {
+		if err := getAzureInteractive(ctx, &upstream.Azure); err != nil {
 			return err
 		}
 	case options.UpstreamType_Static:
diff --git a/projects/gloo/cli/pkg/surveyutils/upstreamgroup.go b/projects/gloo/cli/pkg/surveyutils/upstreamgroup.go
index 62c8692ec..aa1d75546 100644
--- a/projects/gloo/cli/pkg/surveyutils/upstreamgroup.go
+++ b/projects/gloo/cli/pkg/surveyutils/upstreamgroup.go
@@ -1,6 +1,7 @@
 package surveyutils
 
 import (
+	"context"
 	"fmt"
 
 	errors "github.com/rotisserie/eris"
@@ -11,13 +12,13 @@ import (
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
 )
 
-func AddUpstreamGroupFlagsInteractive(upstreamGroup *options.InputUpstreamGroup) error {
+func AddUpstreamGroupFlagsInteractive(ctx context.Context, upstreamGroup *options.InputUpstreamGroup) error {
 
 	// collect upstreams list
 	ussByKey := make(map[string]*v1.Upstream)
 	var usKeys []string
-	for _, ns := range helpers.MustGetNamespaces() {
-		usList, err := helpers.MustNamespacedUpstreamClient(ns).List(ns, clients.ListOpts{})
+	for _, ns := range helpers.MustGetNamespaces(ctx) {
+		usList, err := helpers.MustNamespacedUpstreamClient(ctx, ns).List(ns, clients.ListOpts{})
 		if err != nil {
 			return err
 		}
diff --git a/projects/gloo/pkg/api/external/solo/ratelimit/extensions.go b/projects/gloo/pkg/api/external/solo/ratelimit/extensions.go
index b0c717711..47889cfbf 100644
--- a/projects/gloo/pkg/api/external/solo/ratelimit/extensions.go
+++ b/projects/gloo/pkg/api/external/solo/ratelimit/extensions.go
@@ -1,6 +1,7 @@
 package v1alpha1
 
 import (
+	"context"
 	"log"
 
 	"github.com/rotisserie/eris"
@@ -48,8 +49,8 @@ type kubeReporterClient struct {
 	skv2Client rlv1alpha1.RateLimitConfigClient
 }
 
-func NewRateLimitClients(rcFactory factory.ResourceClientFactory) (RateLimitConfigClient, reporter.ReporterResourceClient, error) {
-	rlClient, err := NewRateLimitConfigClient(rcFactory)
+func NewRateLimitClients(ctx context.Context, rcFactory factory.ResourceClientFactory) (RateLimitConfigClient, reporter.ReporterResourceClient, error) {
+	rlClient, err := NewRateLimitConfigClient(ctx, rcFactory)
 	if err != nil {
 		return nil, nil, err
 	}
diff --git a/projects/gloo/pkg/api/external/solo/ratelimit/rate_limit_config_client.sk.go b/projects/gloo/pkg/api/external/solo/ratelimit/rate_limit_config_client.sk.go
index 7d1873e85..bd21aeb4b 100644
--- a/projects/gloo/pkg/api/external/solo/ratelimit/rate_limit_config_client.sk.go
+++ b/projects/gloo/pkg/api/external/solo/ratelimit/rate_limit_config_client.sk.go
@@ -3,6 +3,8 @@
 package v1alpha1
 
 import (
+	"context"
+
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
@@ -28,12 +30,12 @@ type rateLimitConfigClient struct {
 	rc clients.ResourceClient
 }
 
-func NewRateLimitConfigClient(rcFactory factory.ResourceClientFactory) (RateLimitConfigClient, error) {
-	return NewRateLimitConfigClientWithToken(rcFactory, "")
+func NewRateLimitConfigClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (RateLimitConfigClient, error) {
+	return NewRateLimitConfigClientWithToken(ctx, rcFactory, "")
 }
 
-func NewRateLimitConfigClientWithToken(rcFactory factory.ResourceClientFactory, token string) (RateLimitConfigClient, error) {
-	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
+func NewRateLimitConfigClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (RateLimitConfigClient, error) {
+	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
 		ResourceType: &RateLimitConfig{},
 		Token:        token,
 	})
diff --git a/projects/gloo/pkg/api/v1/artifact_client.sk.go b/projects/gloo/pkg/api/v1/artifact_client.sk.go
index e9307c8f1..eb9dc5afd 100644
--- a/projects/gloo/pkg/api/v1/artifact_client.sk.go
+++ b/projects/gloo/pkg/api/v1/artifact_client.sk.go
@@ -3,6 +3,8 @@
 package v1
 
 import (
+	"context"
+
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
@@ -28,12 +30,12 @@ type artifactClient struct {
 	rc clients.ResourceClient
 }
 
-func NewArtifactClient(rcFactory factory.ResourceClientFactory) (ArtifactClient, error) {
-	return NewArtifactClientWithToken(rcFactory, "")
+func NewArtifactClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (ArtifactClient, error) {
+	return NewArtifactClientWithToken(ctx, rcFactory, "")
 }
 
-func NewArtifactClientWithToken(rcFactory factory.ResourceClientFactory, token string) (ArtifactClient, error) {
-	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
+func NewArtifactClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (ArtifactClient, error) {
+	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
 		ResourceType: &Artifact{},
 		Token:        token,
 	})
diff --git a/projects/gloo/pkg/api/v1/endpoint_client.sk.go b/projects/gloo/pkg/api/v1/endpoint_client.sk.go
index 5310b5536..8fa18ebdf 100644
--- a/projects/gloo/pkg/api/v1/endpoint_client.sk.go
+++ b/projects/gloo/pkg/api/v1/endpoint_client.sk.go
@@ -3,6 +3,8 @@
 package v1
 
 import (
+	"context"
+
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
@@ -28,12 +30,12 @@ type endpointClient struct {
 	rc clients.ResourceClient
 }
 
-func NewEndpointClient(rcFactory factory.ResourceClientFactory) (EndpointClient, error) {
-	return NewEndpointClientWithToken(rcFactory, "")
+func NewEndpointClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (EndpointClient, error) {
+	return NewEndpointClientWithToken(ctx, rcFactory, "")
 }
 
-func NewEndpointClientWithToken(rcFactory factory.ResourceClientFactory, token string) (EndpointClient, error) {
-	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
+func NewEndpointClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (EndpointClient, error) {
+	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
 		ResourceType: &Endpoint{},
 		Token:        token,
 	})
diff --git a/projects/gloo/pkg/api/v1/enterprise/options/extauth/v1/auth_config_client.sk.go b/projects/gloo/pkg/api/v1/enterprise/options/extauth/v1/auth_config_client.sk.go
index bb1c6d32a..d9b026456 100644
--- a/projects/gloo/pkg/api/v1/enterprise/options/extauth/v1/auth_config_client.sk.go
+++ b/projects/gloo/pkg/api/v1/enterprise/options/extauth/v1/auth_config_client.sk.go
@@ -3,6 +3,8 @@
 package v1
 
 import (
+	"context"
+
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
@@ -28,12 +30,12 @@ type authConfigClient struct {
 	rc clients.ResourceClient
 }
 
-func NewAuthConfigClient(rcFactory factory.ResourceClientFactory) (AuthConfigClient, error) {
-	return NewAuthConfigClientWithToken(rcFactory, "")
+func NewAuthConfigClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (AuthConfigClient, error) {
+	return NewAuthConfigClientWithToken(ctx, rcFactory, "")
 }
 
-func NewAuthConfigClientWithToken(rcFactory factory.ResourceClientFactory, token string) (AuthConfigClient, error) {
-	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
+func NewAuthConfigClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (AuthConfigClient, error) {
+	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
 		ResourceType: &AuthConfig{},
 		Token:        token,
 	})
diff --git a/projects/gloo/pkg/api/v1/proxy_client.sk.go b/projects/gloo/pkg/api/v1/proxy_client.sk.go
index caa6d297c..7b164c05e 100644
--- a/projects/gloo/pkg/api/v1/proxy_client.sk.go
+++ b/projects/gloo/pkg/api/v1/proxy_client.sk.go
@@ -3,6 +3,8 @@
 package v1
 
 import (
+	"context"
+
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
@@ -28,12 +30,12 @@ type proxyClient struct {
 	rc clients.ResourceClient
 }
 
-func NewProxyClient(rcFactory factory.ResourceClientFactory) (ProxyClient, error) {
-	return NewProxyClientWithToken(rcFactory, "")
+func NewProxyClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (ProxyClient, error) {
+	return NewProxyClientWithToken(ctx, rcFactory, "")
 }
 
-func NewProxyClientWithToken(rcFactory factory.ResourceClientFactory, token string) (ProxyClient, error) {
-	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
+func NewProxyClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (ProxyClient, error) {
+	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
 		ResourceType: &Proxy{},
 		Token:        token,
 	})
diff --git a/projects/gloo/pkg/api/v1/secret_client.sk.go b/projects/gloo/pkg/api/v1/secret_client.sk.go
index c4ebc5bfe..c4fd5b33a 100644
--- a/projects/gloo/pkg/api/v1/secret_client.sk.go
+++ b/projects/gloo/pkg/api/v1/secret_client.sk.go
@@ -3,6 +3,8 @@
 package v1
 
 import (
+	"context"
+
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
@@ -28,12 +30,12 @@ type secretClient struct {
 	rc clients.ResourceClient
 }
 
-func NewSecretClient(rcFactory factory.ResourceClientFactory) (SecretClient, error) {
-	return NewSecretClientWithToken(rcFactory, "")
+func NewSecretClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (SecretClient, error) {
+	return NewSecretClientWithToken(ctx, rcFactory, "")
 }
 
-func NewSecretClientWithToken(rcFactory factory.ResourceClientFactory, token string) (SecretClient, error) {
-	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
+func NewSecretClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (SecretClient, error) {
+	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
 		ResourceType: &Secret{},
 		Token:        token,
 	})
diff --git a/projects/gloo/pkg/api/v1/settings_client.sk.go b/projects/gloo/pkg/api/v1/settings_client.sk.go
index 23d7635cc..0b29a35e4 100644
--- a/projects/gloo/pkg/api/v1/settings_client.sk.go
+++ b/projects/gloo/pkg/api/v1/settings_client.sk.go
@@ -3,6 +3,8 @@
 package v1
 
 import (
+	"context"
+
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
@@ -28,12 +30,12 @@ type settingsClient struct {
 	rc clients.ResourceClient
 }
 
-func NewSettingsClient(rcFactory factory.ResourceClientFactory) (SettingsClient, error) {
-	return NewSettingsClientWithToken(rcFactory, "")
+func NewSettingsClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (SettingsClient, error) {
+	return NewSettingsClientWithToken(ctx, rcFactory, "")
 }
 
-func NewSettingsClientWithToken(rcFactory factory.ResourceClientFactory, token string) (SettingsClient, error) {
-	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
+func NewSettingsClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (SettingsClient, error) {
+	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
 		ResourceType: &Settings{},
 		Token:        token,
 	})
diff --git a/projects/gloo/pkg/api/v1/upstream_client.sk.go b/projects/gloo/pkg/api/v1/upstream_client.sk.go
index e6006ef19..f17383846 100644
--- a/projects/gloo/pkg/api/v1/upstream_client.sk.go
+++ b/projects/gloo/pkg/api/v1/upstream_client.sk.go
@@ -3,6 +3,8 @@
 package v1
 
 import (
+	"context"
+
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
@@ -28,12 +30,12 @@ type upstreamClient struct {
 	rc clients.ResourceClient
 }
 
-func NewUpstreamClient(rcFactory factory.ResourceClientFactory) (UpstreamClient, error) {
-	return NewUpstreamClientWithToken(rcFactory, "")
+func NewUpstreamClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (UpstreamClient, error) {
+	return NewUpstreamClientWithToken(ctx, rcFactory, "")
 }
 
-func NewUpstreamClientWithToken(rcFactory factory.ResourceClientFactory, token string) (UpstreamClient, error) {
-	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
+func NewUpstreamClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (UpstreamClient, error) {
+	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
 		ResourceType: &Upstream{},
 		Token:        token,
 	})
diff --git a/projects/gloo/pkg/api/v1/upstream_group_client.sk.go b/projects/gloo/pkg/api/v1/upstream_group_client.sk.go
index b903bdade..ced99eda8 100644
--- a/projects/gloo/pkg/api/v1/upstream_group_client.sk.go
+++ b/projects/gloo/pkg/api/v1/upstream_group_client.sk.go
@@ -3,6 +3,8 @@
 package v1
 
 import (
+	"context"
+
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
@@ -28,12 +30,12 @@ type upstreamGroupClient struct {
 	rc clients.ResourceClient
 }
 
-func NewUpstreamGroupClient(rcFactory factory.ResourceClientFactory) (UpstreamGroupClient, error) {
-	return NewUpstreamGroupClientWithToken(rcFactory, "")
+func NewUpstreamGroupClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (UpstreamGroupClient, error) {
+	return NewUpstreamGroupClientWithToken(ctx, rcFactory, "")
 }
 
-func NewUpstreamGroupClientWithToken(rcFactory factory.ResourceClientFactory, token string) (UpstreamGroupClient, error) {
-	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
+func NewUpstreamGroupClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (UpstreamGroupClient, error) {
+	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
 		ResourceType: &UpstreamGroup{},
 		Token:        token,
 	})
diff --git a/projects/gloo/pkg/bootstrap/utils.go b/projects/gloo/pkg/bootstrap/utils.go
index 8294fdc2d..e3d50396d 100644
--- a/projects/gloo/pkg/bootstrap/utils.go
+++ b/projects/gloo/pkg/bootstrap/utils.go
@@ -149,7 +149,7 @@ func KubeServiceClientForSettings(ctx context.Context,
 		return nil, errors.Errorf("internal error: shared cache cannot be nil")
 	}
 	memoryRcFactory := &factory.MemoryResourceClientFactory{Cache: sharedCache}
-	inMemoryClient, err := memoryRcFactory.NewResourceClient(factory.NewResourceClientParams{
+	inMemoryClient, err := memoryRcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
 		ResourceType: &skkube.Service{},
 	})
 	if err != nil {
diff --git a/projects/gloo/pkg/plugins/aws/ec2/plugin.go b/projects/gloo/pkg/plugins/aws/ec2/plugin.go
index b4941564a..3f8be4679 100644
--- a/projects/gloo/pkg/plugins/aws/ec2/plugin.go
+++ b/projects/gloo/pkg/plugins/aws/ec2/plugin.go
@@ -1,6 +1,7 @@
 package ec2
 
 import (
+	"context"
 	"reflect"
 
 	"github.com/rotisserie/eris"
@@ -38,14 +39,14 @@ var _ plugins.Plugin = new(plugin)
 var _ plugins.UpstreamPlugin = new(plugin)
 var _ discovery.DiscoveryPlugin = new(plugin)
 
-func NewPlugin(secretFactory factory.ResourceClientFactory) *plugin {
+func NewPlugin(ctx context.Context, secretFactory factory.ResourceClientFactory) *plugin {
 	p := &plugin{}
 	var err error
 	if secretFactory == nil {
 		p.constructorErr = ConstructorInputError("secret")
 		return p
 	}
-	p.secretClient, err = v1.NewSecretClient(secretFactory)
+	p.secretClient, err = v1.NewSecretClient(ctx, secretFactory)
 	if err != nil {
 		p.constructorErr = ConstructorGetClientError("secret", err)
 		return p
diff --git a/projects/gloo/pkg/plugins/registry/registry.go b/projects/gloo/pkg/plugins/registry/registry.go
index da6f0f74a..924994aac 100644
--- a/projects/gloo/pkg/plugins/registry/registry.go
+++ b/projects/gloo/pkg/plugins/registry/registry.go
@@ -70,7 +70,8 @@ var globalRegistry = func(opts bootstrap.Opts, pluginExtensions ...func() plugin
 		cors.NewPlugin(),
 		linkerd.NewPlugin(),
 		stats.NewPlugin(),
-		ec2.NewPlugin(opts.Secrets),
+		//todo is this the correct context to get, or should I get the one from the validation server?
+		ec2.NewPlugin(opts.ControlPlane.Ctx, opts.Secrets),
 		tracing.NewPlugin(),
 		shadowing.NewPlugin(),
 		headers.NewPlugin(),
diff --git a/projects/gloo/pkg/setup/setup.go b/projects/gloo/pkg/setup/setup.go
index 0e1bdb0a4..54b56a3eb 100644
--- a/projects/gloo/pkg/setup/setup.go
+++ b/projects/gloo/pkg/setup/setup.go
@@ -8,7 +8,6 @@ import (
 
 	"go.uber.org/zap"
 
-	"github.com/solo-io/gloo/pkg/utils/usage"
 	"github.com/solo-io/gloo/projects/metrics/pkg/metricsservice"
 	"github.com/solo-io/go-utils/contextutils"
 	"github.com/solo-io/reporting-client/pkg/client"
@@ -23,7 +22,7 @@ func Main(customCtx context.Context) error {
 	if err != nil {
 		contextutils.LoggerFrom(customCtx).Warnw("Could not create metrics storage loader - will not report usage: %s", zap.Error(err))
 	} else {
-		usageReporter = &usage.DefaultUsageReader{MetricsStorage: metricsStorage}
+		usageReporter = &usage.breakinDefaultUsageReader{MetricsStorage: metricsStorage}
 	}
 
 	return startSetupLoop(customCtx, usageReporter)
diff --git a/projects/gloo/pkg/syncer/setup_syncer.go b/projects/gloo/pkg/syncer/setup_syncer.go
index aa1f64727..020c0abc4 100644
--- a/projects/gloo/pkg/syncer/setup_syncer.go
+++ b/projects/gloo/pkg/syncer/setup_syncer.go
@@ -348,7 +348,7 @@ func RunGlooWithExtensions(opts bootstrap.Opts, extensions Extensions) error {
 		Cache: memory.NewInMemoryResourceCache(),
 	}
 
-	upstreamClient, err := v1.NewUpstreamClient(opts.Upstreams)
+	upstreamClient, err := v1.NewUpstreamClient(watchOpts.Ctx, opts.Upstreams)
 	if err != nil {
 		return err
 	}
@@ -365,7 +365,7 @@ func RunGlooWithExtensions(opts bootstrap.Opts, extensions Extensions) error {
 		return err
 	}
 
-	proxyClient, err := v1.NewProxyClient(opts.Proxies)
+	proxyClient, err := v1.NewProxyClient(watchOpts.Ctx, opts.Proxies)
 	if err != nil {
 		return err
 	}
@@ -373,7 +373,7 @@ func RunGlooWithExtensions(opts bootstrap.Opts, extensions Extensions) error {
 		return err
 	}
 
-	upstreamGroupClient, err := v1.NewUpstreamGroupClient(opts.UpstreamGroups)
+	upstreamGroupClient, err := v1.NewUpstreamGroupClient(watchOpts.Ctx, opts.UpstreamGroups)
 	if err != nil {
 		return err
 	}
@@ -381,22 +381,22 @@ func RunGlooWithExtensions(opts bootstrap.Opts, extensions Extensions) error {
 		return err
 	}
 
-	endpointClient, err := v1.NewEndpointClient(endpointsFactory)
+	endpointClient, err := v1.NewEndpointClient(watchOpts.Ctx, endpointsFactory)
 	if err != nil {
 		return err
 	}
 
-	secretClient, err := v1.NewSecretClient(opts.Secrets)
+	secretClient, err := v1.NewSecretClient(watchOpts.Ctx, opts.Secrets)
 	if err != nil {
 		return err
 	}
 
-	artifactClient, err := v1.NewArtifactClient(opts.Artifacts)
+	artifactClient, err := v1.NewArtifactClient(watchOpts.Ctx, opts.Artifacts)
 	if err != nil {
 		return err
 	}
 
-	authConfigClient, err := extauth.NewAuthConfigClient(opts.AuthConfigs)
+	authConfigClient, err := extauth.NewAuthConfigClient(watchOpts.Ctx, opts.AuthConfigs)
 	if err != nil {
 		return err
 	}
@@ -404,7 +404,7 @@ func RunGlooWithExtensions(opts bootstrap.Opts, extensions Extensions) error {
 		return err
 	}
 
-	rlClient, rlReporterClient, err := rlv1alpha1.NewRateLimitClients(opts.RateLimitConfigs)
+	rlClient, rlReporterClient, err := rlv1alpha1.NewRateLimitClients(watchOpts.Ctx, opts.RateLimitConfigs)
 	if err != nil {
 		return err
 	}
diff --git a/projects/ingress/pkg/api/v1/ingress_client.sk.go b/projects/ingress/pkg/api/v1/ingress_client.sk.go
index 226cc3d31..3cad0c66d 100644
--- a/projects/ingress/pkg/api/v1/ingress_client.sk.go
+++ b/projects/ingress/pkg/api/v1/ingress_client.sk.go
@@ -3,6 +3,8 @@
 package v1
 
 import (
+	"context"
+
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
@@ -28,12 +30,12 @@ type ingressClient struct {
 	rc clients.ResourceClient
 }
 
-func NewIngressClient(rcFactory factory.ResourceClientFactory) (IngressClient, error) {
-	return NewIngressClientWithToken(rcFactory, "")
+func NewIngressClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (IngressClient, error) {
+	return NewIngressClientWithToken(ctx, rcFactory, "")
 }
 
-func NewIngressClientWithToken(rcFactory factory.ResourceClientFactory, token string) (IngressClient, error) {
-	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
+func NewIngressClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (IngressClient, error) {
+	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
 		ResourceType: &Ingress{},
 		Token:        token,
 	})
diff --git a/projects/ingress/pkg/api/v1/kube_service_client.sk.go b/projects/ingress/pkg/api/v1/kube_service_client.sk.go
index 4554f65b8..d3789122e 100644
--- a/projects/ingress/pkg/api/v1/kube_service_client.sk.go
+++ b/projects/ingress/pkg/api/v1/kube_service_client.sk.go
@@ -3,6 +3,8 @@
 package v1
 
 import (
+	"context"
+
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
@@ -28,12 +30,12 @@ type kubeServiceClient struct {
 	rc clients.ResourceClient
 }
 
-func NewKubeServiceClient(rcFactory factory.ResourceClientFactory) (KubeServiceClient, error) {
-	return NewKubeServiceClientWithToken(rcFactory, "")
+func NewKubeServiceClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (KubeServiceClient, error) {
+	return NewKubeServiceClientWithToken(ctx, rcFactory, "")
 }
 
-func NewKubeServiceClientWithToken(rcFactory factory.ResourceClientFactory, token string) (KubeServiceClient, error) {
-	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
+func NewKubeServiceClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (KubeServiceClient, error) {
+	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
 		ResourceType: &KubeService{},
 		Token:        token,
 	})
diff --git a/projects/knative/pkg/api/external/knative/ingress_client.sk.go b/projects/knative/pkg/api/external/knative/ingress_client.sk.go
index 2e5b9cabb..932617108 100644
--- a/projects/knative/pkg/api/external/knative/ingress_client.sk.go
+++ b/projects/knative/pkg/api/external/knative/ingress_client.sk.go
@@ -3,6 +3,8 @@
 package v1alpha1
 
 import (
+	"context"
+
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
 	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
 	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
@@ -28,12 +30,12 @@ type ingressClient struct {
 	rc clients.ResourceClient
 }
 
-func NewIngressClient(rcFactory factory.ResourceClientFactory) (IngressClient, error) {
-	return NewIngressClientWithToken(rcFactory, "")
+func NewIngressClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (IngressClient, error) {
+	return NewIngressClientWithToken(ctx, rcFactory, "")
 }
 
-func NewIngressClientWithToken(rcFactory factory.ResourceClientFactory, token string) (IngressClient, error) {
-	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
+func NewIngressClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (IngressClient, error) {
+	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
 		ResourceType: &Ingress{},
 		Token:        token,
 	})
diff --git a/projects/metrics/pkg/metricsservice/metrics_handler.go b/projects/metrics/pkg/metricsservice/metrics_handler.go
index b457d9f7b..556022e1a 100644
--- a/projects/metrics/pkg/metricsservice/metrics_handler.go
+++ b/projects/metrics/pkg/metricsservice/metrics_handler.go
@@ -51,7 +51,7 @@ func (m *metricsHandler) HandleMetrics(ctx context.Context, met *envoymet.Stream
 		return err
 	}
 
-	existingUsage, err := m.storage.GetUsage()
+	existingUsage, err := m.storage.GetUsage(ctx)
 	if err != nil {
 		contextutils.LoggerFrom(ctx).Errorf("Error while retrieving old usage: %s", err.Error())
 		return err
@@ -59,7 +59,7 @@ func (m *metricsHandler) HandleMetrics(ctx context.Context, met *envoymet.Stream
 
 	mergedUsage := m.usageMerger.MergeUsage(met.Identifier.Node.Id, existingUsage, newMetrics)
 
-	err = m.storage.RecordUsage(mergedUsage)
+	err = m.storage.RecordUsage(ctx, mergedUsage)
 	if err != nil {
 		contextutils.LoggerFrom(ctx).Errorf("Error while storing new usage: %s", err.Error())
 		return err
diff --git a/projects/metrics/pkg/metricsservice/mocks/mock_storage.go b/projects/metrics/pkg/metricsservice/mocks/mock_storage.go
index cca5656ba..b6333dbfb 100644
--- a/projects/metrics/pkg/metricsservice/mocks/mock_storage.go
+++ b/projects/metrics/pkg/metricsservice/mocks/mock_storage.go
@@ -5,6 +5,7 @@
 package mocks
 
 import (
+	context "context"
 	reflect "reflect"
 
 	gomock "github.com/golang/mock/gomock"
@@ -35,30 +36,30 @@ func (m *MockStorageClient) EXPECT() *MockStorageClientMockRecorder {
 }
 
 // GetUsage mocks base method
-func (m *MockStorageClient) GetUsage() (*metricsservice.GlobalUsage, error) {
+func (m *MockStorageClient) GetUsage(arg0 context.Context) (*metricsservice.GlobalUsage, error) {
 	m.ctrl.T.Helper()
-	ret := m.ctrl.Call(m, "GetUsage")
+	ret := m.ctrl.Call(m, "GetUsage", arg0)
 	ret0, _ := ret[0].(*metricsservice.GlobalUsage)
 	ret1, _ := ret[1].(error)
 	return ret0, ret1
 }
 
 // GetUsage indicates an expected call of GetUsage
-func (mr *MockStorageClientMockRecorder) GetUsage() *gomock.Call {
+func (mr *MockStorageClientMockRecorder) GetUsage(arg0 interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsage", reflect.TypeOf((*MockStorageClient)(nil).GetUsage))
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsage", reflect.TypeOf((*MockStorageClient)(nil).GetUsage), arg0)
 }
 
 // RecordUsage mocks base method
-func (m *MockStorageClient) RecordUsage(arg0 *metricsservice.GlobalUsage) error {
+func (m *MockStorageClient) RecordUsage(arg0 context.Context, arg1 *metricsservice.GlobalUsage) error {
 	m.ctrl.T.Helper()
-	ret := m.ctrl.Call(m, "RecordUsage", arg0)
+	ret := m.ctrl.Call(m, "RecordUsage", arg0, arg1)
 	ret0, _ := ret[0].(error)
 	return ret0
 }
 
 // RecordUsage indicates an expected call of RecordUsage
-func (mr *MockStorageClientMockRecorder) RecordUsage(arg0 interface{}) *gomock.Call {
+func (mr *MockStorageClientMockRecorder) RecordUsage(arg0, arg1 interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUsage", reflect.TypeOf((*MockStorageClient)(nil).RecordUsage), arg0)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUsage", reflect.TypeOf((*MockStorageClient)(nil).RecordUsage), arg0, arg1)
 }
diff --git a/projects/metrics/pkg/metricsservice/storage_client.go b/projects/metrics/pkg/metricsservice/storage_client.go
index 5e0562730..3f93017c6 100644
--- a/projects/metrics/pkg/metricsservice/storage_client.go
+++ b/projects/metrics/pkg/metricsservice/storage_client.go
@@ -1,6 +1,7 @@
 package metricsservice
 
 import (
+	"context"
 	"encoding/json"
 	"sync"
 	"time"
@@ -8,6 +9,7 @@ import (
 	"github.com/solo-io/go-utils/kubeutils"
 
 	corev1 "k8s.io/api/core/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	kubeclient "k8s.io/client-go/kubernetes"
 	k8s "k8s.io/client-go/kubernetes/typed/core/v1"
@@ -16,8 +18,8 @@ import (
 //go:generate mockgen -destination mocks/mock_storage.go -package mocks github.com/solo-io/gloo/projects/metrics/pkg/metricsservice StorageClient
 
 type StorageClient interface {
-	RecordUsage(usage *GlobalUsage) error
-	GetUsage() (*GlobalUsage, error)
+	RecordUsage(ctx context.Context, usage *GlobalUsage) error
+	GetUsage(ctx context.Context) (*GlobalUsage, error)
 }
 
 type EnvoyMetrics struct {
@@ -85,11 +87,11 @@ func NewDefaultConfigMapStorage(podNamespace string) (*configMapStorageClient, e
 
 // Record a new set of metrics for the given envoy instance id
 // The envoy instance id template is set in the gateway proxy configmap: `envoy.yaml`.node.id
-func (s *configMapStorageClient) RecordUsage(usage *GlobalUsage) error {
+func (s *configMapStorageClient) RecordUsage(ctx context.Context, usage *GlobalUsage) error {
 	s.mutex.Lock()
 	defer s.mutex.Unlock()
 
-	_, configMap, err := s.getExistingUsage()
+	_, configMap, err := s.getExistingUsage(ctx)
 	if err != nil {
 		return err
 	}
@@ -100,15 +102,15 @@ func (s *configMapStorageClient) RecordUsage(usage *GlobalUsage) error {
 	}
 	configMap.Data = map[string]string{usageDataKey: string(bytes)}
 
-	_, err = s.configMapClient.Update(configMap)
+	_, err = s.configMapClient.Update(ctx, configMap, metav1.UpdateOptions{})
 	return err
 }
 
-func (s *configMapStorageClient) GetUsage() (*GlobalUsage, error) {
+func (s *configMapStorageClient) GetUsage(ctx context.Context) (*GlobalUsage, error) {
 	s.mutex.RLock()
 	defer s.mutex.RUnlock()
 
-	existingUsage, _, err := s.getExistingUsage()
+	existingUsage, _, err := s.getExistingUsage(ctx)
 	if err != nil {
 		return nil, err
 	}
@@ -119,8 +121,8 @@ func (s *configMapStorageClient) GetUsage() (*GlobalUsage, error) {
 // returns the old usage, the config map it came from, and any error
 // the config map is nil if and only if an error occurs
 // the old usage is nil if it has not been written yet or if there was an error reading it
-func (s *configMapStorageClient) getExistingUsage() (*GlobalUsage, *corev1.ConfigMap, error) {
-	cm, err := s.configMapClient.Get(MetricsConfigMapName, v1.GetOptions{})
+func (s *configMapStorageClient) getExistingUsage(ctx context.Context) (*GlobalUsage, *corev1.ConfigMap, error) {
+	cm, err := s.configMapClient.Get(ctx, MetricsConfigMapName, v1.GetOptions{})
 	if err != nil {
 		return nil, nil, err
 	}
diff --git a/test/kube2e/gateway/gateway_suite_test.go b/test/kube2e/gateway/gateway_suite_test.go
index 440b5ad64..974e45d37 100644
--- a/test/kube2e/gateway/gateway_suite_test.go
+++ b/test/kube2e/gateway/gateway_suite_test.go
@@ -1,6 +1,7 @@
 package gateway_test
 
 import (
+	"context"
 	"fmt"
 	"os"
 	"path/filepath"
@@ -32,6 +33,7 @@ func TestGateway(t *testing.T) {
 }
 
 var testHelper *helper.SoloTestHelper
+var ctx, _ = context.WithCancel(context.Background())
 
 var _ = BeforeSuite(StartTestHelper)
 var _ = AfterSuite(TearDownTestHelper)
@@ -55,7 +57,7 @@ func StartTestHelper() {
 	valueOverrideFile, cleanupFunc := kube2e.GetHelmValuesOverrideFile()
 	defer cleanupFunc()
 
-	err = testHelper.InstallGloo(helper.GATEWAY, 5*time.Minute, helper.ExtraArgs("--values", valueOverrideFile))
+	err = testHelper.InstallGloo(ctx, helper.GATEWAY, 5*time.Minute, helper.ExtraArgs("--values", valueOverrideFile))
 	Expect(err).NotTo(HaveOccurred())
 
 	// Check that everything is OK
@@ -75,7 +77,7 @@ func TearDownTestHelper() {
 		Expect(testHelper).ToNot(BeNil())
 		err := testHelper.UninstallGloo()
 		Expect(err).NotTo(HaveOccurred())
-		_, err = kube2e.MustKubeClient().CoreV1().Namespaces().Get(testHelper.InstallNamespace, metav1.GetOptions{})
+		_, err = kube2e.MustKubeClient().CoreV1().Namespaces().Get(ctx, testHelper.InstallNamespace, metav1.GetOptions{})
 		Expect(apierrors.IsNotFound(err)).To(BeTrue())
 	}
 }
diff --git a/test/kube2e/glooctl/glooctl_suite_test.go b/test/kube2e/glooctl/glooctl_suite_test.go
index 153ce4a7c..028c92a57 100644
--- a/test/kube2e/glooctl/glooctl_suite_test.go
+++ b/test/kube2e/glooctl/glooctl_suite_test.go
@@ -1,6 +1,7 @@
 package glooctl_test
 
 import (
+	"context"
 	"fmt"
 	"os"
 	"path/filepath"
@@ -33,6 +34,7 @@ func TestGlooctl(t *testing.T) {
 
 var testHelper *helper.SoloTestHelper
 
+var ctx, _ = context.WithCancel(context.Background())
 var _ = BeforeSuite(StartTestHelper)
 var _ = AfterSuite(TearDownTestHelper)
 
@@ -54,7 +56,7 @@ func StartTestHelper() {
 	skhelpers.RegisterPreFailHandler(helpers.KubeDumpOnFail(GinkgoWriter, "istio-system", testHelper.InstallNamespace))
 
 	// Install Gloo
-	err = testHelper.InstallGloo(helper.GATEWAY, 5*time.Minute)
+	err = testHelper.InstallGloo(ctx, helper.GATEWAY, 5*time.Minute)
 	Expect(err).NotTo(HaveOccurred())
 
 	// Check that everything is OK
@@ -66,7 +68,7 @@ func TearDownTestHelper() {
 		Expect(testHelper).ToNot(BeNil())
 		err := testHelper.UninstallGloo()
 		Expect(err).NotTo(HaveOccurred())
-		_, err = kube2e.MustKubeClient().CoreV1().Namespaces().Get(testHelper.InstallNamespace, metav1.GetOptions{})
+		_, err = kube2e.MustKubeClient().CoreV1().Namespaces().Get(ctx, testHelper.InstallNamespace, metav1.GetOptions{})
 		Expect(apierrors.IsNotFound(err)).To(BeTrue())
 	}
 }
diff --git a/test/kube2e/helm/helm_suite_test.go b/test/kube2e/helm/helm_suite_test.go
index aa3e6440b..4fde45a71 100644
--- a/test/kube2e/helm/helm_suite_test.go
+++ b/test/kube2e/helm/helm_suite_test.go
@@ -1,6 +1,7 @@
 package helm_test
 
 import (
+	"context"
 	"fmt"
 	"os"
 	"os/exec"
@@ -35,6 +36,7 @@ func TestHelm(t *testing.T) {
 }
 
 var testHelper *helper.SoloTestHelper
+var ctx, _ = context.WithCancel(context.Background())
 
 var _ = BeforeSuite(StartTestHelper)
 var _ = AfterSuite(TearDownTestHelper)
@@ -77,7 +79,7 @@ func TearDownTestHelper() {
 		Expect(testHelper).ToNot(BeNil())
 		err := testHelper.UninstallGloo()
 		Expect(err).NotTo(HaveOccurred())
-		_, err = kube2e.MustKubeClient().CoreV1().Namespaces().Get(testHelper.InstallNamespace, metav1.GetOptions{})
+		_, err = kube2e.MustKubeClient().CoreV1().Namespaces().Get(ctx, testHelper.InstallNamespace, metav1.GetOptions{})
 		Expect(apierrors.IsNotFound(err)).To(BeTrue())
 	}
 }
diff --git a/test/kube2e/helm/helm_test.go b/test/kube2e/helm/helm_test.go
index 450c632af..0b3285384 100644
--- a/test/kube2e/helm/helm_test.go
+++ b/test/kube2e/helm/helm_test.go
@@ -1,6 +1,7 @@
 package helm_test
 
 import (
+	"context"
 	"path/filepath"
 
 	"github.com/solo-io/skv2/codegen/util"
@@ -21,12 +22,17 @@ var _ = Describe("Kube2e: helm", func() {
 		chartUri           string
 		rlcCrdName         = "ratelimitconfigs.ratelimit.solo.io"
 		rlcCrdTemplateName = filepath.Join(util.GetModuleRoot(), "install", "helm", "gloo", "crds", "ratelimit_config.yaml")
+		ctx                context.Context
 	)
 
+	BeforeEach(func() {
+		ctx, _ = context.WithCancel(context.Background())
+	})
+
 	It("uses helm to upgrade to this gloo version without errors", func() {
 
 		By("should start with gloo version 1.3.0")
-		Expect(GetGlooServerVersion(testHelper.InstallNamespace)).To(Equal("1.3.0"))
+		Expect(GetGlooServerVersion(ctx, testHelper.InstallNamespace)).To(Equal("1.3.0"))
 
 		By("apply new `RateLimitConfig` CRD")
 		runAndCleanCommand("kubectl", "apply", "-f", rlcCrdTemplateName)
@@ -41,7 +47,7 @@ var _ = Describe("Kube2e: helm", func() {
 			"-n", testHelper.InstallNamespace)
 
 		By("should have upgraded to the gloo version being tested")
-		Expect(GetGlooServerVersion(testHelper.InstallNamespace)).To(Equal(testHelper.ChartVersion()))
+		Expect(GetGlooServerVersion(ctx, testHelper.InstallNamespace)).To(Equal(testHelper.ChartVersion()))
 
 		kube2e.GlooctlCheckEventuallyHealthy(1, testHelper, "180s")
 	})
@@ -49,7 +55,7 @@ var _ = Describe("Kube2e: helm", func() {
 	It("uses helm to update the settings without errors", func() {
 
 		By("should start with the settings.invalidConfigPolicy.invalidRouteResponseCode=404")
-		client := helpers.MustSettingsClient()
+		client := helpers.MustSettingsClient(ctx)
 		settings, err := client.Read(testHelper.InstallNamespace, defaults.SettingsName, clients.ReadOpts{})
 		Expect(err).To(BeNil())
 		Expect(settings.GetGloo().GetInvalidConfigPolicy().GetInvalidRouteResponseCode()).To(Equal(uint32(404)))
@@ -61,7 +67,7 @@ var _ = Describe("Kube2e: helm", func() {
 				"-n", testHelper.InstallNamespace,
 				"--set", "settings.replaceInvalidRoutes=true",
 				"--set", "settings.invalidConfigPolicy.invalidRouteResponseCode=400",
-				"--version", GetGlooServerVersion(testHelper.InstallNamespace))
+				"--version", GetGlooServerVersion(ctx, testHelper.InstallNamespace))
 		} else { // has already upgraded to the chart being tested- use it
 			runAndCleanCommand("helm", "upgrade", "gloo", chartUri,
 				"-n", testHelper.InstallNamespace,
@@ -79,8 +85,8 @@ var _ = Describe("Kube2e: helm", func() {
 
 })
 
-func GetGlooServerVersion(namespace string) (v string) {
-	glooVersion, err := version.GetClientServerVersions(version.NewKube(namespace))
+func GetGlooServerVersion(ctx context.Context, namespace string) (v string) {
+	glooVersion, err := version.GetClientServerVersions(ctx, version.NewKube(namespace))
 	Expect(err).To(BeNil())
 	Expect(len(glooVersion.GetServer())).To(Equal(1))
 	for _, container := range glooVersion.GetServer()[0].GetKubernetes().GetContainers() {
diff --git a/test/kube2e/wasm/wasm_suite_test.go b/test/kube2e/wasm/wasm_suite_test.go
index c600534a5..a7cdca9ea 100644
--- a/test/kube2e/wasm/wasm_suite_test.go
+++ b/test/kube2e/wasm/wasm_suite_test.go
@@ -1,6 +1,7 @@
 package wasm_test
 
 import (
+	"context"
 	"fmt"
 	"io/ioutil"
 	"os"
@@ -33,6 +34,7 @@ func TestWasm(t *testing.T) {
 }
 
 var testHelper *helper.SoloTestHelper
+var ctx, _ = context.WithCancel(context.Background())
 
 var _ = BeforeSuite(StartTestHelper)
 var _ = AfterSuite(TearDownTestHelper)
@@ -56,7 +58,7 @@ func StartTestHelper() {
 	valueOverrideFile, cleanupFunc := getHelmaWasmValuesOverrideFile()
 	defer cleanupFunc()
 
-	err = testHelper.InstallGloo(helper.GATEWAY, 5*time.Minute, helper.ExtraArgs("--values", valueOverrideFile))
+	err = testHelper.InstallGloo(ctx, helper.GATEWAY, 5*time.Minute, helper.ExtraArgs("--values", valueOverrideFile))
 	Expect(err).NotTo(HaveOccurred())
 
 	// Check that everything is OK
@@ -106,7 +108,7 @@ func TearDownTestHelper() {
 		Expect(testHelper).ToNot(BeNil())
 		err := testHelper.UninstallGloo()
 		Expect(err).NotTo(HaveOccurred())
-		_, err = kube2e.MustKubeClient().CoreV1().Namespaces().Get(testHelper.InstallNamespace, metav1.GetOptions{})
+		_, err = kube2e.MustKubeClient().CoreV1().Namespaces().Get(ctx, testHelper.InstallNamespace, metav1.GetOptions{})
 		Expect(apierrors.IsNotFound(err)).To(BeTrue())
 	}
 }
